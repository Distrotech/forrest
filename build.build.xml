<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="./tools/antipede/resources/stylesheets/build.xsl"?>

<!--<!DOCTYPE project SYSTEM "./tools/antipede/build.dtd" >-->
<!DOCTYPE project [
  <!-- antipede -->
  <!ENTITY import-antipede  SYSTEM "./tools/antipede/build.xtarget">

]>
<project default="interactive" basedir="." name="project build file">

<description>
                   * ===================================== *
                   |   Krysalis Centipede Build System     |
                   * ===================================== *
                                     by

                   Nicola Ken Barozzi (nicolaken@apache.org)
                   Marc Johnson (mjohnson@apache.org)


                   For a simple interactive build, simply
                   run the build script (build.bat or build.sh)
</description>


  <path id="classpath">
    <fileset dir="./lib/endorsed">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="./lib/core">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="./lib/optional">
      <include name="*.jar"/>
    </fileset>
  </path>


  <!-- =================================================================== -->
  <!-- Targets for this project                                            -->
  <!-- =================================================================== -->
  <target name="init" depends="-init">
    <property name="name"                  value="${xgump.module.project.name}"/>
    <property name="packages"              value="${xgump.module.project.packages}"/>

    <property name="build.root"            value="${xlayout.build.dir}"/>
    <property name="build.dir"             value="${xlayout.build.dir}"/>
    <property name="resource.dir"          value="${xlayout.source.resources.dir}"/>
    <property name="context.dir"           value="${xlayout.source.documentation.dir}"/>
    <property name="build.docs"            value="${xlayout.build.documentation.dir}"/>
    <property name="build.javadocs"        value="${xlayout.build.documentation.javadocs.dir}"/>
    <property name="build.context"         value="${xlayout.build.work.dir}"/>
    <property name="build.dest"            value="${xlayout.build.classes.dir}"/>
    <property name="build.scratchpad.dest" value="${xlayout.build.scratchpad.classes.dir}"/>

    <property name="tools.dir"             value="./tools"/>
    <property name="tools.jar"             value="${java.home}/../lib/tools.jar"/>
    <available file="${tools.jar}"         property="tools.jar.present"/>

  </target>


  <!-- =================================================================== -->
  <!-- Interactive build                                                   -->
  <!-- =================================================================== -->
  <target name="interactive" description="Interactive Build" depends="-init">
    <echo>
    --------------------------------------------------------------

          ${xgump.module.project.name} ${xgump.module.project.version.major}.${xgump.module.project.version.minor}   [${YEAR}]

    --------------------------------------------------------------
     Using ${ant.version}
     Build file ${ant.file}
    --------------------------------------------------------------
     These are the most common build targets.
     You can also invoke them directly; see build.xml for more info.
     Builds will be in /build directory, distributions in /dist.

     forrest-typical targets:

		 dist ------------- build all incarnation distributions:
		 dist-shbat ------- build the forrest.sh/bat incarnation (requires ant to *run*)
		 dist-cent      ??? ??? future target making centipede-cent
		 dist-maven     ??? ??? future target making maven plugin
		 dist-jar       ??? ??? future target making jar that has both main as ant-task wrapper classes


		 forrest-test targets:

     docs ------------- generates static Forrest website for itself as the project to run on.
     webapp ----------- builds webapp (.war) deployable version of Forrest website
     bot.run ---------- runs the forrestbot using the configuration specified in
                        forrestbot.conf.xml

		 
     default centipede targets:

     compile ---------- compiles the source code
     test ------------- performs the jUnit tests
     jar -------------- create the jar files
     docs ------------- generates the html docs - clean not needed
     javadocs --------- generates the API documentation
     site ------------- generates the html site (docs+reports)
     clean ------------ cleans the build directory
     dist ------------- creates src and bin distributions
     scratchpad ------- build-run scratchpad code
     contrib ---------- build-run contributed code


    </echo>
    <property name="input.selection" value="docs"/>
    <centipede-user-input name="input.selection">Please select a target </centipede-user-input>

    <antcall target="call-cent">
      <param name="cent-name"   value="centipede"/>
      <param name="cent-target" value="splash"/>
    </antcall>

    <antcall target="${input.selection}"/>

  </target>


  <!-- ================================== -->
  <!--              Compile               -->
  <!-- ================================== -->
  <target  name="compile"   depends="-init"
           description="Compile java source code">

    <antcall target="call-cent">
      <param name="cent-name"   value="centipede"/>
      <param name="cent-target" value="compile"/>
    </antcall>

  </target>


  <!-- ================================== -->
  <!--              jar                   -->
  <!-- ================================== -->
  <target  name="jar"   depends="-init"
           description="Make jars">
    <antcall target="call-cent">
      <param name="cent-name"   value="centipede"/>
      <param name="cent-target" value="package"/>
    </antcall>

  </target>


  <!-- ================================== -->
  <!--           Scratchpad               -->
  <!-- ================================== -->
  <target  name="scratchpad"   depends="-init"
           description="Execute scratchpad targets">
    <ant antfile="${xlayout.source.scratchpad.targets.dir}/scratchpad.xml"/>
  </target>


  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs"
      description="* Generates the API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} ${fullname} project. All Rights Reserved."
             stylesheetfile="${resource.dir}/javadoc.css">
      <classpath refid="classpath"/>
    </javadoc>
  </target>


  <!-- =================================================================== -->
  <!-- Make all known distributions                                        -->
  <!-- =================================================================== -->
	<target name="dist" 
	        description="Makes all the known incarnations of forrest"
					depends="dist-shbat" />

	
  <!-- =================================================================== -->
  <!-- Make the zip that holds what a fresh site should look like          -->
  <!-- =================================================================== -->
	<target name="fresh-site-zip" depends="init">
	  <property name="fresh-site.zip" value="./build/fresh-site.zip" />
		<echo>
			TODO... COMPLETE THIS
			... I need to build a zip that holds the typical content of a basic (empty forrest project)
			    (including the siteplan.xml, a hint fot build.xml, status.xml,...)
					(see what acorn provides, I really think this should just be managed in some 
					  ./src/resources/fresh-site directory if you ask me )
		</echo>
	</target>

	
  <!-- =================================================================== -->
  <!-- Make the WEB-INF directory like cocoon (CLI or webapp) needs it     -->
  <!-- =================================================================== -->
	<target name="webapp-webinf" depends="init, compile" >
	  <property name="webapp.webinf.dir" value="./build/webapp/WEB-INF" />
		<echo>
			TODO... COMPLETE THIS
			... I need to build the WEB-INF directory for inclusion in the webapp and 
			    in the many distributions that will use me.
					Those distributions need me to extend their classpath when calling the 
					cocoon CLI.
		</echo>
	</target>


  <!-- =================================================================== -->
  <!-- Make the shell-bat distribution                                     -->
  <!-- =================================================================== -->
	<target name="dist-shbat" depends="compile, fresh-site-zip, webapp-webinf" >
		<!-- TODO: decide on a better place to read/set this prop from/to -->
		<property name="dist-shbat.dir" value="./build/dist/shbat" />

		<!-- fresh drop-off location for the distribution -->
		<delete dir="${dist-shbat.dir}" />
		<mkdir dir="${dist-shbat.dir}" />

		<!-- copy the ant script at the heart of the distribution -->
		<copy todir="${dist-shbat.dir}" file="forrest.build.xml" />

		<!-- copy the fresh-site.zip to clone from -->
		<copy todir="${dist-shbat.dir}" file="${fresh-site.zip}" />
		
		<!-- copy the prepared and wrapper stuff for the distribution -->
		<copy todir="${dist-shbat.dir}">
			<fileset dir="./src/resources/forrest-shbat" />
		</copy>

		<!-- copy the web-inf as needed by the cocoon CLI -->
		<mkdir dir="${dist-shbat.dir}/WEB-INF">
		<copy todir="${dist-shbat.dir}/WEB-INF">
			<fileset dir="${webapp.webinf.dir}" />
		</copy>

		<echo>
  *-----------------------------------------------------------------
	| installation notice 
	*-----------------------------------------------------------------
	| You have succesfully build the shell-bat version of forrest.
	| Please find it at: ${dist-shbat.dir}
	| Please copy the contents to the install directory of your choice
	| Please have the environment variable FORREST_HOME point to it.
	| It is recommended to add
	|    unix: $FORREST_HOME/bin: to your $PATH
	|    win: %FORREST_HOME%\bin; to your %PATH%
	| Calling
	|    unix: $FORREST_HOME/bin/forrest.sh usage 
	|    win: %FORREST_HOME%\bin\forrest.bat usage
	| will explain how to use this distribution.
	| More help at http://xml.apache.org/forrest and forrest-dev@xml.apache.org
	*-----------------------------------------------------------------
		</echo>
	</target>


  <!-- =================================================================== -->
  <!-- Validate xml                                                        -->
  <!-- =================================================================== -->
  <target name="validate-docs" description="Checks that the xml files are valid and conform to the DTD.">
    <xmlvalidate failonerror="yes" lenient="yes" warn="yes"
       className="org.apache.xerces.parsers.SAXParser">
       <classpath>
         <fileset dir="./lib/endorsed">
           <include name="*.jar"/>
         </fileset>
       </classpath>
       <fileset dir="."
                includes="*.x*" excludes="build.xml"/>
     </xmlvalidate>
  </target>


  <!-- =================================================================== -->
  <!-- Generate project-site                                               -->
  <!-- =================================================================== -->
  <target name="site" >
			<echo>
			NOT DONE YET - probably depends on some compilation stuff (rather then on our distributions?) 
			... this should set forrest.home and project.home and get the docs out.
			via the forrest.build.xml instead.
			should have some comment inside explaining THIS IS NOT the way to do it 
			for your own projects.
			</echo>
  </target>


  <!-- =================================================================== -->
  <!-- Generate cocoon-webapp for project-site                             -->
  <!-- =================================================================== -->
  <target name="webapp" >
			<echo>
			NOT DONE YET - probably depends on some compilation stuff 
			... this should set forrest.home and project.home and get the docs out.
			via the forrest.build.xml instead.
			</echo>
  </target>


  <!-- =================================================================== -->
  <!-- ForrestBar for Mozilla                                              -->
  <!-- =================================================================== -->
  <target name="forrestbar" depends="init">
      <mkdir dir="${build.dir}" />
      <mkdir dir="${build.dir}/work/forrestbar" />
      <jar jarfile="${build.dir}/work/forrestbar/forrestbar.jar">
         <fileset dir="src/resources/forrestbar" includes="content/**/*" />
      </jar>
      <copy file="src/resources/forrestbar/install.js" 
			      todir="${build.dir}/work/forrestbar" overwrite="true" />
      <zip zipfile="${build.dir}/forrestbar.xpi" 
			     basedir="${build.dir}/work/forrestbar" />
  </target>


  <!-- ================================== -->
  <!--        Target used by Gump         -->
  <!-- ================================== -->
  <target  name="gump" description="Target used by Gump">
      <antcall target="docs"/>
      <antcall target="webapp"/>
  </target>


  <!-- =================================================================== -->
  <!-- Import Ant-Centipede init targets - sets up basic build stuff       -->
  <!-- =================================================================== -->
  <!--
        This is the target that initializes tasks and properties used
        commonly in every other target.

        Remember to add depends="init" to every target, so that this
        target is called before any other.

        This target is internal; to make it unusable from the commandline,
        its name starts with a hyphen.
        To make it invisible when using -projecthelp, it lacks a description.
  -->

    &import-antipede;

</project>
