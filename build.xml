<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="./tools/antipede/resources/stylesheets/build.xsl"?>

<!--<!DOCTYPE project SYSTEM "./tools/antipede/build.dtd" >-->
<!DOCTYPE project [
  <!-- antipede -->
  <!ENTITY import-antipede  SYSTEM "./tools/antipede/build.xtarget">

]>
<project default="interactive" basedir="." name="project build file">

<description>
                   * ===================================== *
                   |   Krysalis Centipede Build System     |
                   * ===================================== *
                                     by

                   Nicola Ken Barozzi (nicolaken@apache.org)
                   Marc Johnson (mjohnson@apache.org)


                   For a simple interactive build, simply
                   run the build script (build.bat or build.sh)
</description>


  <path id="classpath">
    <fileset dir="./lib/endorsed">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="./lib/core">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="./lib/optional">
      <include name="*.jar"/>
    </fileset>
  </path>


  <!-- =================================================================== -->
  <!-- Targets for this project                                            -->
  <!-- =================================================================== -->
  <target name="init" depends="-init">
    <property name="name"                  value="${xgump.module.project.name}"/>
    <property name="packages"              value="${xgump.module.project.packages}"/>

    <property name="build.root"            value="${xlayout.build.dir}"/>
    <property name="build.dir"             value="${xlayout.build.dir}"/>
    <property name="resource.dir"          value="${xlayout.source.resources.dir}"/>
    <property name="context.dir"           value="${xlayout.source.documentation.dir}"/>
    <property name="build.docs"            value="${xlayout.build.documentation.dir}"/>
    <property name="build.javadocs"        value="${xlayout.build.documentation.javadocs.dir}"/>
    <property name="build.context"         value="${xlayout.build.work.dir}"/>
    <property name="build.dest"            value="${xlayout.build.classes.dir}"/>
    <property name="build.scratchpad.dest" value="${xlayout.build.scratchpad.classes.dir}"/>

    <property name="tools.dir"             value="./tools"/>
    <property name="tools.jar"             value="${java.home}/../lib/tools.jar"/>
    <available file="${tools.jar}"         property="tools.jar.present"/>

  </target>


  <!-- =================================================================== -->
  <!-- Interactive build                                                   -->
  <!-- =================================================================== -->
  <target name="interactive" description="Interactive Build" depends="-init">
    <echo>
    --------------------------------------------------------------

     ${xgump.module.project.name} ${xgump.module.project.version.major}.${xgump.module.project.version.minor}   [${YEAR}]

    --------------------------------------------------------------
     Using ${ant.version}
     Build file ${ant.file}
    --------------------------------------------------------------
     These are the most common build targets.
     You can also invoke them directly; see build.xml for more info.
     Builds will be in /build directory, distributions in /build/dist.

     forrest-typical targets:

     dist ------------- build all incarnation distributions:
     dist-shbat ------- build the forrest shell/bat incarnation (requires ant to *run*)

     future targets:

     dist-cent      ??? ??? future target making centipede-cent
     dist-maven     ??? ??? future target making maven plugin
     dist-jar       ??? ??? future target making jar that has both main as ant-task wrapper classes


     forrest-test targets:

     docs ------------- generates static Forrest website for itself as the project to run on.
     webapp ----------- builds unpacked webapp version of Forrest website
     war -------------- builds webapp .war file of Forrest website
     bot.run ---------- runs the forrestbot using the configuration specified in
                        forrestbot.conf.xml

     
     default centipede targets:

     compile ---------- compiles the source code
     test ------------- performs the jUnit tests
     jar -------------- create the jar files
     docs ------------- generates the html docs - clean not needed
     javadocs --------- generates the API documentation
     site ------------- generates the html site (docs+reports)
     clean ------------ cleans the build directory
     dist ------------- creates src and bin distributions
     scratchpad ------- build-run scratchpad code
     contrib ---------- build-run contributed code


    </echo>
    <property name="input.selection" value="docs"/>
    <centipede-user-input name="input.selection">Please select a target </centipede-user-input>

    <antcall target="call-cent">
      <param name="cent-name"   value="centipede"/>
      <param name="cent-target" value="splash"/>
    </antcall>

    <antcall target="${input.selection}"/>

  </target>


  <!-- ================================== -->
  <!--              Compile               -->
  <!-- ================================== -->
  <target  name="compile"   depends="-init"
           description="Compile java source code">

    <antcall target="call-cent">
      <param name="cent-name"   value="centipede"/>
      <param name="cent-target" value="compile"/>
    </antcall>

  </target>


  <!-- ================================== -->
  <!--              jar                   -->
  <!-- ================================== -->
  <target  name="jar"   depends="-init"
           description="Make jars">
    <antcall target="call-cent">
      <param name="cent-name"   value="centipede"/>
      <param name="cent-target" value="package"/>
    </antcall>

  </target>


  <!-- ================================== -->
  <!--           Scratchpad               -->
  <!-- ================================== -->
  <target  name="scratchpad"   depends="-init"
           description="Execute scratchpad targets">
    <ant antfile="${xlayout.source.scratchpad.targets.dir}/scratchpad.xml"/>
  </target>


  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs"
      description="* Generates the API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} ${fullname} project. All Rights Reserved."
             stylesheetfile="${resource.dir}/javadoc.css">
      <classpath refid="classpath"/>
    </javadoc>
  </target>


  <!-- =================================================================== -->
  <!-- Make all known distributions                                        -->
  <!-- =================================================================== -->
  <target name="dist" 
          description="Makes all the known incarnations of forrest"
          depends="dist-shbat" />

  
  <!-- =================================================================== -->
  <!-- Make the zip that holds what a fresh site should look like          -->
  <!-- =================================================================== -->
  <target name="fresh-site-zip" depends="init">
    <!-- TODO: decide on a better place to read/set this prop from/to -->
    <property name="fresh-site.zip" value="./build/fresh-site.zip" />
    <zip destfile="${fresh-site.zip}" basedir="${resource.dir}/fresh-site" />
  </target>

  
  <!-- =================================================================== -->
  <!-- Make the WEB-INF directory like cocoon (CLI or webapp) needs it     -->
  <!-- =================================================================== -->
  <target name="webapp-webinf" depends="init, compile" >
    <!-- TODO: decide on a better place to read/set this prop from/to -->
    <property name="webapp.webinf.dir" value="./build/webapp/WEB-INF" />

    <mkdir dir="${webapp.webinf.dir}" />
    <copy todir="${webapp.webinf.dir}" >
      <fileset dir="${resource.dir}/conf" >
        <exclude name="sitemap.xmap" />
        <exclude name="skinconf.xml" />
      </fileset>
    </copy>

    <mkdir dir="${webapp.webinf.dir}/classes" />
    <copy todir="${webapp.webinf.dir}/classes" >
      <fileset dir="${resource.dir}/schema">
        <include name="CatalogManager.properties"/>
      </fileset>
      <fileset dir="${build.dest}">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${build.scratchpad.dest}">
        <include name="**/*.class"/>
      </fileset>
    </copy>

    <mkdir dir="${webapp.webinf.dir}/lib"/>
	<copy todir="${webapp.webinf.dir}/lib">
		<!--
		<fileset dir="./lib/endorsed"    />
		-->
      <fileset dir="./lib/core"/>
      <fileset dir="./lib/optional"/>
      <fileset dir="./src/scratchpad/lib"/>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!-- Make the bare context directory like cocoon (CLI or webapp) needs it-->
  <!-- =================================================================== -->
  <target name="bare-context-dir" depends="init, compile" >
    <!-- TODO: decide on a better place to read/set this prop from/to -->
    <property name="bare-context.dir" value="./build/bare-context" />

    <!-- Copy entity catalog, entities and class files -->
    <copy todir="${bare-context.dir}/resources/schema" >
      <fileset dir="${resource.dir}/schema"/>
    </copy>

    <!-- Copy default image files. These may be overridden by identically named
    files in ${project.home}/src/documentation/resources/images. -->
    <copy todir="${bare-context.dir}/resources/images" >
      <fileset dir="${resource.dir}/images"/>
    </copy>

    <!-- Copy Cocoon configuration and sitemap -->
    <copy todir="${bare-context.dir}">
      <fileset dir="${resource.dir}/conf">
        <include name="sitemap.xmap"/>
        <include name="skinconf.xml"/>
      </fileset>
    </copy>

    <!-- Copy libraries -->
    <copy todir="${bare-context.dir}/library/" >
      <fileset dir="${resource.dir}/library" />
    </copy>

    <!-- Copy skins -->
    <copy todir="${bare-context.dir}/skins/" >
      <fileset dir="${resource.dir}/skins" />
    </copy>

  </target>



  <!-- =================================================================== -->
  <!-- Make the shell-bat distribution                                     -->
  <!-- =================================================================== -->
  <target name="dist-shbat" 
          depends="fresh-site-zip, webapp-webinf, bare-context-dir" >
    <!-- TODO: decide on a better place to read/set this prop from/to -->
    <property name="dist-shbat.dir" value="./build/dist/shbat" />

    <!-- fresh drop-off location for the distribution -->
    <delete dir="${dist-shbat.dir}" />
    <mkdir dir="${dist-shbat.dir}" />

    <!-- copy the ant script at the heart of the distribution -->
    <copy todir="${dist-shbat.dir}" file="forrest.build.xml" />

    <!-- copy the prepared and wrapper stuff for the distribution -->
    <copy todir="${dist-shbat.dir}">
      <fileset dir="./src/resources/forrest-shbat" />
    </copy>
    <fixcrlf eol="crlf" srcdir="${dist-shbat.dir}/bin" includes="*.bat"/>
    <fixcrlf eol="lf" srcdir="${dist-shbat.dir}/bin" excludes="*.bat"/>
    <chmod dir="${dist-shbat.dir}/bin" perm="ugo+rx" excludes="*.bat"/> 

    <!-- copy the fresh-site.zip to clone from -->
    <copy todir="${dist-shbat.dir}" file="${fresh-site.zip}" />
    
    <!-- copy the web-inf as needed by the cocoon CLI -->
    <mkdir dir="${dist-shbat.dir}/WEB-INF" />
    <copy todir="${dist-shbat.dir}/WEB-INF">
      <fileset dir="${webapp.webinf.dir}" />
    </copy>

	<mkdir dir="${dist-shbat.dir}/lib/endorsed" />
	<copy todir="${dist-shbat.dir}/lib/endorsed">
		<fileset dir="lib/endorsed" />
    </copy>

    <!-- copy the bare-context dir as needed by the cocoon CLI -->
    <mkdir dir="${dist-shbat.dir}/context" />
    <copy todir="${dist-shbat.dir}/context">
      <fileset dir="${bare-context.dir}" />
    </copy>

    <echo>
  *-----------------------------------------------------------------
  | installation notice 
  *-----------------------------------------------------------------
  | You have succesfully built the shell-bat distribution of forrest.
  | Please find it at: ${dist-shbat.dir}
  | Please copy the contents to the install directory of your choice
  | Please have the environment variable FORREST_HOME point to it.
  | It is recommended to add
  |    unix: $FORREST_HOME/bin: to your $PATH
  |    win: %FORREST_HOME%\bin; to your %PATH%
  | Calling
  |    unix: $FORREST_HOME/bin/forrest -projecthelp
  |    win: %FORREST_HOME%\bin\forrest -projecthelp
  | Will list options for the forrest command
  | More help at http://xml.apache.org/forrest and forrest-dev@xml.apache.org
  *-----------------------------------------------------------------
    </echo>
  </target>


  <!-- =================================================================== -->
  <!-- Validate xml                                                        -->
  <!-- =================================================================== -->
  <target name="validate-docs" depends="dist-shbat" 
        description="Checks that the xml files are valid and conform to the DTD.">
    <!-- warning to other projects:
       This target is using internally build productions for test.
       This is by no means an example of how you can use it inside your project 
      (although it will resemble it in many ways, to make the test meaningfull)

       The correct way of using forrest for your project is to build one of the
       forrest distribution-flavours and readup on how you should do that in the 
       appropriate documentation. -->
    <property name="forrest.home" value="${dist-shbat.dir}" />
    <ant antfile="${forrest.home}/forrest.build.xml" target="validate">
      <property name="project.home"     value="."            />
    </ant>
  </target>


  <!-- =================================================================== -->
  <!-- Generate project-site                                               -->
  <!-- =================================================================== -->
  <target name="docs" depends="dist-shbat" description="Generates the documentation">
    <!-- warning to other projects:
       This target is using internally build productions for test.
       This is by no means an example of how you can use it inside your project 
      (although it will resemble it in many ways, to make the test meaningfull)

       The correct way of using forrest for your project is to build one of the
       forrest distribution-flavours and readup on how you should do that in the 
       appropriate documentation. 
      (which is by the way generated by calling this very target) -->
    <property name="forrest.home" value="${dist-shbat.dir}" />
    <ant antfile="${forrest.home}/forrest.build.xml" target="site">
      <property name="project.home"     value="."            />
      <property name="project.site-dir" value="./build/docs" />
    </ant>
  </target>


  <!-- =================================================================== -->
  <!-- Generate cocoon-webapp for project-site                             -->
  <!-- =================================================================== -->
  <target name="webapp" depends="dist-shbat">
    <!-- warning to other projects:
       This target is using internally build productions for test.
       This is by no means an example of how you can use it inside your project 
      (although it will resemble it in many ways, to make the test meaningfull)

       The correct way of using forrest for your project is to build one of the
       forrest distribution-flavours and readup on how you should do that in the 
       appropriate documentation. -->
    <property name="forrest.home" value="${dist-shbat.dir}" />
    <ant antfile="${forrest.home}/forrest.build.xml" target="webapp">
      <property name="project.home"     value="."            />
      <property name="project.webapp" value="./build/webapp" />
    </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Generate a .war files of the project-site                           -->
  <!-- =================================================================== -->
  <target name="war" depends="dist-shbat">
    <property name="forrest.home" value="${dist-shbat.dir}" />
    <ant antfile="${forrest.home}/forrest.build.xml" target="war">
      <property name="project.home"     value="."            />
      <property name="project.war" value="./build/${name}.war" />
    </ant>
  </target>


  <!-- =================================================================== -->
  <!-- ForrestBar for Mozilla                                              -->
  <!-- =================================================================== -->
  <target name="forrestbar" depends="init">
      <mkdir dir="${build.dir}" />
      <mkdir dir="${build.dir}/work/forrestbar" />
      <jar jarfile="${build.dir}/work/forrestbar/forrestbar.jar">
         <fileset dir="src/resources/forrestbar" includes="content/**/*" />
      </jar>
      <copy file="src/resources/forrestbar/install.js" 
            todir="${build.dir}/work/forrestbar" overwrite="true" />
      <zip zipfile="${build.dir}/forrestbar.xpi" 
           basedir="${build.dir}/work/forrestbar" />
  </target>


  <!-- ================================== -->
  <!--        Target used by Gump         -->
  <!-- ================================== -->
  <target  name="gump" description="Target used by Gump">
      <antcall target="docs"/>
      <antcall target="webapp"/>
  </target>


  <!-- =================================================================== -->
  <!-- Import Ant-Centipede init targets - sets up basic build stuff       -->
  <!-- =================================================================== -->
  <!--
        This is the target that initializes tasks and properties used
        commonly in every other target.

        Remember to add depends="init" to every target, so that this
        target is called before any other.

        This target is internal; to make it unusable from the commandline,
        its name starts with a hyphen.
        To make it invisible when using -projecthelp, it lacks a description.
  -->

    &import-antipede;

</project>
