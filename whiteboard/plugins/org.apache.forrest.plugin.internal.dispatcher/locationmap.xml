<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2005 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- Default Forrest locationmap for the structurer/themer -->

<locationmap xmlns="http://apache.org/forrest/locationmap/1.0">

  <components>
    <matchers default="lm">
      <matcher 
        name="lm" 
        src="org.apache.forrest.locationmap.WildcardLocationMapHintMatcher"/>
    </matchers>
    <actions default="RecursiveDirectoryTraversalAction">
      <action name="RecursiveDirectoryTraversalAction" 
        src="org.apache.forrest.structurer.acting.RecursiveDirectoryTraversalAction"/>
    </actions>
    <selectors default="exists">
          <selector name="exists" logger="sitemap.selector.exists"  
                    src="org.apache.forrest.sourceexists.SourceExistsSelector" />
    </selectors>
  </components>
  
  <locator>
    <!-- xhtml2 to html core transformation -->
    <match pattern="transform.xhtml2.html.structurer">
      <select>
        <location src="{project:structurer}/resources/stylesheets/html/xhtml2_to_html.xsl" />
        <location src="{defaults:structurer}/resources/stylesheets/html/xhtml2_to_html.xsl" />
      </select>
    </match>
    <!-- File specific strucuturer templates have priority before default ones. If no strucuturer template 
      can be found in the project, we use either the theme or the default one of the themes plugin. -->
    <match pattern="resolve.structurer.**">
      <select type="exists">
        <!-- project-based file-based -->
        <location src="{project:content.xdocs}{1}{project:theme-ext}" />
        <!-- @src="" workaround for action bug in the locationmap! -->
        <act type="RecursiveDirectoryTraversalAction" src="">
          <parameter value="{1}" name="request"/>
          <parameter value="{project:theme}" name="projectFallback"/>
          <parameter value="{project:theme-ext}" name="projectExtension"/>
          <parameter value="{project:content.xdocs}" name="projectDir"/>
          <!--  project-based theme-based = directory-based / parent-directory based (recursively) -->
          <location src="{uri}" />
        </act>
        <!-- themes-dir: project-application-based theme-dir-based -->
        <location 
          src="{lm:themer.project.dir}/{project:theme}{project:theme-ext}" 
          />
        <!-- themer: project-application-based theme-based -->
        <location 
          src="{project:themer}/resources/themes/{project:theme}{project:theme-ext}" 
          />
        <!-- themes-dir: project-application-based default -->
        <location 
          src="{lm:themer.project.dir}/{defaults:theme}{defaults:theme-ext}" 
          />
        <!-- themer: project-application-based default -->
        <location 
          src="{project:themer}/resources/themes/{defaults:theme}{defaults:theme-ext}" 
          />
        <!-- themer: forrest-application-based theme-based -->
        <location 
          src="{defaults:themer}/resources/themes/{project:theme}{project:theme-ext}" 
          />
        <!-- themer: forrest-application-based default -->
        <location 
          src="{defaults:themer}/resources/themes/{defaults:theme}{defaults:theme-ext}" 
          />
      </select>
    </match>
    <!-- Structurer tiles - You can group elements to a template and call it from any view. -->
    <match pattern="resolve.tiles.**">
      <select type="exists">
        <location 
          src="{project:resources}/themes/{project:theme}/html/{1}.vt.xml" />
        <location 
          src="{project:resources}/themes/{defaults:theme}/html/{1}.vt.xml" />
        <location 
          src="{project:themer}/resources/themes/{project:theme}/html/{1}.vt.xml" 
          />
        <location 
          src="{project:themer}/resources/themes/{defaults:theme}/html/{1}.vt.xml" 
          />
        <location 
          src="{defaults:themer}/resources/themes/{project:theme}/html/{1}.vt.xml" 
          />
        <location 
          src="{defaults:themer}/resources/themes/{defaults:theme}/html/{1}.vt.xml" 
          />
      </select>
    </match>
    <!-- Some input need to be striped by their root element. -->
    <match pattern="root-strip.xsl">
      <select type="exists">
        <location src="{project:structurer}/resources/stylesheets/root-strip.xsl" />
        <location src="{defaults:structurer}/resources/stylesheets/root-strip.xsl" />
      </select>
    </match>
    
    <!-- Next coming from themer -->
    <!-- Project implementation of templates have priority before default ones.
        If no implementation can be found we use the noFt (~ - no forrest:template) implementation.  
       {1} name of the contract -->
    <match pattern="resolve.contract.*.**">
      <select type="exists">
        <!-- project-based theme -->
        <location src="{lm:themer.project.dir}/{project:theme}/{1}/{2}.ft" />
        <!-- project-based default fallback -->
        <location src="{lm:themer.project.dir}/{defaults:theme}/{1}/{2}.ft" />
        <!-- project-application-based theme -->
        <location src="{project:themer}/resources/themes/{project:theme}/{1}/{2}.ft" />
        <!--  project-application-based default fallback -->
        <location src="{project:themer}/resources/themes/{defaults:theme}/{1}/{2}.ft" />
        <!--  plugin provided contracts -->
        <location src="{lm:resolvePluginContract.{1}.{2}}" />
        <!-- forrest-application-based theme -->
        <location src="{defaults:themer}/resources/themes/{project:theme}/{1}/{2}.ft" />
        <!--  forrest-application-based default fallback -->
        <location src="{defaults:themer}/resources/themes/{defaults:theme}/{1}/{2}.ft" />
        <!--  forrest-application-based no found -->
        <location src="{defaults:themer}/resources/themes/{defaults:theme}/{1}/noFt.ft" />
      </select>
    </match>
    <match pattern="contract.html.**">
      <select type="exists">
        <location src="cocoon://prepare.contract.html.{1}" />
      </select>
    </match>
    <match pattern="dataModel-xml-document-to-**.xsl">
      <select type="exists">
        <!-- FIXME 
          to-xml should become xml 
          document2 should become document-to-
          after commiting -->
        <!--<location src="{project:skins-dir}{project:theme}/xslt/to-xml/document2{1}.xsl" />-->
        <!--<location src="{project:structurer}/resources/stylesheets/to-xml/document2{1}.xsl" />-->
        <!--<location src="{defaults:structurer}/resources/stylesheets/to-xml/document2{1}.xsl" />-->
        <location
          src="{project:skins-dir}{project:theme}/xslt/xml/document-to-{1}.xsl" />
        <location
          src="{project:structurer}/resources/stylesheets/xml/document-to-{1}.xsl" />
        <location
          src="{defaults:structurer}/resources/stylesheets/xml/document-to-{1}.xsl" />
      </select>
    </match>
    <match pattern="dataModel-html-**.xsl">
      <select type="exists">
        <location src="{project:skins-dir}{project:theme}/xslt/html/{1}.xsl" />
        <location src="{project:structurer}/resources/stylesheets/html/{1}.xsl" />
        <location src="{defaults:structurer}/resources/stylesheets/html/{1}.xsl" />
      </select>
    </match>
        <!-- contracts have to be striped to their stylesheet for aggregation. -->
    <match pattern="contract-strip-xsl.xsl">
      <select type="exists">
        <location src="{project:structurer}/resources/stylesheets/contract-strip-xsl.xsl" />
        <location src="{defaults:structurer}/resources/stylesheets/contract-strip-xsl.xsl" />
      </select>
    </match>
    <match pattern="hooks-to-html.xsl">
      <select type="exists">
        <location src="{project:themer}/resources/stylesheets/hooksMatcher-html.xsl" />
        <location src="{defaults:themer}/resources/stylesheets/hooksMatcher-html.xsl" />
      </select>
    </match>
        <!-- contracts (e.g. html) need  to be prepared for their stylesheet-aggregation. -->
    <match pattern="contract-property.xsl">
      <select type="exists">
        <location src="{project:structurer}/resources/stylesheets/contract.property.xsl" />
        <location src="{defaults:structurer}/resources/stylesheets/contract.property.xsl" />
      </select>
    </match>
        <!-- contracts (e.g. html) that can be used in the project. -->
    <match pattern="ls.contracts.xsl">
      <select type="exists">
        <location src="{project:structurer}/resources/stylesheets/ls.contracts.xsl" />
        <location src="{defaults:structurer}/resources/stylesheets/ls.contracts.xsl" />
      </select>
    </match>
    <match pattern="ls.contracts">
      <select type="exists">
        <location src="cocoon://ls.contracts.source.xml" />
      </select>
    </match>
    <match pattern="ls.contracts.project">
      <select type="exists">
        <location src="cocoon://ls.contracts.project.source.xml" />
      </select>
    </match>
    <match pattern="ls.contracts-to-document.xsl">
      <select type="exists">
        <location src="{project:structurer}/resources/stylesheets/ls.contracts-to-document.xsl" />
        <location src="{defaults:structurer}/resources/stylesheets/ls.contracts-to-document.xsl" />
      </select>
    </match>
    <!--Theme dir-->
    <match pattern="themer.project.dir">
      <select type="exists">
        <location src="{project:resources}themes"/>
        <!-- v1 location -->
        <location src="{project:resources}templates" />
      </select>
    </match>
        <!-- contracts (e.g. html) that can be used in the project. -->
    <match pattern="themer.contracts.dir">
      <select type="exists">
        <location src="{project:themer}/resources/themes" />
        <location src="{defaults:themer}/resources/themes" />
      </select>
    </match>
    <!-- generic match for theme image resources -->
    <!-- 
      {1} name
      {2} extension (note we assume e.g. {1}.gif)
      -->
    <match pattern="themes/images/**.*">
      <select type="exists">
        <location src="{lm:themer.project.dir}/{project:theme}/images/{1}.{2}" />
        <location src="{lm:themer.project.dir}/{defaults:theme}/images/{1}.{2}" />
        <location src="{project:themer}/resources/themes/{project:theme}/images/{1}.{2}" />
        <location src="{project:themer}/resources/themes/{defaults:theme}/images/{1}.{2}" />
        <location src="{defaults:themer}/resources/themes/{project:theme}/images/{1}.{2}" />
        <location src="{defaults:themer}/resources/themes/{defaults:theme}/images/{1}.{2}" />
      </select>
    </match>
    <!-- generic match for theme resources like css and js. -->
    <!-- 
      {1} name
      {2} extension (note we assume e.g. PATH/css/{1}.css)
      -->
    <match pattern="themes/**.*">
      <select type="exists">
        <location src="{lm:themer.project.dir}/{project:theme}/{2}/{1}.{2}" />
        <location src="{lm:themer.project.dir}/{defaults:theme}/{2}/{1}.{2}" />
        <location src="{project:themer}/resources/themes/{project:theme}/{2}/{1}.{2}" />
        <location src="{project:themer}/resources/themes/{defaults:theme}/{2}/{1}.{2}" />
        <location src="{defaults:themer}/resources/themes/{project:theme}/{2}/{1}.{2}" />
        <location src="{defaults:themer}/resources/themes/{defaults:theme}/{2}/{1}.{2}" />
      </select>
    </match>
  </locator>
</locationmap>
