<?xml version="1.0"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation or its licensors,
  as applicable.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- forrest:structurer
  ***********************
  The structuring of the assembled page where all content is in place
  and structured with forrest:hooks to provide hooks for theming.
  
  It is the job of a forrest:structurer to define this structure. The
  structurer uses for this a couple of helper classes forrest:contracts,
  forrest:hooks and forrest:properties. But there is more to a
  forrest:structurer than just structure. 
  
  The structurer is not limited to a document but can request and
  structure the content from multiple input sources. Far more actually
  because it provides as well logical conditions for presentation formatting logic
-->

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:pipes default="caching">
      <map:pipe name="caching"
        src="org.apache.cocoon.components.pipeline.impl.CachingProcessingPipeline" />
      <map:pipe name="noncaching"
        src="org.apache.cocoon.components.pipeline.impl.NonCachingProcessingPipeline" />
    </map:pipes>
    <map:selectors>
      <map:selector logger="sitemap.selector.exists" name="exists"
        src="org.apache.forrest.sourceexists.SourceExistsSelector" />
      <map:selector logger="sitemap.selector.config" name="config" 
        src="org.apache.cocoon.selection.SimpleSelector" />
    </map:selectors>
    <map:generators default="file">
      <map:generator name="traverse"
        src="org.apache.cocoon.generation.TraversableGenerator"
        logger="sitemap.generator.traverse" label="content"
        pool-max="16" />
<map:generator label="content" logger="sitemap.generator.xpathdirectory" name="xpathdirectory" src="org.apache.cocoon.generation.XPathDirectoryGenerator"/>
      <map:generator name="directory"
        src="org.apache.cocoon.generation.DirectoryGenerator" />
      <map:generator name="jx" logger="sitemap.generator.jx"
        src="org.apache.cocoon.generation.JXTemplateGenerator"
        label="content,data" pool-max="16" />
    </map:generators>
    <map:transformers default="xslt">
      <map:transformer logger="sitemap.transformer.jx" name="jx"
        pool-max="16"
        src="org.apache.cocoon.transformation.JXTemplateTransformer" />
      <map:transformer logger="sitemap.transformer.jpath" name="jpath"
        src="org.apache.cocoon.transformation.JPathTransformer" />
      <map:transformer name="cinclude"
        src="org.apache.cocoon.transformation.CIncludeTransformer" />
      <map:transformer name="xinclude"
        src="org.apache.cocoon.transformation.XIncludeTransformer" />
      <map:transformer name="dispatcher"
        src="org.apache.forrest.dispatcher.transformation.DispatcherTransformer" />
    </map:transformers>
    <map:serializers default="xml">
      <map:serializer logger="sitemap.serializer.xhtml"
        mime-type="text/html" name="xhtml" pool-grow="2" pool-max="64"
        pool-min="2"
        src="org.apache.cocoon.serialization.XMLSerializer">
        <doctype-public>
          -//W3C//DTD XHTML 1.0 Strict//EN
        </doctype-public>
        <doctype-system>
          http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd
        </doctype-system>
        <encoding>UTF-8</encoding>
      </map:serializer>
      <map:serializer name="text"
        src="org.apache.cocoon.serialization.TextSerializer"
        mime-type="text/plain" logger="sitemap.serializer.text" />
    </map:serializers>
      <map:actions>
      <map:action name="locale" src="org.apache.cocoon.acting.LocaleAction" />
    </map:actions>
  </map:components>
  <map:resources>
    <map:resource name="jx-transformer">
      <map:transform type="jx">
        <map:parameter name="lenient-xpath" value="true" />
        <map:parameter name="getRequest" value="{request}" />
        <map:parameter name="getRequestExstension" value="{exstension}" />
      </map:transform>
    </map:resource>
  </map:resources>
  <map:pipelines>
    <!--
      structurer
      prepares and transforms the requested contracts (themes) and populate them with the content (businessHelper).
    -->
    <!-- Structurer population
      a. Resolve request specific strucuturer template.
      b. Add businessHelper and tiles to the presentation model 
      that the content can be used later on.
      {1} - requested url (striped from extension) -->
    <map:pipeline>
      <map:match pattern="prepare.structurer.*.**"> 
        <map:generate src="{lm:resolve.structurer.{2}}" />
        <map:transform src="{lm:get.structurer.by.requested.format.xsl}">
          <map:parameter name="format" value="{1}" />
        </map:transform>
        <!-- FIXME: jxpath -->
        <!-- When jxpath problem is solved rewrite tiles and uncomment -->
        <map:transform type="linkrewriter" />
        <map:transform type="jx">
          <map:parameter name="lenient-xpath" value="true" />
          <map:parameter name="getRequest" value="{2}" />
          <map:parameter name="getRequestExstension" value="{1}" />
        </map:transform>
        <map:serialize />
      </map:match>
    </map:pipeline>
    <!-- You can group elements to a template and call it from any view. 
      <jx:import uri="cocoon://prepare.tiles.export-link"/>
    -->
    <map:pipeline>
      <map:match pattern="prepare.tiles.**">
        <map:generate src="{lm:resolve.tiles.{1}}" />
        <!-- FIXME: jxpath -->
        <!-- When jxpath problem is solved rewrite tiles and uncomment -->
        <!-- <map:transform type="linkrewriter" /> -->
        <map:transform type="jx">
          <map:parameter name="lenient-xpath" value="true" />
          <map:parameter name="getRequest" value="{1}" />
        </map:transform>
        <map:transform src="{lm:root-strip.xsl}" />
        <map:serialize />
      </map:match>
    </map:pipeline>
   <map:pipeline>
      <!--
        Last processing step. 
        Here we are overriding the default skin generation.
      -->
      <map:match pattern="**.html">
        <map:generate src="lm://resolve.structurer.{1}" />
        <map:call resource="jx-transformer">
          <map:parameter name="exstension" value="html" />
          <map:parameter name="request" value="{1}" />
        </map:call>
        <map:transform type="dispatcher">
          <map:parameter name="type" value="html" />
          <map:parameter name="hooksTransformer"
            value="lm://hooks-to-html.xsl" />
        </map:transform>
        <map:serialize type="xhtml" />
      </map:match>
      <map:match pattern="**.dispatcher.css"> 	 
         <map:generate src="lm://resolve.structurer.{1}" /> 	
         <map:transform type="dispatcher"> 	 
           <map:parameter name="type" value="css" /> 	 
         </map:transform> 	 
         <map:transform type="pattern" 	 
           src="{forrest:context}/resources/chaperon/grammars/link.xlex" /> 	 
         <map:transform 	 
           src="{forrest:context}/resources/chaperon/stylesheets/pattern2link.xsl" /> 	 
         <map:serialize type="text" mime-type="text/css" /> 	 
       </map:match>
      <map:match pattern="internal.**.*">
        <map:generate src="lm://resolve.structurer.{2}-to-xhtml2" />
        <map:call resource="jx-transformer">
          <map:parameter name="exstension" value="xhtml2" />
          <map:parameter name="request" value="{1}" />
        </map:call>
        <map:transform type="dispatcher">
          <map:parameter name="type" value="xhtml2" />
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
    </map:pipeline>
    <map:pipeline>
      <!-- businessHelper -->
      <map:mount uri-prefix="" src="dataModel.xmap" check-reload="yes"
        pass-through="true" />
    </map:pipeline>
      <!-- linkmap -->
    <map:pipeline>
      <map:mount uri-prefix="" src="themer.xmap" check-reload="yes"
        pass-through="true" /> 
    </map:pipeline>
    <map:pipeline>
      <map:mount uri-prefix="" src="themes.xmap" check-reload="yes"
        pass-through="true" /> 
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
