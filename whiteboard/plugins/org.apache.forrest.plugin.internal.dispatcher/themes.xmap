<?xml version="1.0"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation or its licensors,
  as applicable.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:pipes default="caching">
      <map:pipe name="caching" 
        src="org.apache.cocoon.components.pipeline.impl.CachingProcessingPipeline" 
        />
      <map:pipe name="noncaching" 
        src="org.apache.cocoon.components.pipeline.impl.NonCachingProcessingPipeline" 
        />
    </map:pipes>
    <map:selectors>
      <map:selector logger="sitemap.selector.exists" name="exists" 
        src="org.apache.forrest.sourceexists.SourceExistsSelector" />
    </map:selectors>
    <map:generators default="file">
      <map:generator name="html" 
        src="org.apache.cocoon.generation.HTMLGenerator">
        <jtidy-config>jtidy.properties</jtidy-config>
      </map:generator>
      <map:generator name="text" 
        src="org.apache.cocoon.generation.TextGenerator">
        <parameter name="localizable" value="true" />
      </map:generator>
      <map:generator name="directory" 
        src="org.apache.cocoon.generation.DirectoryGenerator" />
      <!--<map:generator name="structurerXsl"
        src="org.apache.forrest.structurer.generation.StructurerXSLGenerator" />
      -->
    </map:generators>
    <map:transformers default="xslt">
      <map:transformer name="cinclude" 
        src="org.apache.cocoon.transformation.CIncludeTransformer" />
      <map:transformer name="dispatcher" 
        src="org.apache.forrest.dispatcher.transformation.DispatcherTransformer" 
        />
      <map:transformer name="i18n" 
        src="org.apache.cocoon.transformation.I18nTransformer">
        <catalogues default="contracts">
          <catalogue id="other" name="OtherMessages" location="messages" />
          <catalogue id="contracts" name="ContractsMessages" 
            location="messages" />
        </catalogues>
        <cache-at-startup>true</cache-at-startup>
      </map:transformer>
    </map:transformers>
    <map:serializers default="xml">
      <map:serializer logger="sitemap.serializer.xhtml" mime-type="text/html" 
        name="xhtml" pool-grow="2" pool-max="64" pool-min="2" 
        src="org.apache.cocoon.serialization.XMLSerializer">
        <doctype-public> -//W3C//DTD XHTML 1.0 Strict//EN </doctype-public>
        <doctype-system> http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd 
          </doctype-system>
        <encoding>UTF-8</encoding>
        <indent>yes</indent>
      </map:serializer>
      <map:serializer name="txt" 
        src="org.apache.cocoon.serialization.TextSerializer" 
        mime-type="text/plain" logger="sitemap.serializer.text" />
      <map:serializer mime-type="image/png" name="svg2png" 
        src="org.apache.cocoon.serialization.SVGSerializer">
        <!--<parameter name="background_color" type="color" value="#ff00ff"/>-->
        <!-- <parameter name="gamma" type="float" value="0.48"/> -->
        <parameter name="gamma" type="float" value="0" />
      </map:serializer>
    </map:serializers>
  </map:components>
  <map:resources>
    <map:resource name="read-linked-text">
      <map:generate type="text" src="{path}" />
      <map:transform type="pattern" 
        src="{forrest:context}/resources/chaperon/grammars/link.xlex" />
      <map:transform 
        src="{forrest:context}/resources/chaperon/stylesheets/pattern2link.xsl" 
        />
      <map:serialize type="text" mime-type="text/css" />
    </map:resource>
  </map:resources>
  <map:pipelines>
    <map:pipeline>
      <map:match pattern="**.props">
        <map:generate src="foo.xml" />
        <map:transform src="lm://transform.xml.variable.helper">
          <map:parameter name="path" value="{1}" />
        </map:transform>
        <map:serialize type="xml" />
      </map:match>
    </map:pipeline>
    <map:pipeline>
      <!--
        Last processing step. 
        Here we are overriding the default skin generation.
      -->
      <map:match pattern="themes/**.css">
        <map:call resource="read-linked-text">
          <map:parameter name="path" value="{lm:themes/{1}.css}" />
        </map:call>
        <!-- <map:read mime-type="text/css" src="{lm:themes/{1}.css}" /> -->
      </map:match>
      <map:match pattern="themes/**.js">
        <map:read mime-type="application/x-javascript" src="{lm:themes/{1}.js}" 
          />
      </map:match>
      <map:match 
        pattern="themes/images**/roundcorner-*-*-*-bg*-stroke*-fg*.svg">
        <map:generate src="status.xml" />
        <map:transform src="resources/stylesheets/round-corner-hex.svg.xslt">
          <map:parameter name="orientation-tb" value="{2}" />
          <map:parameter name="orientation-lr" value="{3}" />
          <map:parameter name="size" value="{4}" />
          <map:parameter name="bg-color-name" value="{5}" />
          <map:parameter name="stroke-color-name" value="{6}" />
          <map:parameter name="fg-color-name" value="{7}" />
        </map:transform>
        <map:serialize type="xml" />
      </map:match>
      <map:match 
        pattern="themes/images**/roundcorner-*-*-*-bg*-stroke*-fg*.svg-to-png">
        <map:generate 
          src="cocoon:/themes/images{1}/roundcorner-{2}-{3}-{4}-bg{5}-stroke{6}-fg{7}.svg" 
          />
        <map:serialize type="svg2png" />
      </map:match>
      <map:match 
        pattern="themes/images**/roundcorner-*-*-*-bg*-stroke*-fg*.png">
        <map:read 
          src="cocoon:/themes/images{1}/roundcorner-{2}-{3}-{4}-bg{5}-stroke{6}-fg{7}.svg-to-png" 
          mime-type="image/png" />
      </map:match>
      <map:match pattern="themes/images/**.*">
        <map:match type="regexp" pattern="(.*\.)(jpg|JPG|Jpg|jpeg|Jpeg|JPEG)$">
          <map:read src="{lm:{1}{2}}" mime-type="image/jpeg" />
        </map:match>
        <map:match type="regexp" pattern="(.*)(gif|GIF|Gif)$">
          <map:read src="{lm:{1}{2}}" mime-type="image/gif" />
        </map:match>
        <map:match type="regexp" pattern="(.*)(png|PNG|Png)$">
          <map:read src="{lm:{1}{2}}" mime-type="image/png" />
        </map:match>
      </map:match>
      <map:match pattern="**.js">
        <map:mount uri-prefix="" src="resources.xmap" check-reload="yes" />
      </map:match>
      <map:match pattern="**.css">
        <map:mount uri-prefix="" src="resources.xmap" check-reload="yes" />
      </map:match>
      <!--       <map:match pattern="**images**">
        <map:mount uri-prefix="" src="resources.xmap"
        check-reload="yes" />
        </map:match>-->
      <map:match pattern="**.png">
        <map:mount uri-prefix="" src="resources.xmap" check-reload="yes" />
      </map:match>
      <map:match pattern="**.ico">
        <map:mount uri-prefix="" src="resources.xmap" check-reload="yes" />
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>