<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document><header><title>Glossary</title></header><body>

  <dl id="Dispatcher"><dt>Dispatcher</dt><dd><p>
    1. The Dispatcher is the codename for the Forrest Implementation of the 
    Core J2EE Dispatcher View.  java.sun.com has more information on its 
    origins.

    2. What we at 'Forrest' relate the Dispatcher to, is the overall 
    technology and implementation of the replacement 'skins' system. 
    Combining 'Views', 'Contracts' , 'Themes' enables separation of concerns 
    to provide a fast and efficient documentation framework.
    </p></dd><dd><p>See Also: </p><ul><li><link href="#Contracts">Contracts</link></li><li><link href="#Skins">Skins</link></li><li><link href="#Themes">Themes</link></li><li><link href="#Views">Views</link></li></ul></dd></dl>
  <dl id="Contracts"><dt>Contracts</dt><dd><p>
    1. A contract is a snippet of re-usable code that gets used in a 
    structurer file. 2. Contracts can be used or omitted as neccessary, 
    though a few are really compulsary in order to define a basic skeleton 
    structure and to include some styling (CSS) 3. Contracts mainly come 
    in three (3) types, static, semi-static &amp; dynamic. Static Contracts are 
    pre-defined snippets of code that need no further information.
    Semi-static Contracts can include extra configuration variables, these 
    would over-ride otherwise default variables. Dynamic Contracts can have 
    extra configuration variables, but can also define their own snippets of 
    code information. (Such as extra CSS elements, or generic markup elements).
    </p></dd></dl>
  <dl id="Class"><dt>Class</dt><dd><p>
    1. In the context of the dispatcher, a Class is used as an optional 
    attribute to the forrest:hook.
    </p></dd><dd><p>See Also: </p><ul><li><link href="#Name">Name</link></li></ul></dd></dl>
  <dl id="Name"><dt>Name</dt><dd><p>
    1. In the context of the dispatcher, a name is used as an optional 
    attribute to the forrest:hook.
    </p></dd><dd><p>See Also: </p><ul><li><link href="#Class">Class</link></li></ul></dd></dl>
  <dl id="Skins"><dt>Skins</dt><dd><p>
     1. Skins is the name of the older alternative way for structuring and 
     styling your site pages. 2. Skins is still used in Forrest versions 
     0.7 and 0.8-dev, though for 0.8-dev and beyond it can be concidered 
     an option with Dispatcher being the other.(It is enabled as the default 
     option currently)
    </p></dd><dd><p>See Also: </p><ul><li><link href="#Themes">Themes</link></li><li><link href="#Dispatcher">Dispatcher</link></li></ul></dd></dl>
  <dl id="Views"><dt>Views</dt><dd><p>
    1. Views is the older now deprecated name for what is now the 
    'Dispatcher'. 2. Views also, confusingly, was used as a term for the 
    Structurer, and forrest:views is a deprecated code that has been replaced
    with forrest:template.
    </p></dd><dd><p>See Also: </p><ul><li><link href="#Dispatcher">Dispatcher</link></li></ul></dd></dl>
  <dl id="Themes"><dt>Themes</dt><dd><p>
    1. A more extensible and adaptable solution than its alternative 'Skins'. 
    A 'Theme' is an overall content &amp; style set. 2. A master 'common' theme 
    provides the basis in which you can extend, over-ride or add to in order 
    to make your own theme, you do not have to create a complete theme from 
    scratch, simply include/exclude/over-ride/add what you need. The current 
    'Pelt Theme' based on its 'Pelt Skin' counterpart, but uses functionality 
    and extends/inherits what it needs to from the 'common' theme.
    </p></dd></dl>
  <dl id="Tiles"><dt>Tiles</dt><dd><p>
    1. A tile is a collection of contracts that are grouped together for easy
    inclusion into a theme. 2. Tiles was the original but deprecated name for 
    a collection of contracts, it is now re-named and re-implemented as a 
    'Panels'.
    </p></dd><dd><p>See Also: </p><ul/></dd></dl>
  <dl id="Hooks"><dt>Hooks</dt><dd><p>
    1. forrest:hooks is a concept of defining format independent hooks to 
    structure the output. 2. Hooks are used to help define the layout of a 
    page. Hooks are only used to define the structure in our output that is 
    required to enable a theme to apply its look and feel.
    3. Hooks convert to layout &lt;div&gt;&lt;/div&gt; container blocks and 
    usually only consist of forrest:contracts.
    4. Hooks are applied currently in the themes.core plugin as part of a 
    themes structurer configuration file such as %themename %-html.panel.xml 
    (e.g pelt-html.panel.xml) or included in such configuration files via a 
    panel file such as %themename%-%format%.panel.xml 
    (e.g pelt-html.panel.xml).
    </p></dd><dd><p>See Also: </p><ul><li><link href="#Contracts">Contracts</link></li><li><link href="#Structurer">Structurer</link></li></ul></dd></dl>
  <dl id="Structurer"><dt>Structurer</dt><dd><p>
    1. The Structurer allows a user to define the layout and content of a site 
    or parts of a site.
    2. Structurer files contain hooks &amp; contracts which you can include to 
    build up a site structure template.
    3. A completed structurer file defines an overall theme (look and feel) 
    for a site.
    </p></dd><dd><p>See Also: </p><ul><li><link href="#Contracts">Contracts</link></li><li><link href="#Hooks">Hooks</link></li><li><link href="#Property">Property</link></li><li><link href="#Themes">Themes</link></li></ul></dd></dl>
  <dl id="Property"><dt>Property</dt><dd><p>
    1. forrest:property - Todo:open
    </p></dd></dl>
  <dl id="Panels"><dt>Panels</dt><dd><p>
    1. Panels is the new name for a tile - a collection of contracts. 
    </p></dd><dd><p>See Also: </p><ul><li><link href="#Tiles">Tiles</link></li></ul></dd></dl>
  
</body></document>
