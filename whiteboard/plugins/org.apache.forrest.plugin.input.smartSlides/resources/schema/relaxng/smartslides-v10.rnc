namespace rng = "http://relaxng.org/ns/structure/1.0"

# This grammar is designed to support transformation of content to several 
# different output versions:
# 
# Complete Version
#   Output for proofreading by presentation writer
#   Show all elements in an easily readable layout 
# Speaker Versions
#   * Speaker specific versions
#     All the following versions can be output in different versions
#     for each individual speaker or a all-speaker version
#     Speaker specific versions should highlight the speakers active part
#     while still showing the other speakers parts for orientation and context
#   Speaker Slides
#     Presentation Slides with additional info for viewing on the 
#     speakers screen. This requires a split screen technique of outputting 
#     two differenet versions (speaker and audience) at the same time.
#   Speaker Print Version
#     Content of slides and additional info for speakers prepared for
#     use in a printed version
#   Learner Version
#     Adds didactical explanations to content of explanation-elements 
#     to speaker versions to help new speakers
#     familiarize themselves with a new presentation.  
# Audience Versions 
#   Audience Slides
#     The normal presentation slides.
#   Audience Print Version
#     Content of presentation slides and additional info prepared
#     as printed handout for the audience.    

# ******************* Macros **************************************************************************** 

## list of commonly used block elements
elemenlist.blocks &= text* & numberedList* & bulletList* & para* & table* & code* & section* & TOC? & chapterTOC? & Presenters*

## list of block level special elements
elementlist.specialblocks &= demo* & talk* & comment* & todo*

## list of commonly used inline elements
elemenlist.inlines &=
    
    ## emphasis 
    element em { attribList.common, (text & elemenlist.inlines) }*
    & 
      ## strong emphasis
      element strong { attribList.common, (text & elemenlist.inlines) }*
    & 
      ## inline image 
      image*
    & 
      ## keyboard input
      element kbd { attribList.common, (text & elemenlist.inlines) }*
    & 
      ## quoted text
      element quote { attribList.common, (text & elemenlist.inlines) }*
    & 
      ## line break
      br*
    & PresentationTitle*
attribList.common &=
    attribute class { text }?,
    attribute id { text }?,
    attribute style { text }?
attribList.presControl &=
    
    ## number of presenter to present this content
    ## if none is given the presenter is inherited 
    ## from the parent elements
    attribute presenter { "1" | "2" | "3" }?,
    
    ## attribute to control visibility of any element
    ## in different output versions
    ## attribute is passed on to all children that have
    ## no attribute themselves
    ## Default rules are:
    ## 
    ## - Elements are visible in all Slides unless
    ##   showOnlyFor has "print" or "slides" in it
    ## - Elements are only visible in slides if
    ##   showOnlyFor has "slides" in it
    ## - Elements are only visible in printed versions if
    ##   showOnlyFor has "print" in it
    ## - If showOnlyFor contains "print" and "slides"
    ##   then element is only used in printouts for speakers!
    attribute showOnlyFor { "print" | "slides" }?
# ******************* Grammar  *********************************************************************** 
start = element presentation { metadata?, content }

## Meta Information about the whole presentation
metadata =
    element metadata {
        
        ## The title of the presentation
        element title { text },
        
        ## The subtitle of the presentation
        element subtitle { text }?,
        abstract?,
        
        ## one or more authors of the presentation
        element author { fullName, email? }*,
        
        ## creation date
        element created { xsd:date },
        
        ## update log
        element updates {
            
            ## who has written the updated
            element updatedby { text },
            
            ## when was it saved
            element changeDate { xsd:date }
        }*,
        
        ## central configuration of all speakers
        ## These name are inserted into intro slides and used whenever
        ## there is a switch between speakers
        ## if no name is given, "Speaker 1", "Speaker 2" etc. is used instead  
        
        ## If no presenters are given, the authors are assumed to be the presenters
        ## First presenter is default presenter for the presenation
        element presenter { fullName, shortName?, email? }*
    }

## an abstract of the content and purpose of this presentation
abstract = element abstract { attribList.presControl, elemenlist.blocks* }

## speaker's shortname for use within the speaker notes
fullName = element fullName { text }
shortName = element shortName { text }
email = element email { text }

## content-element is the frame around all content
## as opposed to metadata
content = element content { chapter* & module* & page* }

## chapters group pages or modules to add chapter structure
## to your presentation. Create chapters to  
chapter =
    element chapter {
        attribList.common,
        
        ## title for outline and listing of chapter in toc
        attribute title { text },
        
        ## summary of this chapter
        ## if present it will be shown on the chapter intro slide
        attribute summary { text }?,
        
        ## Don't show this chapter in Table of Content
        attribute hideInTOC { empty }?,
        
        ## define presenter here to assign a complete chapter to one speaker
        ## or make her the default speaker for it
        attribList.presControl,
        (chapter* & module* & page*)
    }

## Insert this element to generate a table of content
## within any of your slides
## the TOC is embedded in a bulleted list
TOC = element TOC { attribList.common }
chapterTOC = element chapterTOC { attribList.common }
PresentationTitle = element PresentationTitle { attribList.common }
Presenters = element Presenters { attribList.common }

## modules group pages of a learning unit
## using modules is optional
## creating modules simplifies re-use
module =
    element module {
        
        ## name for listing of module in software to recombine modules
        attribute name { text },
        
        ## define presenter here to assign a complete module to one speaker
        ## or make her the default speaker for it
        attribList.presControl,
        page+
    }

## individual presentation page
page =
    element page {
        attribList.common,
        
        ## title for outline and listing of chapter in toc
        ## if page has no heading element we'll use title as page title as well 
        ## so that page title normally shows in toc
        attribute title { text },
        
        ## type of page to determine background and processing
        ## default is empty
        attribute type { "slide" | "chapterTitle" | text }?,
        
        ## define presenter here to assign a complete page to one speaker
        ## or make her the default speaker for it
        attribList.presControl,
        
        ## control listing of element in Table of content slides
        ## by default a slide is not listed anywhere
        attribute listIn { "chapterTOC" | "globalTOC" | "allTOCs" }?,
        heading?,
        (elemenlist.blocks* & elementlist.specialblocks* & image*),
        addlInfo?
    }

## linebreak
br = element br { attribList.common }

## frame element around a bullet list
bulletList = element bulletList { attribList.common, attribList.presControl, item+ }

## frame element around a bullet list
numberedList = element numberedList { attribList.common, attribList.presControl, item+ }

## element for each item in a list
## note that lists can contain other lists
## listitem for simplicity can directly contain text.
## if it does processing should consider it being wrapped in para-element
item = element item { attribList.common, attribList.presControl, (elemenlist.blocks* & elementlist.specialblocks*) }
para = element para { attribList.common, attribList.presControl, (text & elemenlist.inlines* & xref*) }

## source code quotes
code = element code { attribList.common, attribList.presControl, (text & elemenlist.inlines* & xref*) }
image =
    element image {
        attribList.common,
        attribute url { text },
        attribute alternativeText { text },
        attribList.presControl
    }

## Optional element for page heading 
## if not the same as page title    
heading = element heading { attribList.common, attribList.presControl, (text & elemenlist.inlines* & xref*) }

## subheadings within the text
section =
    element section {
        attribList.common,
        attribList.presControl,
        attribute title { text },
        (elemenlist.blocks* & elementlist.specialblocks* & image*)
    }
table =
    element table {
        attribList.common,
        attribList.presControl,
        element row {
            attribList.presControl,
            
            ## table cell for simplicity can directly contain text.
            ## if it does processing should consider it being wrapped in para-element
            element cell {
                attribList.common,
                attribList.presControl,
                
                ## span cell over several rows
                attribute colspan { xsd:integer }?,
                
                ## span cell over several columns
                attribute rowspan { xsd:integer }?,
                (elemenlist.blocks & elementlist.specialblocks*)
            }
        }
    }

## cross reference    
xref =
    element xref {
        attribList.common,
        attribute url { text },
        (elemenlist.inlines* & text*)
    }
# special block elements

## element for dictatical comment to be inserted anywhere within a page
## will only be rendered in full and leaner version of speaker notes
comment = element comment { attribList.presControl, elemenlist.blocks* }

## describe what is to be shown to the audience
demo = element demo { attribList.common, attribList.presControl, elemenlist.blocks* }

## additional info for the printed version
addlInfo =
    element addlInfo {
        attribList.common,
        
        ## optional title for this part
        ## if none is given we use a default heading "Additional Information"
        attribute title { text }?,
        (elemenlist.blocks* & elementlist.specialblocks*)
    }
# special inline elements

## reminder about something that needs to be done
todo =
    element todo {
        attribList.common,
        
        ## who is to do it (optional)
        attribute assignedTo { text }?,
        
        ## when we need it
        attribute doUntil { xsd:date }?,
        
        ## importance
        attribute priority { "showStopper" | "important" | "optional" }?,
        (elemenlist.blocks* & elementlist.specialblocks*)
    }

## explain what needs to be said in addition to the info
## on the slides  
talk = element talk { attribList.common, attribList.presControl, elemenlist.blocks* }
