<?xml version="1.0"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation or its licensors,
  as applicable.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- forrest:structurer
  ***********************
  The structuring of the assembled page where all content is in place
  and structured with forrest:hooks to provide hooks for theming.
  
  It is the job of a forrest:structurer to define this structure. The
  structurer uses for this a couple of helper classes forrest:contracts,
  forrest:hooks and forrest:properties. But there is more to a
  forrest:structurer than just structure. 
  
  The structurer is not limited to a document but can request and
  structure the content from multiple input sources. Far more actually
  because it provides as well logical conditions for presentation formatting logic
-->

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:pipes default="caching"/>
    <map:generators default="file"/>
    <map:transformers default="xslt"/>
    <map:serializers default="xml"/>
  </map:components>
  <map:pipelines>
      <!-- prepare the xsl:templates of the requested contract.
        {1} format to deliver
        {2} contract name  -->
    <map:pipeline>
      <map:match pattern="prepare.contract.*.**">
        <map:generate src="{lm:resolve.contract.{1}.{2}}" />
        <map:transform src="{lm:contract-strip-xsl.xsl}">
          <map:parameter name="format" value="{1}" />
        </map:transform>
        <map:transform type="i18n">
          <map:parameter name="locale" value="{request:locale}" />
        </map:transform>
        <map:serialize />
      </map:match>
    </map:pipeline>
      <!--
        Get the forrest:properties of the requested contract. 
        This will determine which templates (head, body) we have to call later on
        {1} format to deliver
        {2} contract name
      -->
    <map:pipeline>
      <map:match pattern="prepare.contract-property.*.**">
        <map:generate src="{lm:resolve.contract.{1}.{2}}" />
        <map:transform
          src="{lm:contract-property.xsl}">
          <map:parameter name="format" value="{1}" />
        </map:transform>
        <map:serialize />
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
