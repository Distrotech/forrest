<?xml version="1.0"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation or its licensors,
  as applicable.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!-- forrest:structurer
  ***********************
  The structuring of the assembled page where all content is in place
  and structured with forrest:hooks to provide hooks for theming.
  
  It is the job of a forrest:structurer to define this structure. The
  structurer uses for this a couple of helper classes forrest:contracts,
  forrest:hooks and forrest:properties. But there is more to a
  forrest:structurer than just structure. 
  
  The structurer is not limited to a document but can request and
  structure the content from multiple input sources. Far more actually
  because it provides as well logical conditions for presentation formatting logic
-->

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:pipes default="caching">
      <map:pipe name="caching"
        src="org.apache.cocoon.components.pipeline.impl.CachingProcessingPipeline" />
      <map:pipe name="noncaching"
        src="org.apache.cocoon.components.pipeline.impl.NonCachingProcessingPipeline" />
    </map:pipes>
    <map:selectors>
      <map:selector logger="sitemap.selector.exists" name="exists"
        src="org.apache.forrest.sourceexists.SourceExistsSelector" />
    </map:selectors>
    <map:generators default="file">
      <map:generator name="traverse"
        src="org.apache.cocoon.generation.TraversableGenerator"
        logger="sitemap.generator.traverse" label="content"
        pool-max="16" />
      <map:generator name="directory"
        src="org.apache.cocoon.generation.DirectoryGenerator" />
      <!--map:generator name="jx" logger="sitemap.generator.jx" 
        src="org.apache.cocoon.template.JXTemplateGenerator" 
        label="content,data" pool-max="16"-->
      <map:generator name="jx" logger="sitemap.generator.jx"
        src="org.apache.cocoon.generation.JXTemplateGenerator"
        label="content,data" pool-max="16" />

    </map:generators>
    <map:transformers default="xslt">
      <map:transformer logger="sitemap.transformer.jx" name="jx"
        pool-max="16"
        src="org.apache.cocoon.transformation.JXTemplateTransformer" />
      <map:transformer logger="sitemap.transformer.jpath" name="jpath"
        src="org.apache.cocoon.transformation.JPathTransformer" />
      <map:transformer name="cinclude"
        src="org.apache.cocoon.transformation.CIncludeTransformer" />
      <map:transformer name="xinclude"
        src="org.apache.cocoon.transformation.XIncludeTransformer" />
      <!-- Rewrites links, e.g. transforming href="site:index" to href="../index.html" -->
      <!-- See http://forrest.apache.org/docs/sitemap-ref.html#linkrewriting_impl -->
      <map:transformer name="linkrewriter"
        logger="sitemap.transformer.linkrewriter"
        src="org.apache.cocoon.transformation.LinkRewriterTransformer">
        <link-attrs>uri</link-attrs>
        <schemes>lm</schemes>
        <input-module name="lm" />
      </map:transformer>

    </map:transformers>
    <map:serializers default="xml">
      <map:serializer logger="sitemap.serializer.xhtml"
        mime-type="text/html" name="xhtml" pool-grow="2" pool-max="64"
        pool-min="2"
        src="org.apache.cocoon.serialization.XMLSerializer">
        <doctype-public>
          -//W3C//DTD XHTML 1.0 Strict//EN
        </doctype-public>
        <doctype-system>
          http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd
        </doctype-system>
        <encoding>UTF-8</encoding>
      </map:serializer>
      <map:serializer name="text"
        src="org.apache.cocoon.serialization.TextSerializer"
        mime-type="text/plain" logger="sitemap.serializer.text" />
    </map:serializers>
    <map:actions>
      <map:action name="fallbackResolverAction"
        src="org.apache.forrest.plugin.internal.view.acting.FallbackResolverAction" />
    </map:actions>
  </map:components>
  <map:resources>
    <map:resource name="skinit">
      <map:select type="exists">
        <map:when
          test="{project:skins-dir}{project:theme}/xslt/html/{type}.xsl">
          <map:transform
            src="{project:skins-dir}{project:theme}/xslt/html/{type}.xsl">
            <map:parameter name="notoc" value="{notoc}" />
            <!-- FIXME: do we need this anymore? -->
            <!-- For backwards-compat with 0.2 - 0.4 skins -->
            <map:parameter name="isfaq" value="{notoc}" />
            <map:parameter name="nopdf" value="{nopdf}" />
            <map:parameter name="path" value="{path}" />
            <map:parameter name="config-file"
              value="{project:skinconf}" />
          </map:transform>
        </map:when>
        <map:otherwise>
          <map:transform src="resources/stylesheets/html/{type}.xsl">
            <map:parameter name="notoc" value="{notoc}" />
            <!-- For backwards-compat with 0.2 - 0.4 skins -->
            <map:parameter name="isfaq" value="{notoc}" />
            <map:parameter name="nopdf" value="{nopdf}" />
            <map:parameter name="path" value="{path}" />
            <map:parameter name="config-file"
              value="{project:skinconf}" />
          </map:transform>
        </map:otherwise>
      </map:select>
      <map:serialize />
    </map:resource>
  </map:resources>
  <map:pipelines>
    <map:pipeline>
      <!-- businessHelper -->
      <map:mount uri-prefix="" src="dataModel.xmap" check-reload="yes"
        pass-through="true" />
    </map:pipeline>
      <!-- linkmap -->
<!-- FIXME: Temporary hack to get working again. Perhaps file is missing
from yesterday's commit by thorsten.
    <map:pipeline>
      <map:mount uri-prefix="" src="linkmap.xmap" check-reload="yes"
        pass-through="true" />
    </map:pipeline>
-->
    <!--
      structurer
      prepares and transforms the requested contracts (themes) and populate them with the content (businessHelper).
    -->
    <!-- Structurer population
      a. Resolve request specific strucuturer template.
      b. Add businessHelper and tiles to the presentation model 
      that the content can be used later on.
      {1} - requested url (striped from extension) -->
    <map:pipeline>
      <map:match pattern="prepare.structurer.**">
        <map:generate src="{lm:resolve.structurer.{1}}" />
        <!-- FIXME: jxpath -->
        <!-- When jxpath problem is solved rewrite tiles and uncomment -->
        <!-- <map:transform type="linkrewriter" /> -->
        <map:transform type="jx">
          <map:parameter name="lenient-xpath" value="true" />
          <map:parameter name="getRequest" value="{1}" />
        </map:transform>
        <map:serialize />
      </map:match>
    </map:pipeline>
    <!-- You can group elements to a template and call it from any view. 
      <jx:import uri="cocoon://prepare.tiles.export-link"/>
    -->
    <map:pipeline>
      <map:match pattern="prepare.tiles.**">
        <map:generate src="{lm:resolve.tiles.{1}}" />
        <!-- FIXME: jxpath -->
        <!-- When jxpath problem is solved rewrite tiles and uncomment -->
        <!-- <map:transform type="linkrewriter" /> -->
        <map:transform type="jx">
          <map:parameter name="lenient-xpath" value="true" />
          <map:parameter name="getRequest" value="{1}" />
        </map:transform>
        <map:transform src="{lm:root-strip.xsl}" />
        <map:serialize />
      </map:match>
    </map:pipeline>
    <map:pipeline>
      <map:match pattern="test.*.**">
        <map:generate src="{lm:structurer-properties.{1}.{2}}" type="jx" />
        <map:serialize />
        <map:transform src="resources/stylesheets/temp.xsl">
          <map:parameter name="test"
            value="{lm:prepare.structurer.{2}}" />
        </map:transform>
        <map:serialize />
      </map:match>
    </map:pipeline>
    <map:pipeline>
      <!--
        Aggregate the contract-templates requested by the view with cinclude.
        The result is a stylesheet with all needed xsl:templates.
        {1} - output format
        {2} - requested url
      -->
      <map:match pattern="prepare.structurer-xsl.*.**">
        <map:generate src="{lm:structurer.{2}}" />
        <map:transform src="{lm:structurer-xsl-includes.xsl}">
          <map:parameter name="format" value="{1}" />
        </map:transform>
        <map:transform type="cinclude" />
        <map:serialize />
      </map:match>
    </map:pipeline>
    <map:pipeline>
      <!--
        Aggregate the forrest:properties requested by the *.fv.
        The result is an aggregation of properties which defines the templates to be call.
        {1} - format
        {2} - requested url
      -->
      <map:match pattern="prepare.structurer-properties.*.**">
        <map:generate src="{lm:structurer.{2}}" />
        <map:transform src="{lm:structurer-properties-includes.xsl}">
          <map:parameter name="format" value="{1}" />
        </map:transform>
        <map:transform type="cinclude" />
        <map:serialize />
      </map:match>
    </map:pipeline>
    <map:pipeline>
    <!--
        Aggregate all contracts-templates requested by the view.
        Create a xsl that can be used for the last step of the transformation of the view.
        {1} - format
        {2} - requested url
      -->
      <map:match pattern="structurer-xsl.*.**">
        <map:aggregate element="filter">
          <map:part src="{lm:structurer.{2}}" />
          <map:part src="{lm:structurer-properties.{1}.{2}}" />
        </map:aggregate>
        <map:transform src="{lm:structurer-final-xsl-{1}.xsl}">
          <map:parameter name="request" value="{2}" />
          <map:parameter name="forrestContext"
            value="{forrest:context}" />
        </map:transform>
        <map:serialize />
      </map:match>
    </map:pipeline>

    <map:pipeline>
      <!-- DO NOT USE ANYMORE
        FIXME: Finish rewriting move to lm ->  del if finished-->
      <map:match pattern="prepare.view.**">
        <map:generate src="cocoon:/prepare.structurer.{1}" />
        <map:serialize />
      </map:match>
      <map:match pattern="prepare.view-nugget.**">
        <map:generate src="cocoon:/prepare.structurer.{1}" />
        <map:serialize />
      </map:match>
      <map:match pattern="prepare.include.*.**">
        <map:generate src="cocoon:/prepare.structurer-xsl.{1}.{2}" />
        <map:serialize />
      </map:match>
      <map:match pattern="prepare.properties.*.**">
        <map:generate
          src="cocoon:/prepare.structurer-properties.{1}.{2}" />
        <map:serialize />
      </map:match>
      <map:match pattern="getStylesheet.*.**">
        <map:generate
          src="cocoon:/structurer-xsl.{1}.{2}" />
        <map:serialize />
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
