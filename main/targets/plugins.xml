<?xml version="1.0"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project basedir="." name="plugins">
   <!-- public targets -->     
     
  <target name="available-plugins"
          depends="init-props, plugin-unavailable, fetch-plugins-descriptors"
          description="What plugins are available?">
    <for param="plugin-descriptor-file">
      <path>
        <fileset dir="${project.temp-dir}" includes="plugins-*.xml"/>
      </path>
      <sequential>
        <xslt in="@{plugin-descriptor-file}" 
          out="${project.temp-dir}/pluginlist2echobuild.xml"
          style="${forrest.core}/var/pluginlist2echo.xsl"/>  
    <ant antfile="${project.temp-dir}/pluginlist2echobuild.xml"/>
      </sequential>
    </for>
  </target>   

  <target name="plugin-unavailable">   
    <property name="plugin.unavailable" value="true"/>
  </target>  
  
  <target name="check-plugin">   
    <condition property="plugin.unavailable">
      <and>
        <not>
          <available type="dir" file="${forrest.plugins-dir}/${plugin.name}"/>
        </not>
        <not>
          <available type="file" file="${forrest.plugins-dir}/${plugin.name}.zip"/>
        </not>
      </and>
    </condition>
  </target>  
            
  <target name="unpack-plugin"
           if="plugin.unavailable"
          depends="init-props">
     <if>
       <available file="${forrest.plugins-dir}/${plugin.name}.zip"/>
       <then>
       <unzip dest="${forrest.plugins-dir}/${plugin.name}">
         <fileset dir="${forrest.plugins-dir}/">
            <include name="${plugin.name}.zip"/>
          </fileset>
       </unzip>       
       <delete>
          <fileset dir="${forrest.plugins-dir}/">
            <include name="${plugin.name}.zip"/>
          </fileset>
       </delete>
     </then>
     <else>
       <echo>
ERROR
=====
       
Unable to retrive the ${plugin.name} plugin.
There may be more information about the reason for this in ouput
above. The usual cause is that Forrest has been unable to download
the plugin descriptor file that indicates where this plugin is to be
downloaded from. Please check the value of the 
forrest.plugins.descriptors property in the forrest.properties file
and ensure that the locations indicated by that value are accessible
(note there should be no spaces in this property).
       </echo>
     </else>
   </if>
  </target>  
  
  <target name="configure-plugin" 
    unless="plugin.unavailable"
    depends="check-plugin-type, configure-input-plugin, configure-output-plugin, configure-internal-plugin"/>
    
  <target name="check-plugin-type" 
    unless="plugin.unavailable">
    <available property="input-plugin" file="${forrest.plugins-dir}/${plugin.name}/input.xmap"/>
    <available property="output-plugin" file="${forrest.plugins-dir}/${plugin.name}/output.xmap"/>
    <available property="internal-plugin" file="${forrest.plugins-dir}/${plugin.name}/internal.xmap"/>
  </target>
  
  <target name="configure-input-plugin"
    if="input-plugin"
    unless="plugin.unavailable">
     <!-- add the snippet to plugins/input.xmap that will mount the plugin
          specific input.xmap -->
     <echo>Mounting input plugin: ${plugin.name}</echo>
     <xslt in="${project.temp-dir}/input.xmap"
       out="${project.temp-dir}/input.xmap.new"
       style="${forrest.core}/var/pluginMountSnippet.xsl"
       force="true">
           <param name="plugin-name" expression="${plugin.name}"/>  
           <param name="plugin-type" expression="input"/>  
     </xslt>
     <move file="${project.temp-dir}/input.xmap.new" 
       tofile="${project.temp-dir}/input.xmap"/>
     <xslt in="${project.temp-dir}/resources.xmap"
       out="${project.temp-dir}/resources.xmap.new"
       style="${forrest.core}/var/pluginMountSnippet.xsl"
       force="true">
           <param name="plugin-name" expression="${plugin.name}"/>  
           <param name="plugin-type" expression="resources"/>  
     </xslt>
     <move file="${project.temp-dir}/resources.xmap.new" 
       tofile="${project.temp-dir}/resources.xmap"/>
  </target>
  
  <target name="configure-output-plugin"
    if="output-plugin"
    unless="plugin.unavailable">
     <!-- add the snippet to plugins/output.xmap that will mount the plugin
          specific input.xmap -->
     <echo>Mounting output plugin: ${plugin.name}</echo>
     <xslt in="${project.temp-dir}/output.xmap"
       out="${project.temp-dir}/output.xmap.new"
       style="${forrest.core}/var/pluginMountSnippet.xsl"
       force="true">
           <param name="plugin-name" expression="${plugin.name}"/>  
           <param name="plugin-type" expression="output"/>  
     </xslt>
     <move file="${project.temp-dir}/output.xmap.new" 
       tofile="${project.temp-dir}/output.xmap"/>
  </target>
  
  <target name="configure-internal-plugin"
    if="internal-plugin"
    unless="plugin.unavailable">
     <!-- add the snippet to plugins/internal.xmap that will mount the plugin
          specific input.xmap -->
     <echo>Mounting internals plugin: ${plugin-name}</echo>
     <xslt in="${project.temp-dir}/internal.xmap"
       out="${project.temp-dir}/internal.xmap.new"
       style="${forrest.core}/var/pluginMountSnippet.xsl"
       force="true">
           <param name="plugin-name" expression="${plugin.name}"/>  
           <param name="plugin-type" expression="internal"/>  
     </xslt>
     <move file="${project.temp-dir}/internal.xmap.new" 
       tofile="${project.temp-dir}/internal.xmap"/>
  </target>

  <target name="fetch-plugins-descriptors" if="plugin.unavailable">
    <delete>
      <fileset dir="${project.temp-dir}" includes="plugins-*.xml"/>
    </delete>
  
    <var name="plugin-counter" value="1"/>
    <for list="${forrest.plugins.descriptors}" param="url">
      <sequential>
        <echo>fetching descriptor: @{url}</echo>
        <get src="@{url}" 
           dest="${project.temp-dir}/plugins-${plugin-counter}.xml"
           verbose="true" usetimestamp="true" ignoreerrors="true"/>
        <available property="plugin.list-${plugin-counter}.present"
                 file="${project.temp-dir}/plugins-${plugin-counter}.xml"/>
        <math result="plugin-counter" operand1="${plugin-counter}" operation="+" operand2="1" datatype="int"/>
      </sequential>
    </for>
    
    <var name="plugin-counter" value="1"/>
    <for list="${forrest.plugins.descriptors}" param="url">
      <sequential>
        <if>
          <available file="${project.temp-dir}/plugins-${plugin-counter}.xml"/>
          <then>
            <echo>Plugin list loaded.</echo>
          </then>
          <else>
            <echo>
            WARNING
            =======
            
            Unable to load plugin list number ${plugin-counter}. 
            Any plugins identified in this plugin list cannot be installed 
            automatially, you will need to install these manually, see 
            further errors below.</echo>
          </else>
        </if>
        <math result="plugin-counter" operand1="${plugin-counter}" operation="+" operand2="1" datatype="int"/>
      </sequential>
    </for>
  </target>  
  
  <target name="fetch-plugin" 
          if = "plugin.unavailable"
          depends="init-props, fetch-plugins-descriptors">
    <for param="plugin-descriptor-file">
      <path>
        <fileset dir="${project.temp-dir}" includes="plugins-*.xml"/>
      </path>
      <sequential>
        <xslt in="@{plugin-descriptor-file}" 
          out="${project.temp-dir}/pluginlist2fetchbuild.xml"
          style="${forrest.core}/var/pluginlist2fetch.xsl"
          force="true">
          <param name="plugin-name" expression="${plugin.name}"/>  
          <param name="plugin-dir" expression="${forrest.plugins-dir}/"/>      
          <param name="forrest-version" expression="${forrest.version}"/>   
       </xslt>  
       <ant antfile="${project.temp-dir}/pluginlist2fetchbuild.xml"/> 
      </sequential>
    </for>
  </target>    
  
  <target name="install-plugin" depends="check-plugin, fetch-plugin, unpack-plugin"/>
  
  <target name="init-plugins" depends="init-props"
    description="ensure the required plugins are available locally, if any are not download them automatically">
    
    <mkdir dir="${forrest.plugins-dir}"/>
    <mkdir dir="${project.temp-dir}"/>
    <copy file="${forrest.core}/var/initial_plugins_sitemap.xmap"
      tofile="${project.temp-dir}/input.xmap"
      overwrite="true"/>
    <copy file="${forrest.core}/var/initial_plugins_sitemap.xmap"
      tofile="${project.temp-dir}/resources.xmap"
      overwrite="true"/>
    <copy file="${forrest.core}/var/initial_plugins_sitemap.xmap"
      tofile="${project.temp-dir}/output.xmap"
      overwrite="true"/>
    <copy file="${forrest.core}/var/initial_plugins_sitemap.xmap"
      tofile="${project.temp-dir}/internal.xmap"
      overwrite="true"/>
    
      <for list="${project.required.plugins}" param="name">
      <sequential>
        <echo>Installing plugin: @{name}</echo>
        <antcall target="install-plugin">
          <param name="plugin.name" value="@{name}"/>
        </antcall>
        <antcall target="configure-plugin">
          <param name="plugin.name" value="@{name}"/>
        </antcall>
      </sequential>
    </for>
  </target>
  
</project>
