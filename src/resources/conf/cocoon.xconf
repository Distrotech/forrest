<?xml version="1.0" encoding="UTF-8"?>
<cocoon version="2.1">

<!--+
    |  This is the Apache Cocoon configuration file. This is the place
    |  where you configure the components that Cocoon uses internally (stuff
    |  like the cache) or handles to the pipeline components
    |  (stuff like XML parsers or XSLT processors).
    +-->

<!-- =========================== Sitemap =============================== -->

  <!--+
      | New implementation of the sitemap. It is interpreted, so load times are super-fast,
      | and request processing is slightly faster than with the compiled engine thanks to
      | the HotSpot VM.
      |
      | Reloading of the sitemap:
      |   The check-reload attribute determines if the sitemap is reloaded on change.
      |   Set to "no", the sitemap is generated once at startup.
      |   Set to "yes", the sitemap is regenerated if it changes.
      |
      | For development environment, set the check-reload to yes.
      | For production environment, it is advisable to set the check-reload to no.
      +-->
  <sitemap check-reload="yes" config="resource://org/apache/cocoon/components/treeprocessor/treeprocessor-builtins.xml" file="context://sitemap.xmap" logger="sitemap"/>


<!-- =================== Sitemap Input/Output Modules ====================== -->

  <!--+
      | InputModules are a replacement to reading values directly
      | e.g. from request parameters. By using this abstraction and
      | indirection, other components can be more generic and changes
      | to the application logic are easier.
      |
      | A number of components already use InputModules: the sitemap processor, 
      | flow, some matchers, the linkrewriting transformer, database actions
      | and more.
	  |
      | For example the sitemap processor allows to obtain a value
      | named "foo" from an the InputModule for request parameters by
      | writing {request-param:foo} wherever a sitemap variable is
      | allowed. 
	  |
      | Some InputModules need the help of other InputModules to
      | obtain values and only apply a function to the obtained value
      | or change the name of the attribute. These modules usually
      | carry "Meta" in their name. An example is the ChainMetaModule
      | which tries several other modules in turn until a non-null
      | value is obtained or all modules are tied.
	  |
      | For details and optional configuration parameters refer to the
      | accompanying javadocs.
      +-->
  <input-modules>
    <component-instance class="org.apache.cocoon.components.modules.input.GlobalInputModule" logger="core.modules.input" name="global"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RequestModule" logger="core.modules.input" name="request"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SessionModule" logger="core.modules.input" name="session"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RequestParameterModule" logger="core.modules.input" name="request-param"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RawRequestParameterModule" logger="core.modules.input" name="raw-request-param"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RequestAttributeModule" logger="core.modules.input" name="request-attr"/>
    <component-instance class="org.apache.cocoon.components.modules.input.HeaderAttributeModule" logger="core.modules.input" name="request-header"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SessionAttributeModule" logger="core.modules.input" name="session-attr"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SystemPropertyModule" logger="core.modules.input" name="system-property"/>
    <component-instance class="org.apache.cocoon.components.modules.input.StringConstantModule" logger="core.modules.input" name="constant"/>
    <component-instance class="org.apache.cocoon.components.modules.input.RandomNumberModule" logger="core.modules.input" name="random"/>
    <component-instance class="org.apache.cocoon.components.modules.input.DigestMetaModule" logger="core.modules.input" name="digest"/>
    <component-instance class="org.apache.cocoon.components.modules.input.DateInputModule" logger="core.modules.input" name="date">
      <!-- <format>EEE, d MMM yyyy HH:mm:ss Z</format> -->
      <!--Eg: Mon, 28 Oct 2002 03:08:49 +1100 -->
    </component-instance>
    <component-instance class="org.apache.cocoon.components.modules.input.NullInputModule" logger="core.modules.input" name="nullinput"/>
    <component-instance class="org.apache.cocoon.components.modules.input.XMLMetaModule" logger="core.modules.input" name="xmlmeta"/>
    <component-instance class="org.apache.cocoon.components.modules.input.MapMetaModule" logger="core.modules.input" name="mapmeta"/>
    <component-instance class="org.apache.cocoon.components.modules.input.DateMetaInputModule" logger="core.modules.input" name="datemeta"/>
    <component-instance class="org.apache.cocoon.components.modules.input.XMLFormInput" logger="core.modules.input" name="xmlform"/>
    <component-instance class="org.apache.cocoon.components.modules.input.JXPathMetaModule" logger="core.modules.input" name="jxpath"/>
    <component-instance class="org.apache.cocoon.components.modules.input.SimpleMappingMetaModule" logger="core.modules.input" name="simplemap"/>
    <component-instance name="defaults"       class="org.apache.cocoon.components.modules.input.DefaultsMetaModule">
      <values>
        <skin>forrest-site</skin>
      </values>
    </component-instance>

      <component-instance logger="core.modules.input" name="forrest"    class="org.apache.cocoon.components.modules.input.ChainMetaModule">
        <input-module name="request-param"/>
        <input-module name="request-attr"/>
        <input-module name="session-attr"/>
        <input-module name="defaults"/>
      </component-instance>

      <!-- For the site: scheme -->
      <component-instance
        class="org.apache.cocoon.components.modules.input.XMLFileModule"
        logger="core.modules.xml" name="linkmap">
        <file src="cocoon:/linkmap"/>
      </component-instance>

      <!-- Links to URIs within the site -->
      <component-instance
        class="org.apache.cocoon.components.modules.input.SimpleMappingMetaModule"
        logger="core.modules.mapper" name="site">
        <input-module name="linkmap"/>
        <prefix>/site//</prefix>
        <suffix>/@href</suffix>
      </component-instance>

      <!-- Links to external URIs, as distinct from 'site' URIs -->
      <component-instance
        class="org.apache.cocoon.components.modules.input.SimpleMappingMetaModule"
        logger="core.modules.mapper" name="ext">
        <input-module name="linkmap"/>
        <prefix>/site/external-refs//</prefix>
        <suffix>/@href</suffix>
      </component-instance>


</input-modules>


<!-- ================================= XML ================================ -->

  <!--+
      | XML Parser
      |
      | The default parser used in Apache Cocoon is
      | org.apache.excalibur.xml.impl.JaxpParser. Apache Cocoon requires a
      | JAXP 1.1 parser.
      | If you have problems because your servlet environment uses its own
      | parser not conforming to JAXP 1.1 try using the alternative
      | XercesParser instead of the JaxpParser. To activate the XercesParser,
      | change the class attribute to
      |   class="org.apache.excalibur.xml.impl.XercesParser"
      | You will also need to add a system property to your JVM,
      | probably on the startup of your servlet engine like this:
      | -Dorg.apache.excalibur.xml.sax.SAXParser=org.apache.excalibur.xml.impl.XercesParser
      |
      | Configuration for the JaxpParser (not the XercesParser!):
      | - validate (boolean, default = false): This parameter causes the parser
      |     to be a validating parser.
      |     XML validation is only being used for the documentation build.
      |     (If you are going to use it elsewhere, then do so with caution.)
      |     You really should have validated all of your XML documents already,
      |     according to their proper DTD or schema. Do not expect Cocoon to do it.
      | - namespace-prefixes (boolean, default = false) : do we want
      |     namespaces declarations also as 'xmlns:' attributes ?
      |     Note : setting this to true confuses some XSL processors (e.g. Saxon).
      | - stop-on-warning (boolean, default = true) : should the parser
      |     stop parsing if a warning occurs ?
      | - stop-on-recoverable-error (boolean, default = true) : should the parser
      |     stop parsing if a recoverable error occurs ?
      | - reuse-parsers (boolean, default = true) : do we want to reuse
      |     parsers or create a new parser for each parse ?
      |     Note : even if this parameter is true, parsers are not
      |     recycled in case of parsing errors : some parsers (e.g. Xerces) don't like
      |     to be reused after failure.
      | - sax-parser-factory (string) : the name of the SAXParserFactory
      |     implementation class to be used instead of using the standard JAXP mechanism
      |     (SAXParserFactory.newInstance()). This allows to choose
      |     unambiguously the JAXP implementation to be used when several of them are
      |     available in the classpath.
      | - document-builder-factory (string) : the name of the
      |     DocumentBuilderFactory implementation to be used (similar to
      |     sax-parser-factory for DOM).
      +-->
  
  <!-- HSQLDB Server for samples:
    Comment this section out if you don't care about the samples.
        port   : number      port where the server is listening
        silent : true/false  display all queries
        trace  : true/false  display JDBC trace messages
        -->
        <!--
  <hsqldb-server class="org.apache.cocoon.components.hsqldb.ServerImpl" logger="core.hsqldb-server" pool-max="1" pool-min="1">
     <parameter name="port" value="9002"/>
     <parameter name="silent" value="true"/>
     <parameter name="trace" value="false"/>
   </hsqldb-server>
   -->

<xml-parser class="org.apache.excalibur.xml.impl.JaxpParser" logger="core.xml-parser" pool-grow="4" pool-max="32" pool-min="8">
    <parameter name="validate" value="false"/>
    <parameter name="namespace-prefixes" value="false"/>
    <parameter name="stop-on-warning" value="true"/>
    <parameter name="stop-on-recoverable-error" value="true"/>
    <parameter name="reuse-parsers" value="false"/>
    <!--parameter name="sax-parser-factory" value="???"/-->
    <!--parameter name="document-builder-factory" value="???"/-->
  </xml-parser>

  <!--+
      | Entity resolution catalogs
      |
      | The default catalog is distributed at /WEB-INF/entities/catalog
      | This is the contextual pathname for Cocoon resources.
      | You can override this path, if necessary, using the "catalog" parameter:
      |
      |    <parameter name="catalog" value="/WEB-INF/entities/catalog"/>
      |
      | However, it is probably desirable to leave this default catalog config
      | and declare your own local catalogs, which are loaded in addition to
      | the system catalog.
      |
      | There are various ways to do local configuration (see "Entity Catalogs"
      | documentation). One way is via the CatalogManager.properties file.
      | As an additional method, you can specify the "local-catalog" parameter here.
      |
      | local-catalog:
      |   The full filesystem pathname to a single local catalog file.
      |
      |  <parameter name="local-catalog" value="/usr/local/sgml/mycatalog"/>
      |
      | verbosity:
      | The level of messages for status/debug (messages go to standard output)
      | The following messages are provided ...
      |  0 = none
      |  1 = ? (... not sure yet)
      |  2 = 1+, Loading catalog, Resolved public, Resolved system
      |  3 = 2+, Catalog does not exist, resolvePublic, resolveSystem
      |  10 = 3+, List all catalog entries when loading a catalog
      |    (Cocoon also logs the "Resolved public" messages.)
      |
      |     <parameter name="verbosity" value="2"/>
      +-->
  <entity-resolver class="org.apache.cocoon.components.resolver.ResolverImpl" logger="core.resolver">
    <parameter name="catalog" value="/resources/schema/catalog"/>
    <parameter name="local-catalog" value="/home/jeff/apache/xml/xml-forrest/src/documentation/resources/schema/catalog"/>
    <parameter name="verbosity" value="1"/>
  </entity-resolver>

  <!--+
      | XSLT Processor
      |
      | 'incremental-processing' (only works with Xalan) allows the XSLT
      | processor to start the output of the transformation as soon as possible.
      | if set to false, the transforer waits until the end of the
      | transformation to deliver the output.
      +-->
  <xslt-processor logger="core.xslt-processor">
     <parameter name="use-store" value="false"/>
     <parameter name="incremental-processing" value="true"/>
  </xslt-processor>

  <!-- Xpath Processor: -->
  <xpath-processor class="org.apache.excalibur.xml.xpath.XPathProcessorImpl" logger="core.xpath-processor"/>

  <!-- The XMLizers converts different mime-types to XML -->
  <xmlizer>
      <parser mime-type="text/html"  role="org.apache.excalibur.xml.sax.SAXParser/HTML"/>
      <parser mime-type="text/xml"   role="org.apache.excalibur.xml.sax.SAXParser"/>
      <parser mime-type="text/plain" role="org.apache.excalibur.xml.sax.SAXParser/Text"/>
</xmlizer>

<!-- ============================ Object Stores =========================== -->

  <!--+
      | Transient Store: holds objects that don't have to survive shutdown
      +-->
  <transient-store logger="core.store.transient">

     <!--+
         | Indicates how many objects will be hold in the cache.
         | When the number of maxobjects has been reached. The last object in the
         | cache will be thrown out.
         +-->
     <parameter name="maxobjects" value="100"/>

     <!-- Turns the swapping of the objects into persistent cache on and off. -->
     <parameter name="use-persistent-cache" value="true"/>
  </transient-store>

  <!--+
      | Persistent Store: holds objects that have to survive shutdown.
      | WARNING: FilesystemStore is broken. Cocoon uses JispFilesystemStore instead.
      |
      | Common configuration parameters:
      |  use-cache-directory: Indicates that cache directory specified in
      |                       web.xml should be used.
      |  use-work-directory: Indicates that work directory specified in
      |                      web.xml should be used.
      |  directory: Specifies directory to use. Absolute or relative to the
      |             work directory.
      |
      | JispFilesystemStore configuration parameters:
      |  datafile: Name of the store file to use. Defaults to cocoon.dat
      |  indexfile: Name of the index file to use. Defaults to cocoon.idx
      |  order: FIXME: put description here.
      +-->
  <persistent-store class="org.apache.cocoon.components.store.JispFilesystemStore"
                    logger="core.store.persistent">
    <parameter name="use-cache-directory" value="true"/>
    <parameter name="order" value="2701"/>
  </persistent-store>

  <!--+
      | Store Janitor: the store garbage collector and memory usage controller.
      |
      | Be careful with the heapsize and freememory parameters. Wrong values can
      | cause high cpu usage. Example configuration:
      | Jvm settings:
      |    -Xmx200000000
      | store-janitor settings:
      |    <parameter name="freememory" value="5000000"/>
      |    <parameter name="heapsize" value="150000000"/>
      |
      | It is recommended to have heapsize equal to -Xmx, especially
      | on Sun's JVM which are unable to shrink its heap once it grows above minimum.
      | Freememory should be greater than amount of memory necessary for normal
      | application operation.
      +-->
  <store-janitor logger="core.store.janitor">
     <!-- How much free memory shall be available in the jvm -->
     <parameter name="freememory" value="1000000"/>
     <!-- Indicates the limit of the jvm memory consumption. The default max heapsize for Sun's JVM is 64Mb -->
     <parameter name="heapsize" value="67108864"/>
     <!-- How often shall the cleanup thread check memory -->
     <parameter name="cleanupthreadinterval" value="10"/>
     <!-- Indicates the thread priority of the cleanup thread -->
     <parameter name="threadpriority" value="5"/>
     <!-- How much percent of the elements of each registered Store shall be removed when low on memory. Default 10% -->
     <parameter name="percent_to_free" value="10"/>
  </store-janitor>

<!-- ========================= Protocol Handlers =========================== -->

  <!--+
      | Source Factories
      |
      | Each source factory adds a special uri protocol to the system.
      +-->
  <source-factories>
    <component-instance class="org.apache.excalibur.source.impl.ResourceSourceFactory" name="resource"/>
    <component-instance class="org.apache.cocoon.components.source.impl.ContextSourceFactory" name="context"/>
    <component-instance class="org.apache.cocoon.components.source.impl.SitemapSourceFactory" name="cocoon"/>
    <component-instance class="org.apache.cocoon.components.source.impl.FileSourceFactory" name="file"/>
    <component-instance class="org.apache.excalibur.source.impl.URLSourceFactory" name="*"/>
  </source-factories>


<!-- ====================== System Components =========================== -->

  <!--+
      | The core classloader implementation
      +-->
  <classloader class="org.apache.cocoon.components.classloader.ClassLoaderManagerImpl" logger="core.classloader"/>

  <!--+
      | XML compiler/decompiler
      |
      | these components are used to process SAX events and produce a binary
      | representation that is much more compact and efficient for
      | subsequent parsing. These are used by the cache system to save
      | the intermediate results of the pipeline stages reducing the overhead
      | of xml parsing/serialization.
      +-->
  <xml-serializer class="org.apache.cocoon.components.sax.XMLByteStreamCompiler" logger="core.xml-serializer" pool-grow="4" pool-max="32" pool-min="8"/>
  <xml-deserializer class="org.apache.cocoon.components.sax.XMLByteStreamInterpreter" logger="core.xml-deserializer" pool-grow="4" pool-max="32" pool-min="8"/>

  <!--+
      | The Monitor keeps track on changes to a Resource.
      +-->
  <monitor logger="core.monitor">
    <thread frequency="10000" priority="5"/>
  </monitor>

  <!--+
      | The Cache Manager is a component that can be used to cache content.
      | It is currently used by the cinclude transformer
      +-->
  <component class="org.apache.cocoon.transformation.helpers.DefaultIncludeCacheManager" role="org.apache.cocoon.transformation.helpers.IncludeCacheManager">
    <!-- Set the preemptive-loader-url to a pipeline inside Cocoon that contains the
         preemptive loader action. The URL must be absolute! 
    <parameter name="preemptive-loader-url" 
               value="http://localhost:8080/cocoon/samples/cinclude/loader"/>
    -->
 </component>


  <!-- Profiler:
    The profiler facilitates the gathering of statistics about timings of
    different steps of pipelines. Profiler consists of several components:
     profiling pipeline and profiler generator
    which are used to generate the profile report. You need to enable all of
    these components to use profiler.
    -->
  <profiler results="10"/>

</cocoon>
