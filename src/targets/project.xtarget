  <!-- =================================================================== -->
  <!-- Targets for this project                                            -->
  <!-- =================================================================== -->
  
    
  <!-- =================================================================== -->
  <!-- Prepares the docs                                                   -->
  <!-- =================================================================== -->
  <target name="prepare-docs" depends="init, cleandocs">

    <property name="centipede.tools.cents.forrest.loglevel" value="INFO"/> 
    <property name="use.skin" value="forrest-site"/> 
    
    <!-- define filters -->     
    <filter token="skin"              value="${use.skin}"/>
    <filter token="link1"             value="apache"/>
    <filter token="link1.href"        value="http://www.apache.org/"/>
    <filter token="link2"             value="xml.apache"/>
    <filter token="link2.href"        value="http://xml.apache.org/"/>
    <filter token="link3"             value="forrest"/>
    <filter token="link3.href"        value="http://xml.apache.org/forrest/"/>
    <filter token="group-logo.src"    value="images/group-logo.gif"/>
    <filter token="group-logo.href"   value="http://xml.apache.org/"/>
    <filter token="project-logo.src"  value="images/project-logo.gif"/>                    
    <filter token="project-logo.href" value="http://xml.apache.org/forrest/"/>                    
    <filter token="year" value="2002"/>  
    <filter token="vendor" value="Apache Sofware Foundation"/>  
    
        
    <mkdir dir="${build.context}"/>
    <mkdir dir="${build.docs}"/>
    <mkdir dir="${build.dir}/work"/>

   
    <!-- make filtered copy of XML docs -->
    <copy todir="${build.context}" filtering="on" overwrite="true">
      <fileset dir="${context.dir}" casesensitive="no">
        <include name="**/*.x*"/>
      </fileset>
    </copy>

    <!-- make non filtered copy of images -->
    <copy todir="${build.context}" filtering="off">
      <fileset dir="${context.dir}" casesensitive="no">
        <exclude name="**/*.x*"/>
      </fileset>
    </copy>
        
    <!-- Copy entity catalog and entities -->
    <copy todir="${build.context}/resources/schema" filtering="on">
      <fileset dir="${resource.dir}/schema"/>
    </copy>
    <mkdir dir="${build.context}/WEB-INF/classes"/>
    <move todir="${build.context}/WEB-INF/classes">
      <fileset dir="${build.context}/resources/schema">
        <include name="CatalogManager.properties"/>
      </fileset>
    </move>

    <!-- Copy Cocoon configuration and sitemap -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir="${context.dir}/conf">
        <include name="sitemap.xmap"/>
        <include name="cocoon.xconf"/>        
      </fileset> 
    </copy>

     <!-- Copy Cocoon configuration and sitemap -->
    <copy todir="${build.context}/WEB-INF/" filtering="on">
      <fileset dir="${context.dir}/conf">
        <exclude name="sitemap.xmap"/>
      </fileset> 
    </copy>
    
  </target>
  
  <!-- =================================================================== -->
  <!-- Prepares the docs to create a .war                                  -->
  <!-- =================================================================== -->
  <target name="webapp" depends="init, prepare-docs">
    <delete file="${build.context}/cocoon.xconf"/>
    <war warfile="${build.dir}/${name}.war" 
         webxml="${build.context}/WEB-INF/web.xml" 
         compress="true">

      <fileset dir="${build.context}">
        <exclude name="WEB-INF/web.xml"/>
      </fileset>
      <lib dir="lib/endorsed"/>
      <lib dir="lib/core"/>
      <lib dir="lib/optional"/>
      <classes dir="${build.context}/WEB-INF/classes/"/>
    
    </war>      
  
  </target>

  <target name="cleandocs" depends="init" description="* Cleans the build docs directories">
    <delete dir="${build.docs}"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Validate xml                                                        -->
  <!-- =================================================================== -->
  <target name="validate-docs" description="Checks that the xml files are valid and conform to the DTD.">
    <xmlvalidate failonerror="yes" lenient="yes" warn="yes" 
       className="org.apache.xerces.parsers.SAXParser">
     
       <classpath>      
         <fileset dir="./lib/endorsed">
           <include name="*.jar"/>
         </fileset>  
       </classpath>
         
       <fileset dir="." 
                includes="*.x*" excludes="build.xml"/>  
                       
     </xmlvalidate>
  </target>
  
    
  <!-- =================================================================== -->
  <!-- If generated  docs is already up-to-date, print a message saying so. -->
  <!-- =================================================================== -->
  <target name="making-docs">
    <echo message="-------------------------------------------------------------"/>
    <echo message="  Building docs, please stand by ..."/>
  </target>
  
  <!-- =================================================================== -->
  <!-- The documentation system                                            -->
  <!-- =================================================================== -->
  <target name="docs"
          depends="prepare-docs, making-docs"
          description="* Generates the documentation">

    <java classname="org.apache.cocoon.Main" fork="true" dir="${build.context}" failonerror="true">
      <arg value="-c."/>
      <arg value="-d../docs"/>
      <arg value="-w../work"/>
      <arg value="-l../work/cocoon.log"/>
      <arg value="-u${centipede.tools.cents.forrest.loglevel}"/>
      <arg value="index.html"/>
      <classpath>
        <path refid="classpath"/>
        <fileset dir="${build.dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${tools.dir}">
          <include name="*/lib/*.jar"/>
        </fileset>   
        <pathelement location="${tools.jar}"/>
        <pathelement location="${build.context}/WEB-INF/classes"/>
      </classpath>
    </java>

    <echo message="  ...docs generated succesfully in ./build/docs ."/>
    <echo message="-------------------------------------------------------------"/>
    
  </target>
  
  <!-- =================================================================== -->
  <!-- Creates the web site                                                -->
  <!-- =================================================================== -->
  <target name="site" depends="docs, javadocs"
      description="Generates the web site (for site maintainers only)">
    <mkdir dir="${site}"/>
    <copy todir="${site}" filtering="off">
      <fileset dir="${build.docs}">
      </fileset>
    </copy>
    <copy todir="${site}/apidocs" filtering="off">
      <fileset dir="${build.javadocs}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Set a variable if javadoc is already up-to-date.                    -->
  <!-- =================================================================== -->
  <target name="javadocs_check">
    <uptodate property="javadocs.notrequired" targetfile="${build.javadocs}/packages.html" >
      <srcfiles dir= "${build.src}" includes="**/*.java"/>
    </uptodate>
  </target>

  <!-- =================================================================== -->
  <!-- If javadoc is already up-to-date, print a message saying so.        -->
  <!-- =================================================================== -->
  <target name="javadocs_done" if="javadocs.notrequired">
    <echo message="-------------------------------------------------------------"/>
    <echo message="Not rebuilding Javadocs, as they are up-to-date:"/>
    <echo message="  ${build.javadocs}/packages.html is more recent than"/>
    <echo message="  ${build.src}/**/*.java"/>
    <echo message="-------------------------------------------------------------"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare-src, javadocs_check, javadocs_done"
      unless="javadocs.notrequired"
      description="* Generates the API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} ${fullname} project. All Rights Reserved."
             stylesheetfile="${resource.dir}/javadoc.css">
      <classpath refid="classpath"/>
    </javadoc>
  </target>
