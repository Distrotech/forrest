  <!-- =================================================================== -->
  <!-- Targets for this project                                            -->
  <!-- =================================================================== -->

  <target name="run" depends="init">

    <antcall target="runforrestrun">
      <param name="getcvsmodule.package"      value="jakarta-poi"/>
      <param name="getcvsmodule.work.dir"     value="${build.dir}/work/forrest/cvsmodule" />
      <param name="documentation.source.dir"  value="${build.dir}/work/forrest/cvsmodule/jakarta-poi/src/documentation"/>
      <param name="deploy.username"           value="forrestbot"/>
      <param name="deploy.package-name"       value="jakarta-poi"/>
      <param name="deploy.data.dir"           value="${build.dir}/docs"/>
      <param name="deploy.hostname"           value="krysalis.sourceforge.net"/>
      <param name="deploy.remotedir"          value="/home/groups/k/kr/krysalis/htdocs/poi"/>
    </antcall>

  </target>

  <target name="runforrestrun" depends="getcvsmodule, prepare-docs, owdocs, deploy"/>


  <target name="updateforrestsite" depends="init, docs, deployforrestsite, sendlog"/>

  <target name="deployforrestsite" depends="init, docs">
    <antcall target="deploy">
      <param name="deploy.username"     value="forrestbot"/>
      <param name="deploy.package-name" value="xml-forrest"/>
      <param name="deploy.data.dir"     value="${build.dir}/docs"/>
      <param name="deploy.hostname"     value="krysalis.sourceforge.net"/>
      <param name="deploy.remotedir"    value="/home/groups/k/kr/krysalis/htdocs/forrest"/>
    </antcall>
  </target>


  <!-- ================== -->
  <!-- Prepares the docs  -->
  <!-- ================== -->
  <target name="prepare-docs" depends="init, compile">

    <property name="centipede.tools.cents.forrest.loglevel" value="ERROR"/>
    <property name="use.skin" value="forrest-site"/>

    <property name="documentation.context.dir"  value="${resource.dir}"/>
    <property name="documentation.source.dir"   value="${context.dir}"/>

    <echo>Running docs generation from: ${documentation.source.dir}.</echo>

    <!-- define filters -->
    <filter token="skin"              value="${use.skin}"/>
    <filter token="link1"             value="apache"/>
    <filter token="link1.href"        value="http://www.apache.org/"/>
    <filter token="link2"             value="xml.apache"/>
    <filter token="link2.href"        value="http://xml.apache.org/"/>
    <filter token="link3"             value="forrest"/>
    <filter token="link3.href"        value="http://xml.apache.org/forrest/"/>
    <filter token="group-logo.src"    value="images/group-logo.gif"/>
    <filter token="group-logo.href"   value="http://xml.apache.org/"/>
    <filter token="group-logo.alt"    value="Apache XML logo"/>
    <filter token="project-logo.src"  value="images/project-logo.gif"/>
    <filter token="project-logo.href" value="http://xml.apache.org/forrest/"/>
    <filter token="project-logo.alt"  value="Forrest logo"/>
    <filter token="year" value="2002"/>
    <filter token="vendor" value="Apache Sofware Foundation"/>


    <mkdir dir="${build.context}"/>
    <mkdir dir="${build.docs}"/>
    <mkdir dir="${build.dir}/work"/>


    <!-- make filtered copy of XML docs -->
    <copy todir="${build.context}" filtering="on" overwrite="true">
      <fileset dir="${documentation.source.dir}" casesensitive="no">
        <include name="**/*.x*"/>
      </fileset>
    </copy>

    <!-- make non filtered copy of images -->
    <copy todir="${build.context}" filtering="off">
      <fileset dir="${documentation.source.dir}" casesensitive="no">
        <exclude name="**/*.x*"/>
      </fileset>
    </copy>

    <!-- Copy entity catalog, entities and class files -->
    <copy todir="${build.context}/resources/schema" filtering="on">
      <fileset dir="${resource.dir}/schema"/>
    </copy>
    <mkdir dir="${build.context}/WEB-INF/classes"/>
    <move todir="${build.context}/WEB-INF/classes">
      <fileset dir="${build.context}/resources/schema">
        <include name="CatalogManager.properties"/>
      </fileset>
      <fileset dir="${build.dest}">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${build.scratchpad.dest}">
        <include name="**/*.class"/>
      </fileset>
    </move>

    <!-- Copy Cocoon configuration and sitemap -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir="${documentation.context.dir}/conf">
        <include name="sitemap.xmap"/>
        <include name="cocoon.xconf"/>
      </fileset>
    </copy>
    <copy todir="${build.context}/WEB-INF/" filtering="on">
      <fileset dir="${documentation.context.dir}/conf">
        <exclude name="sitemap.xmap"/>
      </fileset>
    </copy>

    <!-- Copy libraries -->
    <copy todir="${build.context}/library/" filtering="on">
      <fileset dir="${documentation.context.dir}/library">

      </fileset>
    </copy>

    <!-- Copy skins -->
    <copy todir="${build.context}/skins/" filtering="on">
      <fileset dir="${documentation.context.dir}/skins">
        <exclude name="**/images/**"/>
      </fileset>
    </copy>
    <copy todir="${build.context}/skins/" filtering="off">
      <fileset dir="${documentation.context.dir}/skins">
        <include name="**/images/**"/>
      </fileset>
    </copy>

    <!-- Copy the project descriptor -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir=".">
        <include name="forrest.xgump"/>
      </fileset>
    </copy>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the docs to create a .war                                  -->
  <!-- =================================================================== -->
  <target name="webapp" depends="init, prepare-docs">
    <delete file="${build.context}/cocoon.xconf"/>
    <war warfile="${build.dir}/${name}.war"
         webxml="${build.context}/WEB-INF/web.xml"
         compress="true">

      <fileset dir="${build.context}">
        <exclude name="WEB-INF/web.xml"/>
      </fileset>
      <lib dir="lib/endorsed"/>
      <lib dir="lib/core"/>
      <lib dir="lib/optional"/>
      <lib dir="src/scratchpad/lib"/>
      <classes dir="${build.context}/WEB-INF/classes/"/>

    </war>

  </target>

  <target name="cleandocs" depends="init" description="* Cleans the build docs directories">
    <delete dir="${build.docs}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Validate xml                                                        -->
  <!-- =================================================================== -->
  <target name="validate-docs" description="Checks that the xml files are valid and conform to the DTD.">
    <xmlvalidate failonerror="yes" lenient="yes" warn="yes"
       className="org.apache.xerces.parsers.SAXParser">

       <classpath>
         <fileset dir="./lib/endorsed">
           <include name="*.jar"/>
         </fileset>
       </classpath>

       <fileset dir="."
                includes="*.x*" excludes="build.xml"/>

     </xmlvalidate>
  </target>


  <!-- =================================================================== -->
  <!-- The documentation system                                            -->
  <!-- =================================================================== -->
  <target name="docs"
          depends="cleandocs, owdocs"
          description="* Generates the documentation"/>

  <!-- =================================================================== -->
  <!-- The documentation system                                            -->
  <!-- =================================================================== -->
  <target name="owdocs"
          depends="prepare-docs"
          description="* Generates the documentation">

    <property name="dir.containing.docs" value="${build.context}"/>

    <echo message="-------------------------------------------------------------"/>
    <echo message="  Building docs, please stand by ..."/>

    <java classname="org.apache.cocoon.Main" fork="true" dir="${dir.containing.docs}" failonerror="true">
      <arg value="-c."/>
      <arg value="-d../docs"/>
      <arg value="-w../work"/>
      <arg value="-l../work/cocoon.log"/>
      <arg value="-u${centipede.tools.cents.forrest.loglevel}"/>
      <arg value="index.html"/>
      <classpath>
        <path refid="classpath"/>
        <fileset dir="${build.dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${tools.dir}">
          <include name="*/lib/*.jar"/>
        </fileset>
        <pathelement location="${tools.jar}"/>
        <pathelement location="${build.context}/WEB-INF/classes"/>
      </classpath>
    </java>

    <echo message="  ...docs generated successfully in ${build.docs}"/>
    <echo message="-------------------------------------------------------------"/>

  </target>

  <!-- =================================================================== -->
  <!-- Creates the web site                                                -->
  <!-- =================================================================== -->
  <target name="site" depends="docs, javadocs"
      description="Generates the web site (for site maintainers only)">
    <mkdir dir="${site}"/>
    <copy todir="${site}" filtering="off">
      <fileset dir="${build.docs}">
      </fileset>
    </copy>
    <copy todir="${site}/apidocs" filtering="off">
      <fileset dir="${build.javadocs}"/>
    </copy>
  </target>


  <target name="getcvsmodule" depends="init">

    <property name="getcvsmodule.work.dir" value="${build.dir}/work/forrest/cvsmodule" />
    <property name="getcvsmodule.package" value="xml-forrest" />

    <delete dir="${getcvsmodule.work.dir}"/>
    <mkdir dir="${getcvsmodule.work.dir}"/>

    <cvspass cvsroot=":pserver:anoncvs@jakarta.apache.org:/home/cvspublic"
            password="anoncvs"
     />

    <cvs cvsRoot=":pserver:anoncvs@cvs.apache.org:/home/cvspublic"
         package="${getcvsmodule.package}"
         dest="${getcvsmodule.work.dir}"
    />
  </target>

  <target name="deploy" unless="deploy.username, deploy.package-name
                                    deploy.data.dir, deploy.hostname, deploy.remotedir">
  <!--
    deploy.username
    deploy.package-name
    deploy.data.dir
    deploy.hostname
    deploy.remotedir
   -->

    <property name="deploy.work.dir"  value="${build.dir}/work/forrest/deploy/${deploy.package-name}"/>

    <delete dir="${deploy.work.dir}"/>
    <mkdir dir="${deploy.work.dir}"/>

    <property name="deploy.tar.fullpath"
              value="${deploy.work.dir}/${deploy.package-name}-deploy"/>

    <tar tarfile="${deploy.tar.fullpath}.tar" basedir="${deploy.data.dir}"/>
    <gzip zipfile="${deploy.tar.fullpath}.tar.gz" src="${deploy.tar.fullpath}.tar"/>
    <delete file="${deploy.tar.fullpath}.tar"/>

    <exec dir="." executable="scp">
      <!--<arg value="-oProtocol=1"/>-->
      <arg value="${deploy.tar.fullpath}.tar.gz"/>
      <arg value="${deploy.username}@${deploy.hostname}:${deploy.remotedir}"/>
    </exec>

    <exec dir="." executable="ssh">
      <arg line="-n ${deploy.hostname} -l ${deploy.username} 'cd ${deploy.remotedir};gunzip ${deploy.package-name}-deploy.tar.gz;tar xUvf ${deploy.package-name}-deploy.tar;chmod -R g+u *;rm ${deploy.package-name}-deploy.tar'"/>
    </exec>

    <delete file="${deploy.tar.fullpath}.tar.gz"/>

  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare-src"
      description="* Generates the API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} ${fullname} project. All Rights Reserved."
             stylesheetfile="${resource.dir}/javadoc.css">
      <classpath refid="classpath"/>
    </javadoc>
  </target>


  <target name="sendlog" depends="init" if="sendlog.to">

   <mail from="forrest-dev@xml.apache.org"
         tolist="${sendlog.to}"
         subject="[DO NOT REPLY] Building in the Forrest"
         files="forrestbot.log" />

  </target>


  <target name="testpoi" depends="init, testpoicvs, testpoigen, testpoideploy"/>


  <target name="testpoicvs" depends="init">

    <antcall target="getcvsmodule">
      <param name="getcvsmodule.package"  value="jakarta-poi"/>
      <param name="getcvsmodule.work.dir" value="${build.dir}/work/forrest/cvsmodule" />
    </antcall>

  </target>

  <target name="testpoigen" depends="init">

    <antcall target="prepare-docs">
      <param name="documentation.source.dir"  value="${build.dir}/work/forrest/cvsmodule/jakarta-poi/src/documentation"/>
    </antcall>

    <antcall target="owdocs"></antcall>

  </target>

  <target name="testpoideploy" depends="init">


    <antcall target="deploy">
      <param name="deploy.username"     value="forrestbot"/>
      <param name="deploy.package-name" value="jakarta-poi"/>
      <param name="deploy.data.dir"     value="${build.dir}/docs"/>
      <param name="deploy.hostname"     value="krysalis.sourceforge.net"/>
      <param name="deploy.remotedir"    value="/home/groups/k/kr/krysalis/htdocs/poi"/>
    </antcall>

  </target>
