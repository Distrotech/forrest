<?xml version="1.0"?>

<!--
FORREST SITE BUILDER

 - The runtime part of Forrest
 - Contains actions Forrest can peform on any Forrest-using project.
 - This is typically called by forrest.bat or forrest
-->


<project default="site" basedir="." name="forrest">

  <property name="version" value="0.5"/>

  <description>
    *=======================================================*
    |                 Forrest Site Builder                  |
    |                        0.6-dev                        |
    |             $Date: 2004/01/20 14:39:42 $              |
    *=======================================================*
  
             Call this through the 'forrest' command
  </description>
  
  <taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask">
    <classpath>
      <fileset dir="${forrest.home}/context/WEB-INF/lib" includes="*.jar" />
    </classpath>
  </taskdef>


<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                    COMMON SETTINGS                          ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->

  <!-- ===============================================================
       Loads user defined settings for local deployment.
       Steps back to defaults when they are not set.
       Echo's the settings if requested.
       =============================================================== -->
  <target name="init-props">
  
    <!-- setting defaults for parameters -->
    <!-- people should use -D switch, or <ant><property>s to override these   -->

    <property name="project.home" location="." />
    <property name="/" value="${file.separator}"/>
    <echo message="Loading project specific properties from ${project.home}${/}forrest.properties" />
    <property file="${project.home}/forrest.properties" />
    <echo message="Loading user specific properties from ${user.home}${/}forrest.properties" />
    <property file="${user.home}/forrest.properties" />
    <echo message="Loading default properties from ${forrest.home}${/}default-forrest.properties" />
    <property file="${forrest.home}/default-forrest.properties" />

    <!-- people should use forrest.properties to override following defaults  -->
    <property name="forrest.home"        location="." />
    <property name="forrest.skins-dir"   location="${forrest.home}/context/skins"/>   
    <property name="project.build-dir"   location="${project.home}/build"    />
    <property name="project.site-dir"    location="${project.build-dir}/site"    />
    <property name="project.war"         location="${project.build-dir}/${project.name}.war" />
    <property name="project.webapp"      location="${project.build-dir}/webapp" />
    <property name="project.index-dir"   location="${project.webapp}/lucene-index" />

    <property name="project.temp-dir"           location="${project.build-dir}/tmp"     />
    <property name="project.cocoon-work-dir"    location="${project.temp-dir}/cocoon-work"      />
    
    <property name="project.brokenlinkfile" location="${project.build-dir}/brokenlinks.xml"/>
    <property name="project.configfile"     value="${project.webapp}/WEB-INF/cli.xconf" />
    <property name="project.logkitfile"     value="${project.webapp}/WEB-INF/logkit.xconf" />
    <property name="project.logger"         value="" />

    <property name="status"      location="${project.home}/${project.status}" />

    <!-- FIXME: rename project.content-dir to project.documentation-dir -->
    <property name="content-dir" location="${project.home}/${project.content-dir}" />
    <property name="raw-content-dir" location="${project.home}/${project.content-dir}/content" />
    <property name="sitemap-dir"     location="${project.home}/${project.sitemap-dir}" />
    <property name="xdocs-dir"   location="${project.home}/${project.xdocs-dir}" />
    <property name="catalog"     location="${project.home}/${project.catalog}" />
    <property name="skins-dir"   location="${project.home}/${project.skins-dir}" />
    <property name="skinconf"    location="${project.home}/${project.skinconf}" />
    <property name="conf-dir"    location="${project.home}/${project.conf-dir}" />
    <property name="lib-dir"     location="${project.home}/${project.lib-dir}" />
    <property name="classes-dir" location="${project.home}/${project.classes-dir}" />
    <property name="translations-dir" location="${project.home}/${project.translations-dir}" />

    <!-- checks for presence of tools.jar -->
    <property name="tools.jar"           location="${java.home}/../lib/tools.jar"/>
    <available file="${tools.jar}"       property="tools.jar.present"/>

    <!-- Define filters for project.* properties -->
    <mkdir dir="${project.temp-dir}"/>
    <property name="projfilters" value="${project.temp-dir}/projfilters.properties"/>
    <echoproperties prefix="project" destfile="${projfilters}"/>
    <filter filtersfile="${projfilters}"/>
    <filter token="forrest.home" value="${forrest.home}"/>
    <filter token="project.home" value="${project.home}"/>
    <!-- echo settings in -Dforrest.echo=true mode -->
    <antcall target="echo-settings" />
  </target>
  
  <target name="examine-proj" depends="init-props">
    <available property="conf.present" file="${conf-dir}" type="dir"/>
    <available property="raw-content.present" file="${raw-content-dir}" type="dir"/>
    <available property="sitemap.present" file="${sitemap-dir}" type="dir"/>
    <available property="xdocs.present" file="${xdocs-dir}" type="dir"/>
    <available property="images.present" file="${images-dir}" type="dir"/>
    <available property="grammars.present" file="${grammars-dir}" type="dir"/>
    <available property="schema.present" file="${schema-dir}" type="dir"/>
    <available property="stylesheets.present" file="${stylesheets-dir}" type="dir"/>
    <available property="lib.present" file="${lib-dir}" type="dir"/>
    <available property="classes.present" file="${classes-dir}" type="dir"/>
    <available property="skins.present" file="${skins-dir}" type="dir"/>
    <available property="skinconf.present" file="${skinconf}"/>
    <available property="status.present" file="${status}"/>
  </target>

  <target name="validation-props" depends="examine-proj">
    <!-- Validation flags -->

    <property name="forrest.validate" value="true" />
    <condition property="validate">
      <istrue value="${forrest.validate}"/>
    </condition>
    <property name="forrest.validate.failonerror" value="true" />
    <property name="forrest.validate.includes" value="**/*"/>
    <property name="forrest.validate.excludes" value=""/>

    <property name="forrest.validate.xdocs" value="${forrest.validate}"/>
    <condition property="validate.xdocs">
      <and>
        <istrue value="${forrest.validate.xdocs}"/>
        <isset property="xdocs.present"/>
      </and>
    </condition>
    <property name="forrest.validate.xdocs.includes" value="**/*.xml"/>
    <property name="forrest.validate.xdocs.excludes" value="site.xml,.*.swp"/>
    <property name="forrest.validate.xdocs.failonerror"
      value="${forrest.validate.failonerror}" />

    <property name="forrest.validate.skinconf" value="${forrest.validate}"/>
    <condition property="validate.skinconf">
      <and>
        <istrue value="${forrest.validate.skinconf}"/>
        <isset property="skinconf.present"/>
      </and>
    </condition>
    <basename file="${skinconf}" property="skinconf-file"/>
    <property name="forrest.validate.skinconf.includes" value="${skinconf-file}"/>
    <property name="forrest.validate.skinconf.excludes" value=""/>
    <property name="forrest.validate.skinconf.failonerror"
      value="${forrest.validate.failonerror}" />

    <property name="forrest.validate.sitemap" value="${forrest.validate}"/>
    <condition property="validate.sitemap">
      <and>
        <istrue value="${forrest.validate.sitemap}"/>
        <isset property="sitemap.present"/>
      </and>
    </condition>

    <property name="forrest.validate.sitemap.includes" value=""/>
    <property name="forrest.validate.sitemap.excludes" value=""/>
    <property name="forrest.validate.sitemap.failonerror"
      value="${forrest.validate.failonerror}" />

    <property name="forrest.validate.stylesheets" value="${forrest.validate}"/>
    <condition property="validate.stylesheets">
      <and>
        <istrue value="${forrest.validate.stylesheets}"/>
        <isset property="stylesheets.present"/>
      </and>
    </condition>
    <property name="forrest.validate.stylesheets.includes" value="**/*.xsl"/>
    <property name="forrest.validate.stylesheets.excludes" value=""/>
    <property name="forrest.validate.stylesheets.failonerror"
      value="${forrest.validate.failonerror}" />

    <property name="forrest.validate.skins" value="${forrest.validate}"/>
    <condition property="validate.skins">
      <and>
        <istrue value="${forrest.validate.skins}"/>
        <isset property="skins.present"/>
      </and>
    </condition>
    <property name="forrest.validate.skins.includes" value="**/*"/>
    <property name="forrest.validate.skins.excludes" value="**/*.xsl"/>
    <property name="forrest.validate.skins.failonerror"
      value="${forrest.validate.failonerror}" />

    <property name="forrest.validate.skins.stylesheets" value="${forrest.validate.skins}"/>
    <condition property="validate.skins.stylesheets">
      <and>
        <istrue value="${forrest.validate.skins.stylesheets}"/>
        <isset property="skins.present"/>
      </and>
    </condition>
    <property name="forrest.validate.skins.stylesheets.includes" value="**/*.xsl"/>
    <property name="forrest.validate.skins.stylesheets.excludes" value=""/>
    <property name="forrest.validate.skins.stylesheets.failonerror"
      value="${forrest.validate.skins.failonerror}" />
  </target>


  <!-- Load properties from user's skinconf.xml, if it is defined -->
  <target name="load-project-props" depends="validation-props, validate-skinconf" if="skinconf.present">
    <xmlproperty file="${skinconf}" collapseattributes="true"
      validate="${validate.skinconf}"/>
  </target>

  <!-- Load properties from Forrest's default skinconf.xml, unless a user's is defined -->
  <target name="load-forrest-props" unless="skinconf.present">
    <xmlproperty file="${forrest.home}/context/skinconf.xml"
      collapseattributes="true" validate="true"/>
    <!-- Forrest skinconf should have been previously validated in buld.xml -->
  </target>

  <!-- Define filters equating to elements in the skinconf.xml file. Skins can
  include tokens corresponding to skinconf.xml elements, and have them replaced
  at runtime.-->
  <target name="init-skinprops" depends="load-project-props, load-forrest-props">
    <mkdir dir="${project.temp-dir}"/>
    <property name="skinfilters" value="${project.temp-dir}/skinfilters.properties"/>
    <echoproperties prefix="skinconfig" destfile="${skinfilters}"/>
    <filter filtersfile="${skinfilters}"/>
  </target>

  <!-- Sets up properties and filters -->
  <target name="init" depends="init-props, init-skinprops, init-skins"/>

  <!-- ===============================================================
       Echo's the settings if requested. [-Dforrest.echo=true]
       =============================================================== -->
  <target name="echo-settings" if="forrest.echo">
    <loadfile property="echo-settings-message" srcFile="${forrest.home}/var/echo-settings-message.txt">
       <filterchain><expandproperties/></filterchain>
    </loadfile>
    <echo>${echo-settings-message}</echo>
  </target>


  <!-- ===============================================================
       Set class-path.
       =============================================================== -->
  <target name="prepare-classpath" depends="prepare-context, -prepare-classpath"/>
  <target name="-prepare-classpath">
    <path id="forrest.cp">
      <pathelement location="${project.webapp}/WEB-INF/classes"/>
      <fileset dir="${project.webapp}/WEB-INF/lib" includes="*.jar"/>
      <pathelement location="${forrest.home}/context/WEB-INF/classes"/>
      <fileset dir="${forrest.home}/jetty" includes="servlet-2.3.jar"/>
      <fileset dir="${forrest.home}/lib/endorsed" includes="*.jar"/>
      <fileset dir="${forrest.home}/context/WEB-INF/lib" includes="*.jar" />
      <pathelement location="${tools.jar}"/>
    </path>
  </target>


<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                  SITE BUILDING ACTIONS                      ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->


  <!-- ===============================================================
       Fills the Cocoon context dir for local execution 
       with the forrest-predefines.
       param: name of the skin to use ${project.skin} (now)
       param: location to make temporary context-dir ${project.webapp} 
       =============================================================== -->
  <target name="bare-context" depends="init" >
    <echo>____________________________________</echo>
    <echo>Using skin ${project.skin}</echo>
    <echo>____________________________________</echo>
    <filter token="skin"              value="${project.skin}" />
    <filter token="menu-scheme"       value="${project.menu-scheme}" />
    <filter token="bugtracking-url"   value="${project.bugtracking-url}" />
    <filter token="local-catalog"     value="${catalog}" />
    <filter token="catalog-verbosity" value="${forrest.catalog.verbosity}" />
    <filter token="i18n"              value="${project.i18n}" />

    <copy todir="${project.webapp}/" >
      <fileset dir="${forrest.home}/context" >
        <exclude name="*.xmap" />
        <exclude name="skins/**" />
        <exclude name="resources/**" />        
        <exclude name="WEB-INF/*.xconf" />
      </fileset>
    </copy>

    <copy todir="${project.webapp}/" filtering="true" overwrite="true">
      <fileset dir="${forrest.home}/context" >
        <include name="*.xmap" />
        <include name="WEB-INF/*.xconf" />
        <exclude name="WEB-INF/cocoon-live.xconf"/>
      </fileset>
    </copy>

    <!--Hack to stop the classpath definition breaking. If the project has any
    custom jars or classes, they will be added to these dirs -->
    <mkdir dir="${project.webapp}/WEB-INF/lib"/>
    <mkdir dir="${project.webapp}/WEB-INF/classes"/>
  </target>

  <!-- ===============================================================
       Fills the Cocoon context dir to work in 
       with the project-content-parts 
         (now: copy stuff from param ${content-dir}
          with siteplan: based on that plan; should allow more different parts)
       param: location to find the content ${content-dir}(now)
       param: location to find project descriptors == ${project.home} 
       param: location to make temporary context-dir ${project.webapp} 
       =============================================================== -->
  <target name="project-context" depends="examine-proj, ensure-content,
    validate, init, bare-context, copy-sitemap, copy-conf, copy-lib, 
    copy-classes, copy-skinconf, copy-status"/>

  <target name="copy-conf" if="conf.present">
    <copy toDir="${project.webapp}/WEB-INF" filtering="true"
      overwrite="true" failonerror="false">
      <fileset dir="${conf-dir}">
        <exclude name="*-${version}.xconf"/>
      </fileset>
    </copy>
    <copy toDir="${project.webapp}/WEB-INF" filtering="true" overwrite="true"
      failonerror="false">
      <fileset dir="${conf-dir}">
        <include name="*-${version}.*"/>
      </fileset>
      <mapper type="glob" from="*-${version}.xconf" to="*.xconf"/>
    </copy>
   </target>

  <target name="copy-sitemap" if="sitemap.present">
    <copy toDir="${project.webapp}" filtering="true" overwrite="true" failonerror="false">
      <fileset dir="${sitemap-dir}">
        <exclude name="*-${version}.xmap"/>
        <include name="*.xmap"/>
        <include name="jtidy.properties"/>
      </fileset>
    </copy>
    <copy toDir="${project.webapp}" filtering="true" overwrite="true">
      <fileset dir="${sitemap-dir}">
        <include name="*-${version}.xmap"/>
      </fileset>
      <mapper type="glob" from="*-${version}.xmap" to="*.xmap"/>
    </copy>
  </target>

  <target name="copy-lib" if="lib.present">
    <copy toDir="${project.webapp}/WEB-INF/lib" 
      overwrite="true" failonerror="false">
      <fileset dir="${lib-dir}"/>
    </copy>
  </target>

  <target name="copy-classes" if="classes.present">
    <copy toDir="${project.webapp}/WEB-INF/classes" 
      overwrite="true" failonerror="false">
      <fileset dir="${classes-dir}"/>
    </copy>
  </target>

  <target name="copy-skinconf" if="skinconf.present">
    <copy file="${skinconf}"
      toDir="${project.webapp}" 
      overwrite="true" failonerror="false"/>
  </target>

  <target name="copy-status" if="status.present">
    <copy file="${status}" todir="${project.webapp}" />
  </target>

  <!-- ===============================================================
       Makes the Cocoon context dir to work in and fills it completely.
       That is by depending on:
         bare-context     // for forrest predefines.  
         project-context  // for project's actual content
           (now: copy stuff from extra param defining the content dir
            with siteplan: based on that)
         control-context  // for derivatives from siteplan 
           (now: no need, waiting on siteplan future)
            with siteplan: e.g. sitemap and catalog)
       param: name of the skin to use ${project.skin} (now)
       param: location to find the content ${content-dir}(now)
       param: location to make temporary context-dir ${project.webapp} 
       =============================================================== -->
  <target name="prepare-context" depends="init, bare-context, project-context" />


  <!-- ===============================================================
       Cleans the site.  (typically before generating the new version)
       param: location to clean ${project.site-dir}
       param: location to clean ${project.temp-dir}
       param: location to clean ${project.webapp}
       param: file to clean ${project.brokenlinkfile}
       =============================================================== -->
  <target name="clean-site" depends="init-props" description="Clean all directories and files generated during the build">
    <delete failonerror="false" dir="${project.site-dir}"/>
    <delete failonerror="false" dir="${project.temp-dir}"/>
    <delete failonerror="false" dir="${project.webapp}"/>
    <delete failonerror="false" file="${project.brokenlinkfile}"/>
  </target>
  
  <!-- ===============================================================
       Checks if the current project contains Forrest docs, and sets
       the 'project.empty' property if no docs are found.
       =============================================================== -->
  <target name="check-contentdir" depends="init-props">
    <available property="project.content.present" file="${content-dir}"
      type="dir"/>
  </target>

  <target name="ensure-nocontent" depends="check-contentdir"
    if="project.content.present" unless="skip.contentcheck">
    <fail>
------------------------------------------------
This project already has content in ${content-dir}.

Run with '-Dskip.contentcheck=yes' to ignore existing content.
------------------------------------------------
    </fail>
  </target>

  <target name="ensure-content" depends="check-contentdir"
    unless="project.content.present">
    <fail>
------------------------------------------------
This project has no content in ${content-dir}.
Use the 'seed' target to create a template project structure.
------------------------------------------------
    </fail>
  </target>

  <!-- ===============================================================
       Makes the site.
       param: name of the skin to use ${project.skin} (now)
       param: location to find the content ${content-dir}(now)
       param: location to make temporary context-dir ${project.webapp} 
       param: location to make temporary cocoon-work-dir ${content-dir}
       param: debuglevel for logging ${project.debuglevel}
       param: location of log-file ${project.logkitfile}
       ===============================================================
   -->

   <target name="site" depends="init, webapp, -prepare-classpath" if="project.content.present"
     description="Generates a static HTML website for this project">
    <!-- clean out the temp space, if we don't cocoon fails on this.
         actually clears the cache, not yet sure why it is really needed? -->
    <delete dir="${project.cocoon-work-dir}"/>
    <mkdir dir="${project.cocoon-work-dir}"/>

    <parallel>
      <!--
      <java classname="org.apache.cocoon.Main"
        fork="true"
        maxmemory="${forrest.maxmemory}"
        dir="."
        failonerror="true"
        classpathref="forrest.cp">
        <jvmarg line="${forrest.jvmargs}"/>
        <jvmarg
          value="-Djava.endorsed.dirs=${forrest.home}/lib/endorsed${path.separator}${java.endorsed.dirs}"/>
        <arg value="-c${project.webapp}"/>   <!- input to the process ->
        <arg value="-d${project.site-dir}"/>   <!- output to be put ->
        <arg value="-w${project.cocoon-work-dir}"/>   <!- temp dir to use for e.g. cache ->
        <arg value="-u${project.debuglevel}"/> <!- threshold for log messages ->
        <arg value="-C${project.webapp}/WEB-INF/cocoon.xconf"/>      <!- cocoon.xconf file to use ->
        <arg value="-b${project.brokenlinkfile}"/>  <!- output list of broken links ->
        <arg value="-k${project.webapp}/WEB-INF/logkit.xconf"/>  <!- output list of broken links ->
        <arg value="${project.start-uri}"/>              <!- starting page ->
        <arg value="-V" />                          <!- be verbose ->
      </java>
      -->

      <java classname="org.apache.cocoon.Main"
        fork="true"
        dir="${project.webapp}"
        failonerror="true"
        maxmemory="${forrest.maxmemory}">
        <jvmarg line="${forrest.jvmargs}"/>
        <jvmarg value="-Djava.endorsed.dirs=${forrest.home}/lib/endorsed${path.separator}${java.endorsed.dirs}"/>
        <arg value="--logLevel=${project.debuglevel}"/>
        <arg value="--Logger=${project.logger}"/>
        <arg value="--logKitconfig=${project.logkitfile}"/>
        <arg value="--destDir=${project.site-dir}"/>
        <arg value="--xconf=${project.configfile}"/>
        <arg value="${project.start-uri}"/>
        <classpath>
          <path refid="forrest.cp"/>
        </classpath>
      </java> 


      <sequential>
        <!-- 
        | Copy all non-xdocs content across, as we cannot rely on crawling to
        | discover the whole URI space.  Note: we are emulating the sitemap here;
        | please ensure they keep in synch.
        -->
        <copy toDir="${project.site-dir}" 
          overwrite="true" failonerror="false">
            <fileset dir="${content-dir}/content"> <!-- FIXME: what about raw-content-dir? -->
              <exclude name="xdocs/**"/> <!-- FIXME: should use properties since they can be overridden in forrest.properties -->
            </fileset>
          <fileset dir="${project.webapp}/resources" includes="images"/>
        </copy>

        <!-- Copy skin images -->
        <mkdir dir="${project.site-dir}/skin/images"/>
         <!-- FIXME: we will only be using either project skins or forrest skins - only copy those necessary (don't forget common) -->
         <!-- Copy forrest skin images -->
        <copy toDir="${project.site-dir}/skin/images" overwrite="true"
          failonerror="false">
           <fileset dir="${forrest.skins-dir}/common/images"/>
           <fileset dir="${forrest.skins-dir}/${project.skin}/images"/>
        </copy>
        <!-- Copy project skin images -->
        <copy toDir="${project.site-dir}/skin/images" overwrite="true"
          failonerror="false">
          <fileset dir="${project.skins-dir}/common/images"/>
          <fileset dir="${project.skins-dir}/${project.skin}/images"/>
        </copy>
 

        <!-- Copy all other non-resource files -->
        <copy toDir="${project.site-dir}/skin" 
          overwrite="true"
          failonerror="false">
          <mapper type="flatten"/>
          <fileset dir="${forrest.skins-dir}/common">
            <exclude name="images/**"/>
            <exclude name="xslt/**"/>
          </fileset>
          <fileset dir="${forrest.skins-dir}/${project.skin}">
            <exclude name="images/**"/>
            <exclude name="xslt/**"/>
          </fileset>
        </copy>
        
        <!-- Copy all other non-resource files from project skins-->
        <copy toDir="${project.site-dir}/skin" 
          overwrite="true"
          failonerror="false">
          <mapper type="flatten"/>
          <fileset dir="${project.skins-dir}/common">
            <exclude name="images/**"/>
            <exclude name="xslt/**"/>
          </fileset>
          <fileset dir="${project.skins-dir}/${project.skin}">
            <exclude name="images/**"/>
            <exclude name="xslt/**"/>
          </fileset>
        </copy>
        <!-- This place is our last chance to give them help messages.
             Hopefully Cocoon won't issue messages until these tasks are done.
         -->
        <echo>
Static site will be generated at:
${project.site-dir}

Note that there are various reasons for "build failed" messages.
* Cocoon will report the status of each document:
  - in column 1: *=okay X=brokenLink ^=pageSkipped (see FAQ).
* Even if only one link is broken, you will still get "failed".
* Your site would still be generated, but some pages would be broken.
* Please check the file:
${project.brokenlinkfile}
for any broken links in the generated site.
        </echo>
      </sequential>
    </parallel>
    <echo>------------------------------
Static site was successfully generated at:
${project.site-dir}
------------------------------
    </echo>
  </target>

  <!-- ===============================================================
       Prepares the Lucene context indexing the site. [RPR]
       =============================================================== -->
  <target name="lucene-index" depends="init, -prepare-classpath" if="use-lucene-indexer">
    <java classname="org.apache.forrest.search.ForrestIndexer"
      dir="${project.webapp}"
      fork="true"
      failonerror="true"
      maxmemory="${forrest.maxmemory}">
      <jvmarg line="${forrest.jvmargs}"/>
      <jvmarg value="-Djava.endorsed.dirs=${forrest.home}/lib/endorsed${path.separator}${java.endorsed.dirs}"/>
      <arg line="-index ${project.index-dir}"/>
      <arg value="${xdocs-dir}"/>
      <classpath>
        <path refid="forrest.cp"/>
      </classpath>
    </java>
  </target>

  <target name="project.webapp.defined" unless="project.webapp">
    <fail>
      ------------------------------------------------
      Error: $${project.webapp} variable has not been set. This is where the
      webapp will be assembled. Please define it in the calling script.
      ------------------------------------------------
    </fail>
  </target>

  <!-- ===============================================================
       Builds a cocoon webapp for local execution.
       Note, this webapp is not suitable for deploying remotely as it
       is configured to allow editing of files in the ${project.home} 
       directory.
       param: location to put generated webapp ${project.webapp}
       =============================================================== -->
  <target name="webapp-local" depends="init, validate, project.webapp.defined, ensure-content, prepare-context,
         load-project-props"
   description="Generates a dynamic servlet-based website (an unpackaged webapp).
   Note this webapp is suitable for local execution only, use the 'webapp'
   target if you wish to deploy remotely.">
    <!-- this will need revisions in the case of the siteplan
    extra project-custom classes then will need to be warred in as well. -->
    <mkdir dir="${project.webapp}/WEB-INF"/>
    <copy file="${forrest.home}/context/WEB-INF/web.xml" filtering="true" 
      todir="${project.webapp}/WEB-INF"/>

    <copy todir="${project.webapp}/WEB-INF">
      <!-- Note: no overwriting, so user's libs and classes get preference -->
      <fileset dir="${forrest.home}/context/WEB-INF">
        <include name="lib/**"/>
        <include name="classes/**"/>
      </fileset>
    </copy>

    <!-- Copy XML jars if not running JDK 1.4 (where they're built-in) -->
    <available property="jdk1.4+" classname="java.lang.CharSequence"/>
    <copy todir="${project.webapp}/WEB-INF/lib">
      <fileset dir="${forrest.home}/lib/endorsed">
        <include name="*jar" unless="jdk1.4+"/>
      </fileset>
    </copy>
    <!-- Prepare the Lucene search index -->
    <!-- FIXME: There must be a better way to configure this.
         Is this really a concern of the skinconf?
         The indexer must be off by default. If the optional skinconf parameter
         "disable-lucene" is missing or false, then off. 
    -->
    <condition property="use-lucene-indexer">
      <!-- sorry for the convolution -->
      <and>
        <isset property="skinconfig.disable-lucene"/>
        <isfalse value="${skinconfig.disable-lucene}"/>
      </and>
    </condition>
    <antcall target="lucene-index"/>

    <loadfile  property="webapp-local-generated-message" srcFile="${forrest.home}/var/webapp-local-generated-message.txt">
        <filterchain><expandproperties/></filterchain>
    </loadfile>
    <echo>${webapp-local-generated-message}</echo>
  </target>

  <!-- ===============================================================
       Builds a cocoon webapp of your project for remote deployment.
       param: location to put generated webapp ${project.webapp}
       =============================================================== -->
  <target name="webapp" depends="webapp-local, copy-xdocs, copy-content"
   description="Generates a dynamic servlet-based website (an unpackaged webapp).">
   
   <!-- 
    | Copy all non-xdocs content across to the webapp
   -->
   <copy toDir="${project.webapp}" 
     overwrite="true" failonerror="false">
     <fileset dir="${content-dir}/content">
       <exclude name="xdocs/**"/>
     </fileset>
   </copy>
   <copy toDir="${project.webapp}/resources" 
     overwrite="true" failonerror="false">
     <fileset dir="${content-dir}/resources"/>
   </copy>

   <!-- Copy Skins -->
   <!-- Copy forrest skin images -->
   <copy toDir="${project.webapp}/skin/common/images" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/common/images"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/images" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/${project.skin}/images"/>
   </copy>
   <!-- Copy project skin images -->
   <copy toDir="${project.webapp}/skin/common/images" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/common/images"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/images" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/${project.skin}/images"/>
   </copy>
 
   <!-- Copy forrest skin XSLT files -->
   <copy toDir="${project.webapp}/skin/common/xslt" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/common/xslt"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/xslt" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/${project.skin}/xslt"/>
   </copy>
   <!-- Copy project skin XSLT files -->
   <copy toDir="${project.webapp}/skin/common/xslt" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/common/xslt"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/xslt" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/${project.skin}/xslt"/>
   </copy>
 
   <!-- Copy forrest skin CSS files -->
   <copy toDir="${project.webapp}/skin/common/css" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/common/css"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/css" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/${project.skin}/css"/>
   </copy>
   <!-- Copy project skin CSS files -->
   <copy toDir="${project.webapp}/skin/common/css" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/common/css"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/css" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/${project.skin}/css"/>
   </copy>
 
   <!-- Copy all other non-resource files from Forrest skins -->
   <copy toDir="${project.webapp}/skin/common" 
     overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/common">
       <exclude name="images/**"/>
       <exclude name="xslt/**"/>
       <exclude name="css/**"/>
     </fileset>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}" 
     overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/${project.skin}">
       <exclude name="images/**"/>
       <exclude name="xslt/**"/>
       <exclude name="css/**"/>
     </fileset>
   </copy>
        
   <!-- Copy all other non-resource files from project skins-->
   <copy toDir="${project.webapp}/skin/common" 
      overwrite="true"
      failonerror="false">
      <fileset dir="${project.skins-dir}/common">
        <exclude name="images/**"/>
        <exclude name="xslt/**"/>
        <exclude name="css/**"/>
      </fileset>
    </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}" 
      overwrite="true"
      failonerror="false">
      <fileset dir="${project.skins-dir}/${project.skin}">
        <exclude name="images/**"/>
        <exclude name="xslt/**"/>
        <exclude name="css/**"/>
      </fileset>
    </copy>
   
    <!-- copy custom xmaps -->
    <copy toDir="${project.webapp}" 
      overwrite="true"
      failonerror="false">
      <fileset dir="${project.content-dir}">
        <include name="*.xmap"/>
      </fileset>
    </copy>
    
    <!-- copy skinconf -->
    <copy toDir="${project.webapp}" 
      overwrite="true"
      failonerror="false"
      file="${skinconf}"/>
    
    <!-- copy Schemas -->
    <copy toDir="${project.webapp}/resources"
      overwrite="true"
      failonerror="false">
      <fileset dir="${forrest.home}/context/resources"/>
    </copy>
    
    <!-- Change the filter tokens for cocoon.xconf.
         Note that we don't need to change the
         forrest filters since either these are the same as for the local
         webapp or their values can be fixed in the cocoon.xconf template. -->
    <!-- FIXME: Do these tokens need to be customisable via forrest.properties? -->
    <filter token="project.home" value="."/>
    <filter token="project.skins-dir" value="skin"/>
    <filter token="project.skinconf" value="../../../../skinconf.xml"/>
    <filter token="project.content-dir" value="."/>
    <filter token="project.raw-content-dir" value="content"/>
    <filter token="project.xdocs-dir" value="content/xdocs"/>
    <filter token="project.translations-dir" value="translations"/>
    <filter token="project.stylesheets-dir" value="resources/stylesheets"/>
    <filter token="project.images-dir" value="resources/images"/>
    <filter token="local-catalog" value="resources/schema/catalog.xcat"/>
      
    <copy tofile="${project.webapp}/WEB-INF/cocoon.xconf" 
      filtering="true" 
      overwrite="true"
      file="${forrest.home}/context/WEB-INF/cocoon-live.xconf" />
    
    <loadfile  property="webapp-generated-message" 
      srcFile="${forrest.home}/var/webapp-generated-message.txt">
        <filterchain><expandproperties/></filterchain>
    </loadfile>
    <echo>${webapp-generated-message}</echo>
  </target>

  <!-- ===============================================================
       Builds a cocoon .war for your project based on the siteplan.
       param: location to put generated war ${project.war}
       =============================================================== -->
 <target name="war" depends="webapp"
   description="Generates a dynamic servlet-based website (an packaged .war file)">

   <jar destfile="${project.war}" basedir="${project.webapp}"/>
   <echo>
---------------------------------
Webapp .war file generated:
${project.war}
---------------------------------
   </echo>
  </target>

  <target name="copy-xdocs" if="xdocs.present">
    <sync toDir="${project.webapp}/content/xdocs">
      <fileset dir="${xdocs-dir}"/>
    </sync>
  </target>
  
  <!-- Copy all non-xdocs content -->
  <target name="copy-content" if="raw-content.present">
    <copy toDir="${project.webapp}/content" 
      overwrite="false" failonerror="false">
      <fileset dir="${raw-content-dir}">
        <exclude name="${xdocs-dir}/**"/>
      </fileset>
    </copy>
  </target>

<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **          PROJECT-TEMPLATE BUILDING ACTIONS                  ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->



  <!-- ===============================================================
        Copies a template structure over to your project dir.
       =============================================================== -->
  <target name="seed" depends="ensure-nocontent"
    description="Seeds a directory with a template project doc structure">
     <copy todir="${project.home}" overwrite="false">
        <fileset dir="${forrest.home}/fresh-site"/>
     </copy>
     <loadfile  property="template-project-created-message" srcFile="${forrest.home}/var/template-project-created-message.txt">
        <filterchain><expandproperties/></filterchain>
    </loadfile>
    <echo>${template-project-created-message}</echo>
  </target>


  <target name="validate" depends="validation-props, validate-xdocs,
    validate-skinconf, validate-sitemap, validate-skins, validate-skinchoice,
    validate-stylesheets"  description="Validates XML doc files in the project"/>

  <target name="validate-site" depends="load-project-props">
    <condition property="forrest.validate.skinconf.disable-xml-link">
      <and>
        <istrue value="${skinconfig.disable-xml-link}"/>
      </and>
    </condition>
    <fail if="forrest.validate.skinconf.disable-xml-link">
---------------------------------------     
${skinconfig.project-name} have disable-xml-link
please change it on ${skinconf} 
to validate this site.
---------------------------------------     
    </fail>
    <xmlvalidate failonerror="${forrest.validate.site.failonerror}" lenient="no" warn="yes">
      <attribute name="http://apache.org/xml/features/validation/dynamic"  value="true"/>
      <xmlcatalog>
        <catalogpath>
          <pathelement
            location="${forrest.home}/context/resources/schema/catalog.xcat"/>
          <pathelement location="${catalog}"/>
        </catalogpath>
      </xmlcatalog>
      <fileset dir="${project.site-dir}"
        includes="${forrest.validate.xdocs.includes}"
        excludes="${forrest.validate.xdocs.excludes}"/>
    </xmlvalidate>
    <echo message="...validated site"/>
  </target>

  <target name="validate-xdocs" depends="validation-props" if="validate.xdocs">
    <xmlvalidate failonerror="${forrest.validate.xdocs.failonerror}" lenient="no" warn="yes">
      <attribute name="http://apache.org/xml/features/validation/dynamic"  value="true"/>
      <xmlcatalog>
        <catalogpath>
          <pathelement
            location="${forrest.home}/context/resources/schema/catalog.xcat"/>
          <pathelement location="${catalog}"/>
        </catalogpath>
      </xmlcatalog>
      <fileset dir="${xdocs-dir}"
        includes="${forrest.validate.xdocs.includes}"
        excludes="${forrest.validate.xdocs.excludes}"/>
    </xmlvalidate>
    <echo message="...validated xdocs"/>
  </target>

  <target name="validate-skinconf" depends="validation-props"
    if="validate.skinconf">
    <!--
    <jing compactSyntax="true"
      rngfile="${forrest.home}/context/resources/schema/relaxng/skinconf.rnc">
      <fileset dir="${content-dir}"
        includes="${forrest.validate.skinconf.includes}"
        excludes="${forrest.validate.skinconf.excludes}"/>
    </jing>
    <echo message="...validated skinconf"/>
    -->
  </target>

  <target name="validate-sitemap" depends="validation-props"
    if="validate.sitemap">
    <available property="version-specific-sitemap" file="${sitemap-dir}/forrest-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/aggregate-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/dtd-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/faq-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/forrest-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/issues-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/linkmap-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/menu-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/profiler-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/raw-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/resources-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/revisions-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/sitemap-${version}.xmap" type="file"/>
    <available property="version-specific-sitemap" file="${sitemap-dir}/status-${version}.xmap" type="file"/>

    <jing rngfile="${forrest.home}/context/resources/schema/relaxng/sitemap-v06.rng">
      <fileset dir="${content-dir}"
        includes="${forrest.validate.sitemap.includes}"
        excludes="${forrest.validate.sitemap.excludes}">
        <include name="*.xmap" unless="version-specific-sitemap"/>
        <include name="*-${version}.xmap" if="version-specific-sitemap"/>
      </fileset>
    </jing>
    <echo message="...validated sitemap"/>
  </target>

  <target name="validate-stylesheets" depends="validation-props"
    if="validate.stylesheets">
    <jing rngfile="${forrest.home}/context/resources/schema/relaxng/xslt.rng">
      <fileset dir="${stylesheets-dir}"
        includes="${forrest.validate.stylesheets.includes}"
        excludes="${forrest.validate.stylesheets.excludes}" />
    </jing>
    <echo message="...validated stylesheets"/>
  </target>

  <target name="validate-skins" depends="validate-skins-stylesheets"/>

  <target name="validate-skins-stylesheets" depends="validation-props"
    if="validate.skins.stylesheets">
    <jing rngfile="${forrest.home}/context/resources/schema/relaxng/xslt.rng">
      <fileset dir="${skins-dir}"
        includes="${forrest.validate.skins.stylesheets.includes}"
        excludes="${forrest.validate.skins.stylesheets.excludes}"/>
    </jing>
    <echo message="...validated skin stylesheets"/>
  </target>

  <!-- Check that ${project.skin} points to an existing skin. -->
  <target name="validate-skinchoice">
    <condition property="project.skin.present">
      <available file="${project.skin}" type="dir">
        <filepath path="${skins-dir}"/>
        <filepath path="${forrest.skins-dir}"/>
      </available>
    </condition>

    <loadfile property="skin-not-found-message" srcFile="${forrest.home}/var/skin-not-found-message.txt">
      <filterchain><expandproperties/></filterchain>
    </loadfile>
      
    <fail unless="project.skin.present">
      ${skin-not-found-message}
    </fail>
    <echo message="...validated existence of skin '${project.skin}'"/>
  </target>
  
  
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **              LOCAL SERVER RUN ACTION                        ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->


  <target name="run" 
   description="Run Jetty with configuration set by the jetty.run property"
   depends="webapp-local">

    <java classname="org.mortbay.jetty.Server"
          dir="${project.webapp}"
          fork="yes"
          maxmemory="${forrest.maxmemory}"
          failonerror="yes">
       <classpath>
         <pathelement path="${env.CLASSPATH}" />
         <fileset dir="${forrest.home}/jetty">
           <include name="*.jar"/>
           <include name="*.JAR"/>
           <include name="*.zip"/>
           <include name="*.ZIP"/>
         </fileset>
         <fileset dir="${forrest.home}/lib/endorsed">
           <include name="*.jar"/>
           <include name="*.JAR"/>
           <include name="*.zip"/>
           <include name="*.ZIP"/>
         </fileset>         
         <fileset dir="${forrest.home}/lib/optional">
           <include name="*.jar"/>
           <include name="*.JAR"/>
           <include name="*.zip"/>
           <include name="*.ZIP"/>
         </fileset>
       </classpath>
       <jvmarg line="${forrest.jvmargs}"/>
       <jvmarg
         value="-Djava.endorsed.dirs=${java.endorsed.dirs}${path.separator}${forrest.home}/lib/endorsed"/>
       <arg line="jettyconf.xml" />
    </java>
  </target>  


<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **              SKIN PACKAGES                                  ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
  
  <!-- public targets -->     
     
    <target name="available-skins"
          depends="init-props, skin-unavailable, fetch-skins-descriptor"
          description="What skins are available?">
    <xslt in="${forrest.skins-dir}/skins.xml" 
          out="${project.temp-dir}/skinlist2echobuild.xml"
          style="${forrest.home}/var/skinlist2echo.xsl"/>  
    <ant antfile="${project.temp-dir}/skinlist2echobuild.xml"/>
  </target>  
  
  <target name="package-skin" description="Make a package of an existing skin" depends="init-props">
    <input message="Which skin do you want to package?"
           addproperty="skin-name"/>
    <zip destfile="${forrest.skins-dir}/${skin-name}-${version}.zip"
       basedir="${forrest.skins-dir}/"
       includes="${skin-name}/**"/>
  </target>

  <target name="install-skin" 
          depends = "init-skins"
          description="Install the needed skin from the remote repository"/>
          
  <!-- private -->        
                
  <target name="init-skins" depends="init-props, check-skin, fetch-skin, unpack-skins"/>   

  <target name="skin-unavailable">   
    <property name="skin.unavailable" value="true"/>
  </target>  
  
  <target name="check-skin">   
    <condition property="skin.unavailable">
      <and>
        <not>
          <available type="dir" file="${forrest.skins-dir}/${project.skin}"/>
        </not>
        <not>
          <available type="file" file="${forrest.skins-dir}/${project.skin}.zip"/>
        </not>
        <not>
          <available type="dir" file="${skins-dir}/${project.skin}"/>
        </not>        
      </and>
    </condition>
  </target>  
            
  <target name="unpack-skins"
          depends="init-props">
     <unzip dest="${forrest.skins-dir}/">
       <fileset dir="${forrest.skins-dir}/">
          <include name="*.zip"/>
        </fileset>
     </unzip>       
     <delete>
        <fileset dir="${forrest.skins-dir}/">
          <include name="*.zip"/>
        </fileset>
     </delete>
  </target>  

  <target name="fetch-skins-descriptor"
          if = "skin.unavailable">
      <get src="http://xml.apache.org/forrest/skins/skins.xml" 
           dest="${forrest.skins-dir}/skins.xml"
           verbose="true" usetimestamp="true" ignoreerrors="false"/>
  </target>  
  
  <target name="fetch-skin" 
          if = "skin.unavailable"
          depends="init-props, fetch-skins-descriptor">
    <xslt in="${forrest.skins-dir}/skins.xml" 
          out="${project.temp-dir}/skinlist2fetchbuild.xml"
          style="${forrest.home}/var/skinlist2fetch.xsl"
          force="true">
      <param name="skin-name" expression="${project.skin}"/>      
      <param name="forrest-version" expression="${version}"/>   
    </xslt>  
    <ant antfile="${project.temp-dir}/skinlist2fetchbuild.xml"/>
  </target>    
  
  
</project>
