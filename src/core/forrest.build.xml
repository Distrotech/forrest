<?xml version="1.0"?>

<!--
FORREST SITE BUILDER

 - The runtime part of Forrest
 - Contains actions Forrest can peform on any Forrest-using project.
 - This is typically called by forrest.bat or forrest
-->


<project default="site" basedir="." name="forrest">

  <property name="version" value="0.6-dev"/>

  <import file="targets/validate.xml"/>
  <import file="targets/webapp.xml"/>
  <import file="targets/war.xml"/>
  <import file="targets/site.xml"/>
  <import file="targets/skins.xml"/>
 
  <description>
    *=======================================================*
    |                 Forrest Site Builder                  |
    |                        0.6-dev                        |
    |             $Date: 2004/02/09 03:00:39 $              |
    *=======================================================*
  
             Call this through the 'forrest' command
  </description>
  
  <taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask">
    <classpath>
      <fileset dir="${forrest.home}/lib/core" includes="jing*.jar" />
    </classpath>
  </taskdef>
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <fileset dir="${forrest.home}/lib/core" includes="ant-contrib-*.jar" />
    </classpath>
  </taskdef>

<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                    COMMON SETTINGS                          ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->

  <!-- ===============================================================
       Loads user defined settings for local deployment.
       Steps back to defaults when they are not set.
       Echo's the settings if requested.
       =============================================================== -->
  <target name="init-props">
  
    <!-- setting defaults for parameters -->
    <!-- people should use -D switch, or <ant><property>s to override these   -->
 
    <property name="project.home" location="." />
    <property name="/" value="${file.separator}"/>
    <echo message="Loading project specific properties from ${project.home}${/}forrest.properties" />
    <property file="${project.home}/forrest.properties" />
    <echo message="Loading user specific properties from ${user.home}${/}forrest.properties" />
    <property file="${user.home}/forrest.properties" />
    <echo message="Loading default properties from ${forrest.home}${/}default-forrest.properties" />
    <property file="${forrest.home}/default-forrest.properties" />

    <!-- people should use forrest.properties to override following defaults  -->
    <property name="forrest.home"        location="." />
    <property name="forrest.skins-dir"   location="${forrest.home}/context/skins"/>   
    <property name="project.build-dir"   location="${project.home}/build"    />
    <property name="project.site-dir"    location="${project.build-dir}/site"    />
    <property name="project.war"         location="${project.build-dir}/${project.name}.war" />
    <property name="project.webapp"      location="${project.build-dir}/webapp" />
    <property name="project.index-dir"   location="${project.webapp}/lucene-index" />

    <property name="project.temp-dir"           location="${project.build-dir}/tmp"     />
    <property name="project.cocoon-work-dir"    location="${project.temp-dir}/cocoon-work"      />
    
    <property name="project.brokenlinkfile" location="${project.build-dir}/brokenlinks.xml"/>
    <property name="project.configfile"     value="${project.webapp}/WEB-INF/cli.xconf" />
    <property name="project.logkitfile"     value="${project.webapp}/WEB-INF/logkit.xconf" />
    <property name="project.logger"         value="" />

    <property name="status"      location="${project.home}/${project.status}" />

    <!-- FIXME: rename project.content-dir to project.documentation-dir -->
    <property name="content-dir" location="${project.home}/${project.content-dir}" />
    <property name="raw-content-dir" location="${project.home}/${project.content-dir}/content" />
    <property name="sitemap-dir"     location="${project.home}/${project.sitemap-dir}" />
    <property name="xdocs-dir"   location="${project.home}/${project.xdocs-dir}" />
    <property name="catalog"     location="${project.home}/${project.catalog}" />
    <property name="skins-dir"   location="${project.home}/${project.skins-dir}" />
    <property name="skinconf"    location="${project.home}/${project.skinconf}" />
    <property name="conf-dir"    location="${project.home}/${project.conf-dir}" />
    <property name="lib-dir"     location="${project.home}/${project.lib-dir}" />
    <property name="classes-dir" location="${project.home}/${project.classes-dir}" />
    <property name="translations-dir" location="${project.home}/${project.translations-dir}" />

    <!-- checks for presence of tools.jar -->
    <property name="tools.jar"           location="${java.home}/../lib/tools.jar"/>
    <available file="${tools.jar}"       property="tools.jar.present"/>

    <!-- Define filters for project.* properties -->
    <mkdir dir="${project.temp-dir}"/>
    <property name="projfilters" value="${project.temp-dir}/projfilters.properties"/>
    <echoproperties prefix="project" destfile="${projfilters}"/>
    <filter filtersfile="${projfilters}"/>
    <filter token="forrest.home" value="${forrest.home}"/>
    <filter token="project.home" value="${project.home}"/>

    <!-- These are used by Forrest to resolve all other values -->
    <property name="forrest.basic.jvmargs" value="-Dproject.home=&quot;${project.home}&quot; -Dforrest.home=&quot;${forrest.home}&quot;"/>
    <echo>forrest.basic.jvmargs:${forrest.basic.jvmargs}</echo>
        
    <!-- echo settings in -Dforrest.echo=true mode -->
    <antcall target="echo-settings" />
  </target>
  
  <target name="examine-proj" depends="init-props">
    <available property="conf.present" file="${conf-dir}" type="dir"/>
    <available property="raw-content.present" file="${raw-content-dir}" type="dir"/>
    <available property="sitemap.present" file="${sitemap-dir}" type="dir"/>
    <available property="xdocs.present" file="${xdocs-dir}" type="dir"/>
    <available property="images.present" file="${images-dir}" type="dir"/>
    <available property="grammars.present" file="${grammars-dir}" type="dir"/>
    <available property="schema.present" file="${schema-dir}" type="dir"/>
    <available property="stylesheets.present" file="${stylesheets-dir}" type="dir"/>
    <available property="lib.present" file="${lib-dir}" type="dir"/>
    <available property="classes.present" file="${classes-dir}" type="dir"/>
    <available property="skins.present" file="${skins-dir}" type="dir"/>
    <available property="skinconf.present" file="${skinconf}"/>
    <available property="status.present" file="${status}"/>
  </target>

  

  <!-- Load properties from user's skinconf.xml, if it is defined -->
  <target name="load-project-props" depends="validation-props, validate-skinconf" if="skinconf.present">
    <xmlproperty file="${skinconf}" collapseattributes="true"
      validate="${validate.skinconf}"/>
  </target>

  <!-- Load properties from Forrest's default skinconf.xml, unless a user's is defined -->
  <target name="load-forrest-props" unless="skinconf.present">
    <xmlproperty file="${forrest.home}/context/skinconf.xml"
      collapseattributes="true" validate="true"/>
    <!-- Forrest skinconf should have been previously validated in buld.xml -->
  </target>

  <!-- Define filters equating to elements in the skinconf.xml file. Skins can
  include tokens corresponding to skinconf.xml elements, and have them replaced
  at runtime.-->
  <target name="init-skinprops" depends="load-project-props, load-forrest-props">
    <mkdir dir="${project.temp-dir}"/>
    <property name="skinfilters" value="${project.temp-dir}/skinfilters.properties"/>
    <echoproperties prefix="skinconfig" destfile="${skinfilters}"/>
    <filter filtersfile="${skinfilters}"/>
  </target>

  <!-- Sets up properties and filters -->
  <target name="init" depends="init-props, init-skinprops, init-skins"/>

  <!-- ===============================================================
       Echo's the settings if requested. [-Dforrest.echo=true]
       =============================================================== -->
  <target name="echo-settings" if="forrest.echo">
    <loadfile property="echo-settings-message" srcFile="${forrest.home}/var/echo-settings-message.txt">
       <filterchain><expandproperties/></filterchain>
    </loadfile>
    <echo>${echo-settings-message}</echo>
  </target>


  <!-- ===============================================================
       Set class-path.
       =============================================================== -->
  <target name="prepare-classpath" depends="prepare-context, -prepare-classpath"/>
  <target name="-prepare-classpath">
    <path id="forrest.cp">
         <pathelement path="${env.CLASSPATH}" />
         <pathelement location="${forrest.home}/context/WEB-INF/classes"/>
         <fileset dir="${forrest.home}/tools/jetty">
           <include name="*.jar"/>
           <include name="*.JAR"/>
           <include name="*.zip"/>
           <include name="*.ZIP"/>
         </fileset>
         <fileset dir="${forrest.home}/lib/endorsed">
           <include name="*.jar"/>
           <include name="*.JAR"/>
           <include name="*.zip"/>
           <include name="*.ZIP"/>
         </fileset>         
         <fileset dir="${forrest.home}/lib/core">
           <include name="*.jar"/>
           <include name="*.JAR"/>
           <include name="*.zip"/>
           <include name="*.ZIP"/>
         </fileset>       
         <fileset dir="${forrest.home}/lib/optional">
           <include name="*.jar"/>
           <include name="*.JAR"/>
           <include name="*.zip"/>
           <include name="*.ZIP"/>
         </fileset>
         <pathelement location="${tools.jar}"/>
    </path>
  </target>


<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                  SITE BUILDING ACTIONS                      ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->


  <!-- ===============================================================
       Fills the Cocoon context dir for local execution 
       with the forrest-predefines.
       param: name of the skin to use ${project.skin} (now)
       param: location to make temporary context-dir ${project.webapp} 
       =============================================================== -->
  <target name="bare-context" depends="init" >
    <echo>____________________________________</echo>
    <echo>Using skin ${project.skin}</echo>
    <echo>____________________________________</echo>
    <filter token="skin"              value="${project.skin}" />
    <filter token="menu-scheme"       value="${project.menu-scheme}" />
    <filter token="bugtracking-url"   value="${project.bugtracking-url}" />
    <filter token="local-catalog"     value="${catalog}" />
    <filter token="catalog-verbosity" value="${forrest.catalog.verbosity}" />
    <filter token="i18n"              value="${project.i18n}" />

    <copy todir="${project.webapp}/" >
      <fileset dir="${forrest.home}/context" >
        <exclude name="*.xmap" />
        <exclude name="skins/**" />
        <exclude name="resources/**" />        
        <exclude name="WEB-INF/*.xconf" />
        <exclude name="jettyconf.xml" />
      </fileset>
    </copy>

    <copy todir="${project.webapp}/" filtering="true" overwrite="true">
      <fileset dir="${forrest.home}/context" >
        <include name="*.xmap" />
        <include name="WEB-INF/*.xconf" />
        <exclude name="WEB-INF/cocoon-live.xconf"/>
      </fileset>
    </copy>

    <!--Hack to stop the classpath definition breaking. If the project has any
    custom jars or classes, they will be added to these dirs -->
    <mkdir dir="${project.webapp}/WEB-INF/lib"/>
    <mkdir dir="${project.webapp}/WEB-INF/classes"/>
  </target>

  <!-- ===============================================================
       Fills the Cocoon context dir to work in 
       with the project-content-parts 
         (now: copy stuff from param ${content-dir}
          with siteplan: based on that plan; should allow more different parts)
       param: location to find the content ${content-dir}(now)
       param: location to find project descriptors == ${project.home} 
       param: location to make temporary context-dir ${project.webapp} 
       =============================================================== -->
  <target name="project-context" depends="examine-proj, ensure-content,
    validate, init, bare-context, copy-sitemap, copy-conf, copy-skinconf, copy-status"/>

  <target name="copy-conf" if="conf.present">
    <copy toDir="${project.webapp}/WEB-INF" filtering="true"
      overwrite="true" failonerror="false">
      <fileset dir="${conf-dir}">
        <exclude name="*-${version}.xconf"/>
      </fileset>
    </copy>
    <copy toDir="${project.webapp}/WEB-INF" filtering="true" overwrite="true"
      failonerror="false">
      <fileset dir="${conf-dir}">
        <include name="*-${version}.*"/>
      </fileset>
      <mapper type="glob" from="*-${version}.xconf" to="*.xconf"/>
    </copy>
   </target>

  <target name="copy-sitemap" if="sitemap.present">
    <copy toDir="${project.webapp}" filtering="true" overwrite="true" failonerror="false">
      <fileset dir="${sitemap-dir}">
        <exclude name="*-${version}.xmap"/>
        <include name="*.xmap"/>
        <include name="jtidy.properties"/>
      </fileset>
    </copy>
    <copy toDir="${project.webapp}" filtering="true" overwrite="true">
      <fileset dir="${sitemap-dir}">
        <include name="*-${version}.xmap"/>
      </fileset>
      <mapper type="glob" from="*-${version}.xmap" to="*.xmap"/>
    </copy>
  </target>

  <target name="copy-skinconf" if="skinconf.present">
    <copy file="${skinconf}"
      toDir="${project.webapp}" 
      overwrite="true" failonerror="false"/>
  </target>

  <target name="copy-status" if="status.present">
    <copy file="${status}" todir="${project.webapp}" />
  </target>

  <!-- ===============================================================
       Makes the Cocoon context dir to work in and fills it completely.
       That is by depending on:
         bare-context     // for forrest predefines.  
         project-context  // for project's actual content
           (now: copy stuff from extra param defining the content dir
            with siteplan: based on that)
         control-context  // for derivatives from siteplan 
           (now: no need, waiting on siteplan future)
            with siteplan: e.g. sitemap and catalog)
       param: name of the skin to use ${project.skin} (now)
       param: location to find the content ${content-dir}(now)
       param: location to make temporary context-dir ${project.webapp} 
       =============================================================== -->
  <target name="prepare-context" depends="init, bare-context, project-context" />


  <!-- ===============================================================
       Cleans the site.  (typically before generating the new version)
       param: location to clean ${project.site-dir}
       param: location to clean ${project.temp-dir}
       param: location to clean ${project.webapp}
       param: file to clean ${project.brokenlinkfile}
       =============================================================== -->
  <target name="clean" depends="init-props" description="Clean all directories and files generated during the build">
    <delete failonerror="false" dir="${project.site-dir}"/>
    <delete failonerror="false" dir="${project.temp-dir}"/>
    <delete failonerror="false" dir="${project.webapp}"/>
    <delete failonerror="false" file="${project.brokenlinkfile}"/>
  </target>
  <target name="clean-site" depends="clean"/>
  
  <!-- ===============================================================
       Checks if the current project contains Forrest docs, and sets
       the 'project.empty' property if no docs are found.
       =============================================================== -->
  <target name="check-contentdir" depends="init-props">
    <available property="project.content.present" file="${content-dir}"
      type="dir"/>
  </target>

  <target name="ensure-nocontent" depends="check-contentdir"
    if="project.content.present" unless="skip.contentcheck">
    <fail>
------------------------------------------------
This project already has content in ${content-dir}.

Run with '-Dskip.contentcheck=yes' to ignore existing content.
------------------------------------------------
    </fail>
  </target>

  <target name="ensure-content" depends="check-contentdir"
    unless="project.content.present">
    <fail>
------------------------------------------------
This project has no content in ${content-dir}.
Use the 'seed' target to create a template project structure.
------------------------------------------------
    </fail>
  </target>

 
  <!-- ===============================================================
       Prepares the Lucene context indexing the site. [RPR]
       =============================================================== -->
  <target name="lucene-index" depends="init, -prepare-classpath" if="use-lucene-indexer">
    <java classname="org.apache.forrest.search.ForrestIndexer"
      dir="${project.webapp}"
      fork="true"
      failonerror="true"
      maxmemory="${forrest.maxmemory}">
      <jvmarg line="${forrest.jvmargs}"/>
      <jvmarg line="${forrest.basic.jvmargs}"/>
      <jvmarg value="-Djava.endorsed.dirs=${forrest.home}/lib/endorsed${path.separator}${java.endorsed.dirs}"/>
      <arg line="-index ${project.index-dir}"/>
      <arg value="${xdocs-dir}"/>
      <classpath>
        <path refid="forrest.cp"/>
      </classpath>
    </java>
  </target>




  
 

<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **          PROJECT-TEMPLATE BUILDING ACTIONS                  ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->



  <!-- ===============================================================
        Copies a template structure over to your project dir.
       =============================================================== -->
  <target name="seed" depends="ensure-nocontent"
    description="Seeds a directory with a template project doc structure">
     <copy todir="${project.home}" overwrite="false">
        <fileset dir="${forrest.home}/fresh-site"/>
     </copy>
     <loadfile  property="template-project-created-message" srcFile="${forrest.home}/var/template-project-created-message.txt">
        <filterchain><expandproperties/></filterchain>
    </loadfile>
    <echo>${template-project-created-message}</echo>
  </target>



  
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **              LOCAL SERVER RUN ACTION                        ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->


  <target name="run" 
   depends="webapp-local, run_custom_jetty, run_default_jetty"/>
 
  <target name="run_custom_jetty"
   if="custom_jetty_config"
   description="Run Jetty with configuration file found in the project">
    <java classname="org.mortbay.jetty.Server"
          dir="${project.webapp}"
          fork="yes"
          maxmemory="${forrest.maxmemory}"
          failonerror="yes">
       <classpath>
         <path refid="forrest.cp"/>
       </classpath>
       <jvmarg line="${forrest.jvmargs}"/>
       <jvmarg line="${forrest.basic.jvmargs}"/>
       <jvmarg
         value="-Djava.endorsed.dirs=${java.endorsed.dirs}${path.separator}${forrest.home}/lib/endorsed"/>
       <arg line="${content-dir}/jettyconf.xml" />
    </java>
  </target>
  
  <target name="run_default_jetty"
   description="Run Jetty with configuration file found in Forrest"
   depends="webapp-local">
    <java classname="org.mortbay.jetty.Server"
          dir="${project.webapp}"
          fork="yes"
          maxmemory="${forrest.maxmemory}"
          failonerror="yes">
       <classpath>
         <path refid="forrest.cp"/>
       </classpath>
       <jvmarg line="${forrest.jvmargs}"/>
       <jvmarg line="${forrest.basic.jvmargs}"/>
       <jvmarg
         value="-Djava.endorsed.dirs=${java.endorsed.dirs}${path.separator}${forrest.home}/lib/endorsed"/>
       <arg line="${forrest.home}/context/jettyconf.xml" />
    </java>
  </target>  


</project>
