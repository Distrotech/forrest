<?xml version="1.0"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project default="webapp" basedir="." name="webapp">
  
    <target name="project.webapp.defined" unless="project.webapp">
    <fail>
      ------------------------------------------------
      Error: $${project.webapp} variable has not been set. This is where the
      webapp will be assembled. Please define it in the calling script.
      ------------------------------------------------
    </fail>
  </target>
  
  <!-- ===============================================================
       Builds a cocoon webapp for local execution.
       Note, this webapp is not suitable for deploying remotely as it
       is configured to allow editing of files in the ${project.home} 
       directory.
       param: location to put generated webapp ${project.webapp}
       =============================================================== -->
  
<target name="webapp-local" depends="init, validate, project.webapp.defined, ensure-content, prepare-context,
         load-project-props"
   description="Generates a dynamic servlet-based website (an unpackaged webapp).
   Note this webapp is suitable for local execution only, use the 'webapp'
   target if you wish to deploy remotely.">
    <!-- this will need revisions in the case of the siteplan
    extra project-custom classes then will need to be warred in as well. -->
    <mkdir dir="${project.webapp}/WEB-INF"/>
    <copy file="${forrest.home}/context/WEB-INF/web.xml" filtering="true" 
      todir="${project.webapp}/WEB-INF"/>

    <!-- Prepare the Lucene search index -->
    <!-- FIXME: There must be a better way to configure this.
         Is this really a concern of the skinconf?
         The indexer must be off by default. If the optional skinconf parameter
         "disable-lucene" is missing or false, then off. 
    -->
    <condition property="use-lucene-indexer">
      <!-- sorry for the convolution -->
      <and>
        <isset property="skinconfig.disable-lucene"/>
        <isfalse value="${skinconfig.disable-lucene}"/>
      </and>
    </condition>
    <antcall target="lucene-index"/>
    
    <available file="${content-dir}/jettyconf.xml" 
      property="custom_jetty_config"/>

    <loadfile  property="webapp-local-generated-message" srcFile="${forrest.home}/var/webapp-local-generated-message.txt">
        <filterchain><expandproperties/></filterchain>
    </loadfile>
    <echo>${webapp-local-generated-message}</echo>
  </target>
  



<!-- ===============================================================
       Builds a cocoon webapp of your project for remote deployment.
       param: location to put generated webapp ${project.webapp}
       =============================================================== -->
  <target name="webapp" depends="webapp-local, copy-xdocs, copy-content"
   description="Generates a dynamic servlet-based website (an unpackaged webapp).">
   
   <!--
     Copy libs
   -->
    <copy toDir="${project.webapp}/WEB-INF/lib" 
      overwrite="true" failonerror="false">
      <fileset dir="${lib-dir}"/>
    </copy>

    <copy toDir="${project.webapp}/WEB-INF/classes" 
      overwrite="true" failonerror="false">
      <fileset dir="${classes-dir}"/>
    </copy>
  
    <copy todir="${project.webapp}/WEB-INF">
    <!-- Note: no overwriting, so user's libs and classes get preference -->
      <fileset dir="${forrest.home}/context/WEB-INF">
        <include name="lib/**"/>
        <include name="classes/**"/>
      </fileset>
    </copy>

    <!-- Copy XML jars if not running JDK 1.4 (where they're built-in) -->
    <available property="jdk1.4+" classname="java.lang.CharSequence"/>
    <copy todir="${project.webapp}/WEB-INF/lib">
      <fileset dir="${forrest.home}/lib/endorsed">
        <include name="*jar" unless="jdk1.4+"/>
      </fileset>
    </copy>
       
   <!-- 
    | Copy all non-xdocs content across to the webapp
   -->
   <copy toDir="${project.webapp}" 
     overwrite="true" failonerror="false">
     <fileset dir="${content-dir}">
       <exclude name="content/xdocs/**"/>
     </fileset>
   </copy>

   <!-- Copy Skins -->
   <!-- Copy forrest skin images -->
   <copy toDir="${project.webapp}/skin/common/images" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/common/images"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/images" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/${project.skin}/images"/>
   </copy>
   <!-- Copy project skin images -->
   <copy toDir="${project.webapp}/skin/common/images" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/common/images"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/images" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/${project.skin}/images"/>
   </copy>
 
   <!-- Copy forrest skin XSLT files -->
   <copy toDir="${project.webapp}/skin/common/xslt" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/common/xslt"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/xslt" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/${project.skin}/xslt"/>
   </copy>
   <!-- Copy project skin XSLT files -->
   <copy toDir="${project.webapp}/skin/common/xslt" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/common/xslt"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/xslt" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/${project.skin}/xslt"/>
   </copy>
 
   <!-- Copy forrest skin CSS files -->
   <copy toDir="${project.webapp}/skin/common/css" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/common/css"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/css" overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/${project.skin}/css"/>
   </copy>
   <!-- Copy project skin CSS files -->
   <copy toDir="${project.webapp}/skin/common/css" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/common/css"/>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}/css" overwrite="true"
     failonerror="false">
     <fileset dir="${project.skins-dir}/${project.skin}/css"/>
   </copy>
 
   <!-- Copy all other non-resource files from Forrest skins -->
   <copy toDir="${project.webapp}/skin/common" 
     overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/common">
       <exclude name="images/**"/>
       <exclude name="xslt/**"/>
       <exclude name="css/**"/>
     </fileset>
   </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}" 
     overwrite="true"
     failonerror="false">
     <fileset dir="${forrest.skins-dir}/${project.skin}">
       <exclude name="images/**"/>
       <exclude name="xslt/**"/>
       <exclude name="css/**"/>
     </fileset>
   </copy>
        
   <!-- Copy all other non-resource files from project skins-->
   <copy toDir="${project.webapp}/skin/common" 
      overwrite="true"
      failonerror="false">
      <fileset dir="${project.skins-dir}/common">
        <exclude name="images/**"/>
        <exclude name="xslt/**"/>
        <exclude name="css/**"/>
      </fileset>
    </copy>
   <copy toDir="${project.webapp}/skin/${project.skin}" 
      overwrite="true"
      failonerror="false">
      <fileset dir="${project.skins-dir}/${project.skin}">
        <exclude name="images/**"/>
        <exclude name="xslt/**"/>
        <exclude name="css/**"/>
      </fileset>
    </copy>
   
    <!-- copy custom xmaps -->
    <copy toDir="${project.webapp}" 
      overwrite="true"
      failonerror="false">
      <fileset dir="${project.content-dir}">
        <include name="*.xmap"/>
      </fileset>
    </copy>
    
    <!-- copy skinconf -->
    <copy toDir="${project.webapp}" 
      overwrite="true"
      failonerror="false"
      file="${skinconf}"/>
    
    <!-- copy Schemas -->
    <copy toDir="${project.webapp}/resources"
      overwrite="true"
      failonerror="false">
      <fileset dir="${forrest.home}/context/resources"/>
    </copy>
    
    <!-- Change the filter tokens for cocoon.xconf.
         Note that we don't need to change the
         forrest filters since either these are the same as for the local
         webapp or their values can be fixed in the cocoon.xconf template. -->
    <!-- FIXME: Do these tokens need to be customisable via forrest.properties? -->
    <filter token="project.home" value="."/>
    <filter token="project.skins-dir" value="skin"/>
    <filter token="project.skinconf" value="../../../../skinconf.xml"/>
    <filter token="project.content-dir" value="."/>
    <filter token="project.raw-content-dir" value="content"/>
    <filter token="project.xdocs-dir" value="content/xdocs"/>
    <filter token="project.translations-dir" value="translations"/>
    <filter token="project.stylesheets-dir" value="resources/stylesheets"/>
    <filter token="project.images-dir" value="resources/images"/>
    <filter token="local-catalog" value="resources/schema/catalog.xcat"/>
      
    <copy tofile="${project.webapp}/WEB-INF/cocoon.xconf" 
      filtering="true" 
      overwrite="true"
      file="${forrest.home}/context/WEB-INF/cocoon-live.xconf" />
    
    <loadfile  property="webapp-generated-message" 
      srcFile="${forrest.home}/var/webapp-generated-message.txt">
        <filterchain><expandproperties/></filterchain>
    </loadfile>
    <echo>${webapp-generated-message}</echo>
  </target>
    <target name="copy-xdocs" if="xdocs.present">
    <sync toDir="${project.webapp}/content/xdocs">
      <fileset dir="${xdocs-dir}"/>
    </sync>
  </target>
  
  <!-- Copy all non-xdocs content -->
  <target name="copy-content" if="raw-content.present">
    <copy toDir="${project.webapp}/content" 
      overwrite="false" failonerror="false">
      <fileset dir="${raw-content-dir}">
        <exclude name="${xdocs-dir}/**"/>
      </fileset>
    </copy>
  </target>
</project>