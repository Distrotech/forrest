<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN"
"document-v11.dtd">

<document>
  <header>
    <title>Using Forrest</title>
    <subtitle>A tutorial on how to use Forrest in your own projects</subtitle>
    <version>$Revision: 1.17 $</version>
    <authors>
      <person name="Jeff Turner" email="jefft@apache.org"/>
    </authors>
  </header>

  <body>
    <section>
      <title>Introduction</title>
      <p>
        This tutorial will lead you through the process of installing Forrest, and using
        it to create a new project, or add Forrest-based docs to an existing project.
      </p>
    </section>

    <section>
      <title>Getting the Forrest source</title>
      <p>
        Currently, the primary way to get Forrest is through CVS. Please consult <link
          href="primer.html#cvs">The Forrest Primer</link> for a description of what
     this involves.</p>
   <p>Here is how to get Forrest with a shell-based CVS client:</p>
     <source>
~/apache$ export CVSROOT=:pserver:anoncvs@cvs.apache.org:/home/cvspublic
~/apache$ cvs login
Logging in to :pserver:anoncvs@cvs.apache.org:2401/home/cvspublic
CVS password: 
~/apache$ cvs checkout xml-forrest
U xml-forrest/.cvsignore
U xml-forrest/appendcp.bat
U xml-forrest/build-old.xml
U xml-forrest/build.bat
....
     </source>
   </section>
   <section>
     <title>Building and Installing Forrest</title>
     <p>
       To build Forrest, type <code>build dist</code> on Windows, or <code>./build.sh
         dist</code> on Unix. If everything is successful, you should see a message
       like this:
     </p>
     <source>
  *-----------------------------------------------------------------
  | installation notice 
  *-----------------------------------------------------------------
  | You have succesfully built the shell-bat distribution of forrest.
  | Please find it at: ./build/dist/shbat
  | Please copy the contents to the install directory of your choice
  | Please have the environment variable FORREST_HOME point to it.
  | It is recommended to add
  |    unix: $FORREST_HOME/bin: to your $PATH
  |    win: %FORREST_HOME%\bin; to your %PATH%
  | Calling
  |    unix: $FORREST_HOME/bin/forrest -projecthelp
  |    win: %FORREST_HOME%\bin\forrest -projecthelp
  | Will list options for the forrest command
  | More help at http://xml.apache.org/forrest and forrest-dev@xml.apache.org
  *-----------------------------------------------------------------
     </source>
     <p>
       You now have the binary distribution built in <code>build/dist/shbat</code>.
       Copy it somewhere more sensible if you like (eg
       <code>/usr/local/forrest</code> on Unix), though if you intend to update your
       Forrest from CVS, leaving it where it is would be best.</p>
     <p>
       As the message says, you need to add the distribution's <code>bin/</code>
       ("binary") directory to your PATH variable, so the <code>'forrest'</code>
       command is available everywhere:
     </p>
     <source>
~/apache/xml-forrest$ export FORREST_HOME=`pwd`/build/dist/shbat
~/apache/xml-forrest$ export PATH=$PATH:$FORREST_HOME/bin
     </source>
     <p>
       To see what the forrest command can do, type 'forrest -projecthelp'
     </p>
     <source>
Apache Forrest.  Run 'forrest -projecthelp' to list options

Buildfile: /home/jeff/apache/xml/xml-forrest/build/dist/shbat/bin/../forrest.build.xml

    *=======================================================*
    |                Forrest Site Builder                   |
    *=======================================================*
                              by
                  Marc Portier (mpo@apache.org)
                  Jeff Turner (jefft@apache.org)
  
        Call this through the 'forrest' command
  
Main targets:

 seed      Seeds a directory with a template project doc structure
 site      Generates a static HTML website for this project
 validate  Validates XML doc files in the project
 war       Generates a dynamic servlet-based website (an packaged .war file)
 webapp    Generates a dynamic servlet-based website (an unpackaged webapp)

Default target: site
      </source>
      <p>
        As 'site' is the default target, just running 'forrest' without options will
        generate a "static HTML website". For example, typing 'forrest' in the
       xml-forrest directory would build Forrest's own website. But we're going to be
       building a new site, so read on.
      </p>
    </section>
    <section>
      <title>Seeding a new project</title>
      <p>
        'Seeding' a project is our own arborial term for adding a template
        documentation set to your project, which you can then customize.
      </p>
      <p>
        To try this out, create a completely new directory, and type 'forrest seed':
      </p>
      <source>
~/apache/xml-mysite$ forrest seed
Apache Forrest.  Run 'forrest -projecthelp' to list options

Buildfile: /home/jeff/apache/xml/xml-forrest/build/dist/shbat/bin/../forrest.build.xml

init-props:
Loading project specific properties from /home/jeff/apache/xml-mysite/forrest.properties

echo-settings:

check-contentdir:

ensure-nocontent:

seed:
Expanding: /home/jeff/apache/xml/xml-forrest/build/dist/shbat/fresh-site.zip
           into /home/jeff/apache/xml-mysite

-------------------------------
~~ Template project created! ~~

Here is an outline of the generated files:

/                        # /home/jeff/apache/xml-mysite
/status.xml              # List of project developers, todo list and change log
/forrest.properties      # Optional file describing your site layout
/src/documentation/      # Doc-specific files
/src/documentation/skinconf.xml    # Info about your project used by the skin
/src/documentation/content/xdocs   # XML content.
/src/documentation/content/xdocs/index.xml # Home page
/src/documentation/content/xdocs/book.xml  # Navigation file for site structure
/src/documentation/content/xdocs/tabs.xml  # Skin-specific 'tabs' file.
/src/documentation/resources/images        # Project images (logos, etc)


What to do now?

- Try rendering this template to HTML by typing 'forrest'. View the generated
  HTML in a browser to make sure everything works.
- Edit status.xml and src/documentation/skinconf.xml and customize for your
  project.
- Replace src/documentation/resources/images/project-logo.gif with your project
  logo.
- Start adding content in xdocs/, remembering to add new files to book.xml
- Provide any feedback to forrest-dev@xml.apache.org

Thanks for using Apache Forrest
-------------------------------
    

BUILD SUCCESSFUL
Total time: 2 seconds
      </source>
      <note>
        As you've probably begun to notice, we like to document things right in the
        script, on the theory that people only read online docs when desperate :)
      </note>
      <p>
        You now have a template documentation structure all set up:
      </p>
      <source>
jeff@expresso:~/apache/xml-mysite$ tree
.
|-- forrest.properties
|-- src
|   `-- documentation
|       |-- README.txt
|       |-- content
|       |   `-- xdocs
|       |       |-- book.xml
|       |       |-- index.xml
|       |       |-- sample.xml
|       |       |-- subdir
|       |       |   |-- book.xml
|       |       |   `-- index.xml
|       |       `-- tabs.xml
|       |-- resources
|       |   `-- images
|       |       |-- group-logo.gif
|       |       |-- icon.png
|       |       `-- project-logo.gif
|       `-- skinconf.xml
`-- status.xml
      </source>
      <p>
        To render this to HTML, type 'forrest'. You should have a HTML site rendered
        into the <code>build/site</code> directory:
      </p>
      <figure src="images/new-project.png" height="356" width="500" alt="New project"/>
    </section>
    <section>
      <title>Seeding an existing project</title>
      <p>
        In the section above, we have run 'forrest seed' in an empty directory. If you
        have an existing codebase which you wish to add Forrest docs to, run 'forrest
        seed' in your project base directory, and the Forrest doc structure will be
        grafted onto your project.
      </p>
      <p>
        If your project already has XML documentation, it may be easier to tell
        Forrest where the XML lives, rather than rearrange your project directories to
        accommodate Forrest. This can be done by editing
        <code>forrest.properties</code> (consult
        the <link href="#Changing_the_layout">Changing the layout</link>
        section for more details).
      </p>
    </section>
    <section>
      <title>Customizing your project</title>
      <p>
        Having seeded a project with template docs, you will now want to customize it
        to your project's needs. Here we will deal with configuring the skin, and
        changing the project layout.
      </p>
      <section>
        <title>Configuring the Forrest skin: skinconf.xml</title>

        <p>
          Most Forrest skins can be customized through a single XML file,
          <code>src/documentation/skinconf.xml</code>, which (minus its DTD) looks
          like this:
        </p>
        <source><![CDATA[
          <?xml version="1.0"?>

          <!--
          Skin configuration file. This file contains details of your project, which will
          be used to configure the chosen Forrest skin.
          -->
          <skinconfig>
            <!-- Do we want the Google search box? -->
            <disable-search>false</disable-search>
            <searchsite-domain>myproj.mygroup.org</searchsite-domain>
            <searchsite-name>MyProject</searchsite-name>

            <project-name>MyProject</project-name>
            <project-url>http://myproj.mygroup.org/</project-url>
            <project-logo>images/project-logo.gif</project-logo>

            <group-name>MyGroup</group-name>
            <group-url>http://mygroup.org</group-url>
            <group-logo>images/group-logo.gif</group-logo>

            <!-- Eg, a sourceforge logo. forrest-site renders it to the bottom-left corner -->
            <host-logo></host-logo>

            <!-- The following used to construct a copyright statement -->
            <year>2002</year>
            <vendor>The Apache Software Foundation.</vendor>

            <!-- Some skins use this to form a 'breadcrumb trail' of links. If you don't
            want these, set the attributes to blank. The DTD purposefully requires them.
            -->
            <trail>
              <link1 name="apache" href="http://www.apache.org/"/>
              <link2 name="xml.apache" href="http://xml.apache.org/"/>
              <link3 name="" href=""/>
            </trail>

            <!-- Credits are typically rendered as a set of small clickable images in the
            page footer -->
            <credits>
              <credit>
                <name>Built with Cocoon</name>
                <url>http://xml.apache.org/cocoon/</url>
                <image>skin/images/built-with-cocoon.gif</image>
                <width>88</width>
                <height>31</height>
              </credit>
              <credit>
                <name>Krysalis Centipede</name>
                <url>http://www.krysalis.org/centipede/</url>
                <image>skin/images/centipede-logo-small.gif</image>
                <width>138</width>
                <height>31</height>
              </credit>
            </credits>
          </skinconfig>
          ]]></source>
        <p>
          Customise this file for your project. The <code>images/</code> directory
          mentioned in 'project-logo' and 'group-logo' elements correspond to the
          <code>src/documentation/resources/images</code> directory (this mapping is done
          in the sitemap).
        </p>
        <p>
          Having edited this file (and ensured it is valid XML!), re-run the 'forrest'
          command in the site root, and the site should be updated.
        </p>
      </section>
      <section id="Changing_the_layout">
        <title>Changing the layout: forrest.properties</title>
        <p>
          For a simple site, Forrest's default directory layout may seem rather
          cumbersome.  Forrest allows you to place files anywhere you want in your
          project, so long as you tell Forrest where you have placed the major file
          types.
        </p>
        <p>
          The <code>forrest.properties</code> file is what maps from your directory
          layout to Forrest's. If you generated your site with 'forrest seed', you
          should have one pre-written, with all the entries commented out. The relevant
          <code>forrest.properties</code> entries (with default values) are:
        </p>
        <source>
# Properties that must be set to override the default locations
project.status=status.xml
project.content-dir=src/documentation
project.conf-dir=${project.content-dir}/conf
project.sitemap=${project.content-dir}/sitemap.xmap
project.xdocs-dir=${project.content-dir}/content/xdocs
project.stylesheets-dir=${project.content-dir}/resources/stylesheets
project.images-dir=${project.content-dir}/resources/images
project.schema-dir=${project.content-dir}/resources/schema
project.skins-dir=${project.content-dir}/skins
project.skinconf=${project.content-dir}/skinconf.xml
project.lib-dir=${project.content-dir}/lib
project.classes-dir=${project.content-dir}/classes
       </source>
       <p>
         For example, if you wish to keep XML documentation in src/xdocs rather than
         <code>src/documentation/content/xdocs</code> simply change the 'project.xdocs-dir'
         definition:
       </p>
       <source>
         project.xdocs-dir=src/xdocs
       </source>
       <p>
         Say we wish to emulate the nice and simple <link
           href="http://jakarta.apache.org/turbine/maven">Maven</link> format:
       </p>
       <p xml:space="preserve">
         /xdocs
         /xdocs/images
         /xdocs/stylesheets
       </p>
       <p>Here are the required property definitions:</p>
       <source>
project.content-dir=xdocs
project.sitemap=${project.content-dir}/sitemap.xmap
project.xdocs-dir=${project.content-dir}
project.stylesheets-dir=${project.content-dir}/stylesheets
project.images-dir=${project.content-dir}/images
project.skinconf=${project.content-dir}/skinconf.xml
         </source>
         <note>
           Internally, Forrest rearranges the specified directory into the default
           <code>src/documentation/content/xdocs</code> structure. In the layout above, we have
           overlapping directories, so you will end up with duplicate files. This small
           glitch doesn't usually cause problems; just always remember that all links
           are resolved through the sitemap.
         </note>
       </section>

     </section>


    <section>
      <title>Adding content</title>
      <p>
        Now you can start adding content of your own, in
        <code>src/documentation/content/xdocs</code>
      </p>
      <section>
        <title>book.xml</title>
        <p>
          Whenever adding a new file, you should add an entry to that directory's
          <code>book.xml</code> file. book.xml is like a site index, and is rendered as
          the vertical column of links in the default skin. Each directory below
          <code>xdocs/</code>
          should have its own <code>book.xml</code> with links suitably adjusted. Have a look at
          Forrest's own xdocs for an example.</p>
        <note>Yes, we know it is a pain having to edit every directory's
          <code>book.xml</code>
          file when making changes. The <link href="libre-intro.html">Libre</link>
          effort will hopefully put an end to this</note>
      </section>
      <section>
        <title>tabs.xml</title>
        <p>
          The <code>tabs.xml</code> file is used to produce the 'tabs' in the top-left
          corner of the default skin.
        </p>
        <figure src="images/tabs.png" alt="Tabs"/>
        <p>
          Tabs allow users to quickly just to sections of your site. Again, consult
          Forrest's own docs for a usage example.
        </p>
      </section>
      <section>
        <title>Images</title>
        <p>
          Images usually go in <code>src/documentation/resources/images/</code>
          The default sitemap
          maps this directory to <code>images/</code>, so image tags will typically look
          like &lt;figure src="images/project-logo.png" alt="Project Logo"/&gt; 
        </p>
      </section>
    </section>


    <section>
      <title>Advanced customizations: sitemap.xmap</title>
      <p>
        The Cocoon sitemap is a set of rules for generating content (HTML, PDFs etc)
        from XML sources. Forrest has a default sitemap, which is adequate for
        everyday sites (like the <link href="http://xml.apache.org/forrest">Forrest
          site</link> itself).
      </p>
      <p>
        Sometimes, one needs to go beyond the default set of rules. This is where
        Forrest really shines, because its Cocoon backend allows virtually any
        processing pipeline to be defined. For example, one can:
      </p>
      <ul>
        <li>Transform custom XML content types with XSLT stylesheets</li>
        <li>Generate PNG or JPEG images from <link
            href="http://www.w3.org/TR/SVG/">SVG</link> XML files.</li>
        <li>Integrate external XML feeds (eg RSS) into your site's content</li>
        <li>Merge XML sources via aggregation, or make content from large XML
          sources available as "virtual" files.</li>
        <li>Read content from exotic sources like <link
            href="http://www.rpbourret.com/xml/XMLDBLinks.htm">XML
            databases</link></li>
      </ul>
      <p>
        If your site defines its own sitemap, it must perform all the operations of
        the Forrest default.  To get started, simply copy the Forrest sitemap from
        <code>xml-forrest/src/resources/conf/sitemap.xmap</code> into your
        <code>src/documentation</code> directory (or wherever
        <code>${project.sitemap}</code> points to).
      </p>
      <p>
        The sitemap syntax is described in the <link
          href="http://xml.apache.org/cocoon/userdocs/concepts/sitemap.html">Cocoon
          sitemap docs</link>. The Forrest sitemap is fairly complicated, and
        partially described in <link href="primer.html#sitemap">The Forrest
          Primer</link>. Be aware that order matters; your sitemap additions should
        be before the catch-all sitemap rules (e.g. &lt;map:match
        pattern="*.html"&gt;), or they won't trigger.
      </p>
      <section id="adding_new_content_type">
        <title>Example: Adding a new content type</title>
        <note>This section will eventually be simplified by <link
            href="cap.html">Content Aware Pipelines (CAPs)</link>.</note>
        <p>
          Say that <code>download.xml</code> lists downloads for a certain package. It would be
          best to represent download information in a custom XML format:
        </p>
        <source
><![CDATA[<!DOCTYPE document PUBLIC "-//Acme//DTD Download Documentation V1.0//EN" "downloads.dtd">
<document> 
  ...
  <body>
    <section>
      <title>Downloading binaries</title>
      <p>
        Here are the binaries for FooProject
      </p>
      <release version="0.9.13" date="2002-10-11">
        <downloads>
          <file
            url="http://prdownloads.sourceforge.net/aft/fooproj-0.9.13-bin.zip?download"
            name="fooproj-0.9.13-bin.zip"
            size="5738322"/>
          <file
            url="http://prdownloads.sourceforge.net/aft/fooproj-0.9.13-src.zip?download"
            name="fooproj-0.9.13-src.zip"
            size="10239777"/>
        </downloads>
      </release>
      <release version="0.9.12" date="2002-10-08">
        <downloads>
          .....
        </downloads>
      </release>
    </section>
    <section>
      <title>Getting FooProject from CVS</title>
        ....
    </section>
  </body>
</document>
          ]]></source>
        <p>
          To handle these special tags, one would write a stylesheet to convert
          them to regular documentv11 format. Here is such a stylesheet,
          download2document.xsl:
        </p>
        <source><![CDATA[
<?xml version="1.0" encoding="utf-8"?>

<xsl:stylesheet
  version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:template match="release">
    <section>
      <title>Version <xsl:value-of select="@version"/> (released
          <xsl:value-of select="@date"/>)</title>
      <table>
        <tr><th>File</th><th>Size</th></tr>
        <xsl:apply-templates select="downloads/*"/>
      </table>
    </section>
  </xsl:template>

  <xsl:template match="file">
    <tr>
      <td><link href="{@url}"><xsl:value-of select="@name"/></link></td>
      <td><xsl:value-of select="format-number(@size div (1024*1024), '##.##')"/> MB</td>
    </tr>
  </xsl:template>


  <xsl:template match="@* | node() | comment()">
    <xsl:copy>
      <xsl:apply-templates select="@*"/>
      <xsl:apply-templates/>
    </xsl:copy>
  </xsl:template>

</xsl:stylesheet>

]]></source>
          <p>
            Place this in the default stylesheets directory,
            <code>src/documentation/resources/stylesheets</code> (or wherever
            ${project.stylesheets-dir} points).
          </p>
          <p>
            Then in <code>src/documentation/sitemap.xmap</code> add a 'matcher' like this:
          </p>
          <source><![CDATA[
            <map:match pattern="body-download.xml">
              <map:generate src="content/xdocs/download.xml"/>
              <map:transform src="resources/stylesheets/download2document.xsl"/>
              <map:call resource="skinit">
                <map:parameter name="type" value="document2html"/>
                <map:parameter name="path" value="download.xml"/>
              </map:call>
            </map:match>
            ]]></source>
          <p> 
            This should be added in the general region of the other 'body-*.xml'
            matchers.
          </p>
          <p>
            Why 'body-download.xml'? We want to fit in with the existing mechanism
            that Forrest has of assembling a page's XML content:
          </p>
          <source><![CDATA[
            <map:match pattern="*.html">
              <map:aggregate element="site">
                <map:part src="cocoon:/book-{1}.xml"/>
                <map:part src="cocoon:/tab-{1}.xml"/>
                <map:part src="cocoon:/body-{1}.xml"
                  label="content"/>
              </map:aggregate>
              ...
              ]]></source>
            <p>
              So when Cocoon gets a request for 'download.html', it will do an
              internal request for 'body-download.xml' to get the file's XML
              contents. Usually, this would be met by the following sitemap rule:
            </p>
            <source><![CDATA[
              <map:match pattern="body-**.xml">
                <map:generate src="content/xdocs/{1}.xml"/>
                <map:call resource="skinit">
                  <map:parameter name="type" value="document2html"/>
                  <map:parameter name="path" value="{1}.xml"/>
                </map:call>
              </map:match>
              ]]></source>
            <p>
              By declaring a custom 'body-download.xml' rule <em>before</em> this
              rule, we intercept the request, and can apply our stylesheet.
            </p>
            <p>
              Note that you may want to tweak that example rule for
              body-download.xml so that it will find download.xml files in
              subdirectories or with different names. Follow the syntax from 
              the other sitemap rules to do so.
            </p>
            <section>
              <title>Registering a new DTD</title>
              <p>
                 By default, Forrest requires that all XML files be valid: ie
                 they must have a DOCTYPE declaration and associated DTD, and
                 validate against it.  Our new 'downloads' document type is no
                 exception.  The <link href="validation.html">XML
                   Validation</link> section continues this example, showing how
                 to register a new document type.  Briefly, this involves:
               </p>
               <ul>
                 <li>Creating a new DTD or (in our case) extending an existing
                   one</li>
                 <li>Putting the new DTD in
                   <code>${project.schema-dir}/dtd</code></li>
                 <li>Adding a mapping from the DOCTYPE public id to the DTD
                   location, in the catalog file,
                   <code>${project.schema-dir}/catalog</code>.  Eg:
                   <code>PUBLIC "-//Acme//DTD Download Documentation V1.0//EN"
                     "dtd/download-v11.dtd"</code></li>
               </ul>
               <p>
                 Please read <link href="validation.html">XML Validation</link>
                 for the full story.
               </p>
            </section>
          </section>
          <section>
            <title>Example: integrating external RSS content</title>
            <p>
              Using the same idea described in the previous section, we can do things
              like retrieve an RSS feed, and integrate it into our website:
            </p>
            <source><![CDATA[
              <map:match pattern="body-weblog.xml">
                <map:generate src="http://radio.weblogs.com/0107791/rss.xml"/>
                <map:transform src="resources/stylesheets/rss2document.xsl"/>
                <map:call resource="skinit">
                  <map:parameter name="type" value="document2html"/>
                  <map:parameter name="path" value="weblog.xml"/>
                </map:call>
              </map:match>
              ]]></source>
          </section>
        <section>
          <title>Example: Generating PNG from SVG</title>
          <p>
            <link href="http://www.w3.org/TR/SVG/">SVG</link> (Scalar Vector
            Graphics) is an XML format for creating images. Using SVG, one can create
            dynamic images; logos with embedded version numbers and so forth.
          </p>
          <p>
            Forrest's sitemap contains the following rule, mapping
            <code>images/*</code> to files in the <code>resources/images</code>
            directory:
          </p>
          <source><![CDATA[
            <map:match pattern="images/**.*">
              <map:read src="resources/images/{1}.{2}" mime-type="image/{2}"/>
            </map:match>
            ]]></source>
          <p>
            Let's create a 'virtual' <code>images/svg/</code> directory, containing
            PNG images dynamically generated from SVG source in resources/images.
            Place the following rule <em>before</em> the default
            <code>images/**.*</code> rule:
          </p>
          <source><![CDATA[
            <map:match pattern="images/svg/*.png">
              <map:generate src="resources/images/{1}.svg"/>
              <map:serialize type="svg2png"/>
            </map:match>
            ]]></source>
          <p>
            Now, we can place SVG images in
            <code>src/documentation/resources/images/*.svg</code>, and display them
            with tags like &lt;figure src="images/svg/*.png"/&gt;.
          </p>
          <p>
            Here is a simple SVG
            logo, <code>logo.svg</code>, displaying 'FooProject' with a shadow and
            gradient fill:
          </p>
          <source><![CDATA[
<svg xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" width="340" height="65" viewBox="0 0 340 60">
  <title>FooProject logo</title>

  <defs>
    <linearGradient id="gradient" x1="0" y1="0" x2="0" y2="1">
      <stop style="stop-color:white" offset="0"/>
      <stop style="stop-color:lightgreen" offset="1"/>
    </linearGradient>

    <filter id="shadowFilter"  filterUnits="objectBoundingBox">
      <feGaussianBlur in="SourceAlpha" stdDeviation="2 2" result="blur"/>
      <feOffset in="blur" dx="4" dy="4" result="offsetBlur"/>
      <feComposite in="SourceGraphic" in2="offsetBlur" operator="over"/>
    </filter>
  </defs>

  <g filter="url(#shadowFilter)" fill="url(#gradient)">
    <text x="51%" y="70%" style="font-size:40pt; font-family:Arial ; text-anchor: middle ; font-family: Verdana">
      FooProject
    </text>
  </g>
</svg>
            ]]></source>
          <p>
            Place this file in
            <code>src/documentation/resources/images/logo.svg</code>. Then edit
            <code>src/documentation/skinconf.xml</code>, and use this image as the
            project logo with the line:
          </p>
          <source><![CDATA[
            <project-logo>images/svg/logo.png</project-logo>
            ]]></source>
          <p>
            Your project should now have a PNG logo looking like this:
          </p>
          <figure src="images/sample-logo.png" alt="Sample logo"/>
        </section>
      </section>

      <section>
        <title>Forrest skins</title>
        <p>
          As Forrest separates content from presentation, we can plug in different
          "skins" to instantly change a site's look &amp; feel.  Forrest provides one
          primary skin, <code>forrest-site</code>, and a handful of others in various
          states of maintenance.
        </p>
        <p>
          To change the skin, edit the <code>forrest.properties</code> file, and
          change the following entry:
        </p>
        <source>
          project.skin=forrest-site
        </source>
        <note>
          The mechanism for defining which skin to use will change in the future from
          Ant @token@ values to Cocoon input module values.
        </note>
        <section>
          <title>Defining a new skin</title>
          <p>
            Projects can define their own skin, in the
            <code>src/documentation/skins</code> directory (or wherever
            <code>${project.skins-dir}</code> points). The default sitemap assumes a
            certain skin layout, so the easiest way to create a new skin is by
            copying an existing Forrest skin.  For example, copy
            <code>xml-forrest/src/resources/skins/forrest-site</code> to
            <code>src/documentation/skins/myskin</code>, and add
            <code>project.skin=myskin</code> to forrest.properties.
          </p>
          <p>
            In addition, when using a project-specific skin it is a good idea to
            also use a project-specific sitemap.  This is to protect your skin
            from changes in the Forrest default sitemap.  While the sitemap-skin
            contract (expressed as XSLT parameters) is now fairly stable, this
            should not be relied on.
          </p>
          <p>
            The two most interesting XSLT stylesheets involved are:
          </p>
          <dl>
            <dt>xslt/html/document2html.xsl</dt>
            <dd>
              This stylesheet is applied to individual documentv11 XML files, and
              converts them to HTML suitable for embedding in a larger HTML page.
            </dd>
            <dt>xslt/html/site2xhtml.xsl</dt>
            <dd>
              This stylesheet generates the final HTML file from an intermediate
              'site' format produced by the other stylesheets. It defines the general
              layout, and adds the header and footer.
            </dd>
          </dl>
        </section>
      </section>

      <section>
        <title>Forrest webapps: developing docs faster</title>
        <p>
          In comparison to simpler tools like <link
            href="http://jakarta.apache.org/velocity/anakia.html">Anakia</link>,
          Cocoon's command-line mode (and hence Forrest) is painfully slow.  As the
          <link href="dreams.html">dream list</link> notes, Forrest was originally
          intended to be used for dynamic sites, and the Cocoon crawler used only to
          create static snapshots for mirroring.  This section describes how, by
          developing with a "live" Forrest webapp instance, Forrest-based doc
          development can be faster and easier than comparable tools.
        </p>
        <section>
          <title>Installing a servlet engine</title>
          <p>
            To run a "live" forrest, you'll need a servlet container, like <link
              href="http://jakarta.apache.org/tomcat">Jakarta Tomcat</link>. The
            best choice is currently <link
              href="http://jakarta.apache.org/builds/jakarta-tomcat/release/v3.3.1/bin/">Tomcat
              3.3.1</link>, which has been fairly well tested with Forrest,
            restarts much faster than 4.x, and handles context reloads well.
          </p>
        </section>
        <section>
          <title>Generating a site webapp</title>
          <p>
            To generate a webapp rather than a static HTML site, run <code>forrest
              webapp</code> in your project root.  If successful, you should see a
            message like:
          </p>
          <source><![CDATA[
---------------------------------
Webapp generated in /tmp/myproj/build/webapp

To run in Tomcat, add this to the config file (usu. server.xml):

<Context path='/MyProject'
            docBase='/tmp/myproj/build/webapp'
            reloadable='true'/>
---------------------------------
]]></source>
          <p>
            For Tomcat 3.3, add the &lt;Context&gt; line to
            <code>$TOMCAT_HOME/conf/apps.xml</code>:
          </p>
          <source><![CDATA[
            <?xml version="1.0" encoding="ISO-8859-1"?>
            <webapps>
              ....
              <Context path='/MyProject'
                docBase='/tmp/myproj/build/webapp'
                reloadable='true'/>
            </webapps>
            ]]></source>
          <p>
            Then restart Tomcat, and point your browser at
            <code>http://localhost:8080/MyProject</code>
            ... you should see a dynamically generated
            page identical to that produced by the Cocoon crawler.
          </p>
        </section>
        <section>
          <title>Using the webapp</title>
          <p>
            With the setup above, you can edit the XML files in
            <code>build/webapp/content/xdocs</code> and see the changes immediately
            in the browser.
          </p>
          <p>
            To get the edited content back to its home directory, either copy it
            once you have finished editing, or symlink the
            <code>src/documentation/content/xdocs</code> directory to
            <code>build/webapp/content/xdocs</code>.
          </p>

          <note>In the future, we are hoping that Forrest will be able to work with
            <em>in-place</em> content, eliminating the step of copying everything
            into the <code>build/</code> directory.  There are also suggestions for making
            webapp-based content generation the primary technique. Future
            directions like these are debated on <link
              href="mailto:forrest-dev@xml.apache.org">forrest-dev</link>; please
            join if you have any suggestions.
          </note>
        </section>
      </section>
      <section>
        <title>Invoking Forrest from Ant</title>
        <p>
          Established Java projects which use Ant will typically wish to subsume
          Forrest's build targets ('site', 'webapp', 'validate' etc) into their
          own build system, to provide a unified interface for users.  This
          section describes how to invoke Forrest operations from an external
          Ant build file.
        </p>
        <p>
          Here are the targets that can be included in a project's build.xml
          file to invoke Forrest:
        </p>
        <source><![CDATA[
<target name="site" description="Generates static HTML documentation">
  <ant antfile="${forrest.home}/forrest.antproxy.xml" target="site"/>
</target>

<target name="webapp" description="Generates an unpackaged webapp of the website">
  <ant antfile="${forrest.home}/forrest.antproxy.xml" target="webapp"/>
</target>

<target name="war" description="Generates a .war file containing the website">
  <ant antfile="${forrest.home}/forrest.antproxy.xml" target="war"/>
</target>

<target name="validate" description="Validates XML documentation files">
  <ant antfile="${forrest.home}/forrest.antproxy.xml" target="validate"/>
</target>
]]></source>
        <note>
          Always use <code>forrest.antproxy.xml</code>, not
          <code>forrest.build.xml</code>.  The <code>forrest.antproxy.xml</code>
          script invokes <code>forrest.build.xml</code> using Forrest's own
          bundled version of Ant, which has non-standard support for catalog
          files.
        </note>
        <p>
          You'll notice that these targets require <code>${forrest.home}</code>
          to be set.  <code>${forrest.home}</code> must point to the user's
          shbat distribution of Forrest.  Thus we need a mechanism for the user
          to inform the build script of their Forrest's location.  Typically
          this is done by setting a property in a properties file like
          <code>build.properties</code>, but can also be done by looking for the
          <code>FORREST_HOME</code> environment variable.
        </p>
        <p>
          Forrest comes with an Ant snippet file,
          <code>forrest-targets.ent</code>, that supplies the targets listed
          above, as well as searching for a <code>${forrest.home}</code>
          definition in a number of likely places:
        </p>
        <ul>
          <li>In the <code>FORREST_HOME</code> environment variable.</li>
          <li>In the <code>build.properties</code> file.</li>
          <li>In the <code>project.properties</code> file.</li>
          <li>In the <code>ant.properties</code> file.</li>
          <li>In the <code>.ant.properties</code> file.</li>
        </ul>
        <p>
          <code>forrest-targets.ent</code> also prints out an informative error
          message if <code>${forrest.home}</code> cannot be resolved.
        </p>
        <p>
          <code>forrest-targets.ent</code> is supplied as part of the template
          Forrest project (<code>'forrest seed'</code>).  The comments at the
          top describe how to use it in a project's build.xml.  Typical usage
          is:
        </p>
        <source><![CDATA[
<!DOCTYPE project [
<!ENTITY forrest-targets SYSTEM "file:./forrest-targets.ent">
]>

<project .... >

  ....

  <!-- Include Forrest targets -->
  &forrest-targets;

</project>
]]></source>
        <p>
          Having done this, the Forrest targets (<code>site, webapp, war,
            validate</code>) are automatically added to your project.  
        </p>
      </section>
    </body>
  </document>
