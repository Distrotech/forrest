<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE faqs PUBLIC "-//APACHE//DTD FAQ V1.1//EN" "dtd/faq-v11.dtd" [
<!ENTITY s '<code>site.xml</code>'>
]>

<faqs title="Frequently Asked Questions">

  <part id="getting_started">
    <title>Building Forrest</title>
    <faq id="checked_out_now_what">
      <question>
        I have checked out a working copy of <code>xml-forrest</code> CVS, now what?
      </question>
      <answer>
        <p>
          Run &quot;<code>./build.sh</code>&quot; to generate the documentation
          for Forrest, built with Forrest.
          The documentation is generated in the <code>build/site/</code> directory.
          Logfiles are in the <code>build/tmp/context/WEB-INF/logs/</code> directory.
        </p>
        <p>
          The <link href="site:your-project">Using Forrest</link> guide provides
          further step-by-step assistance in getting started with Forrest.
        </p>
      </answer>
    </faq>

    <faq id="cygwin_mutex_error">
      <question>
        When running <code>./build.sh</code> in cygwin, I get an error:
        <code>cygpath.exe: *** can't create title mutex, Win32 error 6</code>. 
      </question>
      <answer>
        <p>
          This <link
            href="http://issues.cocoondev.org/jira//secure/ViewIssue.jspa?key=FOR-10">appears
            to be a bug in cygwin</link>.  Please use the .bat script instead.
        </p>
      </answer>
    </faq>
  </part>



  <part id="technical">
    <title>Technical</title>
    <faq id="ignoring_javadocs">
      <question>
        How do I stop Forrest breaking on links to external files that may not
        exist, like javadocs?
      </question>
      <answer>
        <p>
          This can be done by overriding the <code>filterlinks.xsl</code>
          stylesheet, and modifying it to filter out links that shouldn't be
          traversed.
        </p>
        <p>
          This means creating a directory
          <code>src/documentation/resources/stylesheets</code> (or wherever
          <code>${forrest.stylesheets-dir}</code> points) and copying
          <code>$FORREST_HOME/context/resources/stylesheets/filterlinks.xsl</code>
          to it.  Then edit filterlinks.xsl, and add extra conditions to the
          <code>xsl:if</code> statement:
        </p>
        <source
          >&lt;xsl:template match="@src|@href|@background"&gt;
          &lt;xsl:if test="not(contains(.,'apidocs')) and not(starts-with(., 'api/'))"&gt;
          ...</source>
        <p>
          This default XPath expression ignores links containing 'apidocs' or
          starting with 'api/'.  This is just an example, and you should modify
          it appropriately for your site.
        </p>
        <p>
          With the CVS version of Forrest, this is all that is required.
          Forrest 0.4 needs one more change: a custom sitemap must be created
          (copy <code>$FORREST_HOME/context/sitemap.xmap</code> to
          <code>src/documentation/sitemap.xmap</code>, aka
          <code>${project.sitemap}</code>), and change line 394 from:
        </p>
        <source>&lt;map:transform src="library/xslt/filterlinks.xsl" /&gt;</source>
        <p>to:</p>
        <source>&lt;map:transform src="resources/stylesheets/filterlinks.xsl" /&gt;</source>
        <p>
          A bit of background may help explain all this.  Cocoon generates a static
          version of a website by 'crawling' through the pages&mdash;that is,
          following links to determine what else to render.  Starting with
          <code>index.html</code>, Cocoon will:
        </p>
        <ol>
          <li>render a page, say <code>index.html</code></li>
          <li>
            <p>
              request the 'links view' of that page, e.g.
              <code>index.html?cocoon-view=links</code>.
            </p>
            <p>
              The concept of 'views' is explained in <link href="ext:views">the
                Cocoon documentation</link>; briefly, Cocoon allows different
              representations of a page, and these are called views.  The links
              view is a simple text listing of the page's embedded links.  The
              links view is specified in the Forrest sitemap with:
            </p>
            <source><![CDATA[
              <map:view name="links" from-position="last">
                <map:transform
                  src="resources/stylesheets/filterlinks.xsl"/>
                <map:serialize type="links"/>
              </map:view>]]>
            </source>
            <p>
              The XSLT transformation just before the serializer gives us an
              opportunity to filter out any links we don't want Cocoon to
              process.  As the link view is a separate pipeline, the normal page
              output will be unaffected.
            </p>
          </li>
          <li>
            For each path mentioned in the link view, add it to a queue of pages
            to render, and recursively render each in order.
          </li>
        </ol>
      </answer>
    </faq>

    <faq id="validation_error:doctype_root_null">
      <question>
        When building my project, I get an validation error: <code>Document root
          element "site", must match DOCTYPE root "null".</code>.
      </question>
      <answer>
        <p>
          You are probably trying to build the project with an old version of
          Forrest (built before 2003-01-08) that is incorrectly trying to validate
          the &s; file.  If so, please update your Forrest
          installation.
        </p>
        <p>
          Alternatively, you may be building with an up-to-date Forrest, but have
          overridden <code>forrest.validate.xdocs.excludes</code> in
          <code>forrest.properties</code>.  With the introduction of
          &s;, the above property must have &s;
          listed to prevent an attempt at DTD-based validation.
        </p>
      </answer>
    </faq>

    <faq id="unresolved_project.home">
      <question>When invoking Forrest 0.4 from the
        <code>forrest.antproxy.xml</code>, the build fails because
        <code>${project.home}</code> isn't resolved.
      </question>
      <answer>
        <p>This is a bug in 0.4. The following modification to
          <code>FORREST_HOME/forrest.antproxy.xml</code> should fix it:</p>
        <source
><![CDATA[--- forrest.antproxy.xml        7 Feb 2003 22:21:15 -0000       1.2
+++ forrest.antproxy.xml        22 Feb 2003 09:39:42 -0000
@@ -41,6 +41,7 @@
   </path>
 
   <target name="forrest">
+    <property name="project.home" location="."/>
     <java classname="org.apache.tools.ant.Main" fork="true">
       <classpath refid="forrest-classpath"/>
       <jvmarg value="-Dforrest.home=${forrest.home}"/>]]></source>
      </answer>
    </faq>

    <faq id="odd_html">
      <question>
        After upgrading to 0.4 my HTML looks significantly different, and table
        widths are wrong. What happened?
      </question>
      <answer>
        <p>
          Forrest now uses a HTML 4.0.1 <code>DOCTYPE</code> declaration,
          <code><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01
            Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">]]></code>.
          This causes browsers to render the page in standards-compliance mode,
          or rather, not in "quirks" mode. For some operations (like determining
          table column widths), quirks mode results in better looking pages.
          For the old pre-0.4 behaviour, create a custom sitemap and remove the
          line:</p>
        <source><![CDATA[
          <doctype-system>http://www.w3.org/TR/html4/loose.dtd</doctype-system>
          ]]></source>
      </answer>
    </faq>

     <faq id="index.html">
      <question>
        The tab link in my site incorrectly assumes that 'index.html' is present in
        the linked-to directory. How do I fix this?
      </question>
      <answer>
        <p>
          In <code>tabs.xml</code>, use @href instead of @dir, and omit the trailing
          '/'. That will leave which file to serve up to the sitemap.  For example, if
          the 'User Manual' tab should link to <code>manual/Introduction.html</code>,
          <code>tabs.xml</code> should contain:
        </p>
        <source><![CDATA[
          <tab label="User Manual" href="manual"/>
          ]]></source>
        <p>
          and add this rule to the sitemap:
        </p>
        <source><![CDATA[
          <map:match pattern="manual">
            <map:redirect-to uri="manual/Introduction.html"/>
          </map:match>
          ]]></source>
     </answer>
    </faq>
  </part>

  <part id="general">
    <title>General</title>

    <faq id="generating_menus">
      <question>What is the relation between &s; and
        <code>book.xml</code>?
      </question>
      <answer>
        <p>
          One &s; file in your project root can replace all the book.xml files
          (one per directory) in your site.  Internally, Forrest uses &s; to
          dynamically generate book.xml files.  However, Forrest first checks
          for the existence of a book.xml file, so backwards-compatibility is
          preserved.  If a directory has a book.xml file, the book.xml will be
          used to generate the menu.  This is useful in situations where
          &s;-generated menus aren't appropriate.
      </p>
      </answer>
    </faq>

    <faq id="site_xml_format">
      <question>What's with this awful site.xml format?</question>
      <answer>
        <p>
          The <link href="site:linking">site.xml</link> format was designed for
          humans, not computers.  The goals were for &s; to be exceedingly
          simple, compact, easy to type and easy to read.  The reuse of element
          names as ids means that &s; has very few wasted characters.  This odd
          merging of <em>content</em> and <em>markup</em> has a few
          disadvantages (DTD validation is out), but nothing that outweighs the
          readability advantage.
        </p>
        <p>
          That said, pretty much any XML format may be used, simply by tweaking
          the XPath template in the sitemap.  In the future, &s; may be replaced
          with some more standardized format, perhaps RDF or <link
            href="http://www.topicmaps.org/xtm/1.0/">XTM (topic maps)</link>.
          Volunteers for implementing alternative formats are welcome.
        </p>
      </answer>
    </faq>

    <faq id="obsolete_docs">
      <question>
        Why am I a little confused by the Forrest documentation?
      </question>
      <answer>
        <p>
          Sorry, we are working on that for the next release. Forrest development has
          been very fast recently. Some of the documentation refers to old methods.
          Your best bet is to start with the
          <link href="site:your-project">Using Forrest</link> document.
        </p>
      </answer>
    </faq>

    <faq id="how_can_I_help">
      <question>
        How can I help?
      </question>
      <answer>
        <p>
          Join the forrest-dev <link href="site:mail-lists">mailing list</link>,
          and tell us what you'd like to see improved.  We regard all feedback
          as valuable, particularly from newcomers&mdash;often, close proximity
          blinds software developers to faults that are obvious to everyone
          else. Don't be shy!
        </p>
        <p>
          More info on contributing can be found on the <link
            href="site:contrib">Contributing to Forrest</link> page.  Its always
          a good idea to check the Forrest <link href="site:todo">to do</link>
          list before diving in.
        </p>
      </answer>
    </faq>
  </part>
</faqs>
