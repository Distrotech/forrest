<?xml version="1.0"?>

<!--
Ant template-targets holding the actions forrest can peform on your project.
Eventually all of this should be wrapped up into a Java Class and/or ant task

This should be called by some forrest.bat or forrest.sh having a project-dir
as its argument (. if none)
That should be passed to here with -Dproject.home
-->


<project default="site" basedir="." name="Forrest template targets">

  <description>
    *=======================================================*
    |   Forrest ant based site building target-temaplates   | 
    *=======================================================*
                              by
                  Marc Portier (mpo@apache.org)
  
        Call this through the ./bin/forrest.sh or *.bat
  </description>
  
  

<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                    COMMON SETTINGS                          ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->

  <!-- ===============================================================
       Loads user defined settings.
       Steps back to defaults when they are not set.
       Echo's the settings if requested.
       =============================================================== -->
  <target name="init">
  
    <!-- setting defaults for parameters -->
    <!-- people should use -D switch, or <ant><property>s to override these   -->
    <property name="forrest.home" value="." />
    <property name="project.home" value="." />

    <!-- people should use forrest.properties to override following defaults  -->
    <echo message="Loading project specific properties from ${project.home}/forrest.properties" />
    <property file="${project.home}/forrest.properties" />

    <property name="project.site-dir"    value="${project.home}/build/site"    />
    <property name="project.siteplan"    value="${project.home}/siteplan.xml"  />

    <property name="project.temp-dir"    value="${project.home}/build/tmp"     />
    <property name="project.work-dir"    value="${project.temp-dir}/work"       />
    <property name="project.ctxt-dir"    value="${project.temp-dir}/context"    />


    <!-- use of this property should be removed when the siteplan becomes active -->
    <property name="project.skin" value="forrest-skin" />



    <!-- checks for presence of required classes and/or resources -->
    <property name="tools.jar"             location="${java.home}/../lib/tools.jar"/>
    <available file="${tools.jar}"         property="tools.jar.present"/>
    
    
    <!-- echo settings in -Dforrest.echo=true mode -->
    <antcall target="echo-settings" />
  </target>


  <!-- ===============================================================
       Echo's the settings if requested. [-Dforrest.echo=true]
       =============================================================== -->
  <target name="echo-settings" if="forrest.echo">
    <echo>
      ------------------------------------------------
      | Forrest template run.
      | Running from $${forrest.home} = ${forrest.home}
      | Working on   $${project.home} = ${project.home}
      ------------------------------------------------
      | project.site-dir = ${project.site-dir}
      | project.siteplan = ${project.siteplan}
      | project.temp-dir = ${project.temp-dir}
      | project.work-dir = ${project.work-dir}
      | project.ctxt-dir = ${project.ctxt-dir}
      | tools.jar.present= ${tools.jar.present}
      ------------------------------------------------
    </echo>
  </target>


  <!-- ===============================================================
       Set class-path.
       =============================================================== -->
  <target name="prepare-classpath" depends="init" >
    <path id="forrest.cp">
      <fileset dir="${forrest.home}/WEB-INF/lib" includes="*.jar" />
      <pathelement location="${tools.jar}"/>
      <pathelement location="${bot.build.dir}/WEB-INF/classes"/>
    </path>
  </target>


  <!-- ===============================================================
       Display the usage of this script. 
       =============================================================== -->
  <target name="usage" depends="init">
    <echo>
    TODO... COMPLETE THIS:
      should explain the usage. 
        part of it being: refering to the shell or bat use
        part of it being: &lt;ant antfile=...&gt;
      setting FORREST_HOME and the like.
      description of the targets.
      starting with fresh-project and looking at the siteplan that comes out of it.
    </echo>
  </target>


<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                  SITE BUILDING ACTIONS                      ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->


  <!-- ===============================================================
       Fills the Cocoon context dir to work in 
       with the forrest-predefines.
       param: location to make context-dir? 
              (we could just make up a temp one, and clean when done)
       =============================================================== -->
  <target name="bare-context" depends="init" >
    <!-- TODO get rid of this hackerism -->
    <!-- The birth of the siteplan could help in getting rid of these -->
    <filter token="skin"              value="${project.skin}" />
    <filter token="link1"             value="apache"/>
    <filter token="link1.href"        value="http://www.apache.org/"/>
    <filter token="link2"             value="xml.apache"/>
    <filter token="link2.href"        value="http://xml.apache.org/"/>
    <!-- the breadcrumb script already generates it,
         so it needs to be kept blank -->
    <filter token="link3"             value=""/>
    <filter token="link3.href"        value=""/>
    <filter token="group-logo.src"    value="images/group-logo.gif"/>
    <filter token="group-logo.href"   value="http://xml.apache.org/"/>
    <filter token="group-logo.alt"    value="Apache XML logo"/>
    <filter token="project-logo.src"  value="images/project-logo.gif"/>
    <filter token="project-logo.href" value="http://xml.apache.org/forrest/"/>
    <filter token="project-logo.alt"  value="Forrest logo"/>
    <filter token="year"              value="2002"/>
    <filter token="vendor"            value="Apache Sofware Foundation"/>

    <!-- NOW: filter-copy the empty-forrest-context -->
    <!-- WITH SitePlan: smaller empty-context, 1 unfiltered copy
                        + generate more stuff from siteplan -->

    <copy toDir="${project.ctxt-dir}/" filtering="off">
      <fileset dir="${forrest.home}/context" >
        <exclude name="sitemap.xmap" />
        <exclude name="skins/**" />
        <include name="skins/**/images/**" />
      </fileset>
    </copy>

    <copy toDir="${project.ctxt-dir}/" filtering="on">
    <!-- everything in the skins, except the images , and the sitemap -->
      <fileset dir="${forrest.home}/context" >
        <include name="sitemap.xmap" />
        <exclude name="skins/**/images/**" />
        <include name="skins/**" />
      </fileset>
    </copy>
  </target>

  <!-- ===============================================================
       Makes the Cocoon context dir to work in. 
       Fills it with 
         forrest predefines.  
         site-content-parts
         derivatives from siteplan
       param: location of siteplan $project.siteplan
       param: location to make context-dir? 
              (we could just make up a temp one, and clean when done)
       =============================================================== -->
  <target name="prepare-context" depends="init, bare-context" >

    <echo>
      TODO... COMPLETE THIS:
      ... some style and copy tasks?
    </echo>

  </target>


  <!-- ===============================================================
       Makes the site   
       param: location of siteplan ${project.siteplan}
       param: location to put generated site ${project.site-dir}
       =============================================================== -->
  <target name="site" depends="init, prepare-context, clean-site, prepare-classpath">


    <echo>
      TODO... COMPLETE THIS:
      ... should call cocoon CLI on set forrest.cococontxt.dir
    </echo>

  </target>


  <!-- ===============================================================
       Cleans the site.  (typically before generating the new version)
       param: location to clean ${project.site-dir}
       =============================================================== -->
  <target name="clean-site">
    <delete dir="${project.site-dir}"/>
  </target>


  <!-- ===============================================================
       Builds a cocoon webapp for your project based on the siteplan.
       param: location of siteplan ${forrest.siteplan}
       param: location to put generated war ${forrest.out.war}
       =============================================================== -->
  <target name="webapp" depends="init, prepare-context">
    <echo>
      TODO... COMPLETE THIS:
      ... this should just war up the prepared context dir.
    </echo>
  </target>


  <!-- ===============================================================
       Validates all XML documents in the projects-
       param: location of siteplan ${forrest.siteplan}
       param: location to put generated war ${forrest.out.war}
       =============================================================== -->
  <target name="validate-docs" depends="init, prepare-context">
    <echo>
      TODO... COMPLETE THIS:
      ... this should just war up the prepared context dir.
    </echo>
  </target>



<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **          PROJECT-TEMPLATE BUILDING ACTIONS                  ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->



  <!-- ===============================================================
        Copies a template structure over to your project dir.

        flag: with or without room for own skin 
        ... flags for others... thers

        Mind this is typically called before any forrest.properties
        or siteplan.xml exists (we should consider generating those as well
 
        maybe even a template ant build?

        dependend task for doing that alone.
        >>> filling this with stuff from smart acorn.xml idea.
       =============================================================== -->
  <target name="fresh-project">
  <!--
          depends="fresh-xdocs, fresh-skin, fresh-descriptors, fresh-build" />

  -->
    <echo>
      TODO: COMPLETE THIS....
      with the various dependencies....
      should be using some mechanism in the ant unzip task so we NEVER overwrite content already present in the PROJECT.HOME! (probably exists on unzip task)
    </echo>
  </target>



<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                 BOT EXECUTING ACTIONS                       ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->


<!-- currently just a cut and paste: none of this will work atm. -->
<!-- TODO... COMPLETE THIS: -->


  <!-- TODO: nuke this target after handling what it did elsewhere -->
  <target name="bot.init" depends="init">
    <!-- TODO: moce this to main init, should cone from project.home/forrest.properties -->
    <property name="bot.build.dir"              value="${xlayout.build.bot.dir}"/>
    <property name="bot.forrestbot.xconf"       value="forrestbot.conf.xml" />

    <!-- TODO: needs to be in the distribution -->
    <property name="bot.templates.build.xml" 
             value="${xlayout.source.resources.forrestbot.ant.dir}/templates.build.xml" />
    <property name="bot.work.builder.xslt"      
             value="${xlayout.source.resources.forrestbot.xslt.dir}/config2work.xsl" />
    <property name="bot.default.builder.xslt"   
             value="${xlayout.source.resources.forrestbot.xslt.dir}/config2defaults.xsl" />
  </target>


  <target name="bot.conf2build" depends="bot.init" >
    <mkdir dir="${bot.build.dir}" />
    <echo message="Using config file: ${bot.forrestbot.xconf}" />

    <property name="bot.work.build.xml"         value="${bot.build.dir}/work.build.xml"/>
    <property name="bot.default.parameters.xml" value="${bot.build.dir}/default.parameters.xml"/>

    <!-- remove previous versions to force generation again -->
    <delete file="${bot.work.build.xml}" />
    <delete file="${bot.default.parameters.xml}" />

    <!-- builds the different xml files this process needs.  -->
    <style in="${bot.forrestbot.xconf}"
      out="${bot.work.build.xml}"
      style="${bot.work.builder.xslt}"/>
    <style in="${bot.forrestbot.xconf}"
      out="${bot.default.parameters.xml}"
      style="${bot.default.builder.xslt}"/>
    <copy todir="${bot.build.dir}" file="${bot.templates.build.xml}"/>
  </target>


  <target name="bot" depends="bot.conf2build, prepare-classpath" >
    <!-- delegates to the generated XML file -->
    <ant antfile="${bot.work.build.xml}" target="work" inheritRefs="true"/>
  </target>



</project>
