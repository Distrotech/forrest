<?xml version="1.0"?>

<!--
Ant template-targets holding the actions forrest can peform on your project.
Eventually all of this should be wrapped up into a Java Class and/or ant task

This should be called by some forrest.bat or forrest.sh having a project-dir
as its argument (. if none)
That should be passed to here with -Dproject.home
-->


<project default="site" basedir="." name="Forrest template targets">

  <description>
    *=======================================================*
    |   Forrest ant based site building target-templates    | 
    *=======================================================*
                              by
                  Marc Portier (mpo@apache.org)
  
        Call this through the ./bin/forrest.sh or *.bat
  </description>
  
  

<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                    COMMON SETTINGS                          ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->

  <!-- ===============================================================
       Loads user defined settings.
       Steps back to defaults when they are not set.
       Echo's the settings if requested.
       =============================================================== -->
  <target name="init">
  
    <!-- setting defaults for parameters -->
    <!-- people should use -D switch, or <ant><property>s to override these   -->
    <property name="forrest.home" value="." />
    <property name="project.home" value="." />

    <!-- people should use forrest.properties to override following defaults  -->
    <echo message="Loading project specific properties from ${project.home}/forrest.properties" />
    <property file="${project.home}/forrest.properties" />

    <property name="project.site-dir"    value="${project.home}/build/site"    />
    <property name="project.war"         value="${project.home}/build/my-project.war" />
    <property name="project.siteplan"    value="${project.home}/siteplan.xml"  />

    <property name="project.temp-dir"    value="${project.home}/build/tmp"     />
    <property name="project.work-dir"    value="${project.temp-dir}/work"      />
    <property name="project.ctxt-dir"    value="${project.temp-dir}/context"   />

    <property name="project.logfile"     value="${project.temp-dir}/forrest.log"/>
    <property name="project.debuglevel"  value="ERROR"                         />
    <property name="project.start-uri"   value="index.html"                    />

    <!-- use of these property should be removed when the siteplan becomes active -->
    <property name="project.skin"        value="forrest-site" />
    <property name="project.content-dir" value="${project.home}/src/documentation" />

    <!-- checks for presence of required classes and/or resources -->
    <property name="tools.jar"             location="${java.home}/../lib/tools.jar"/>
    <available file="${tools.jar}"         property="tools.jar.present"/>
    
    <!-- echo settings in -Dforrest.echo=true mode -->
    <antcall target="echo-settings" />
  </target>


  <!-- ===============================================================
       Echo's the settings if requested. [-Dforrest.echo=true]
       =============================================================== -->
  <target name="echo-settings" if="forrest.echo">
    <echo>
      ------------------------------------------------
      | Forrest template run.
      | Running from $${forrest.home} = ${forrest.home}
      | Working on   $${project.home} = ${project.home}
      ------------------------------------------------
      | //where to put the result
      | project.site-dir    = ${project.site-dir} 
      | //uri to start crawling/generation process
      | project.start-uri   = ${project.start-uri}
      | //masterplan for building site (dreamware)
      | project.siteplan    = ${project.siteplan} 
      | //temp dir to throw stuf in (i.e. work and ctxt)
      | project.temp-dir    = ${project.temp-dir} 
      | //temp working directory for generation process
      | project.work-dir    = ${project.work-dir} 
      | //temp context directory for generation process
      | project.ctxt-dir    = ${project.ctxt-dir} 
      | //debuglevel for logging (INFO, DEBUG, WARN, ERROR, FAIL)
      | project.debuglevel  = ${project.debuglevel}
      | //logfile location
      | project.logfile     = ${project.logfile}
      | //check if you have tools.jar installed.
      | tools.jar.present   = ${tools.jar.present} 
      ------------------------------------------------
      | Following could be removed from future builds
      | //which skin to apply
      | project.skin        = ${project.skin} 
      | //where your documentation xml is
      | project.content-dir = ${project.content-dir} 
      ------------------------------------------------
    </echo>
  </target>


  <!-- ===============================================================
       Set class-path.
       =============================================================== -->
  <target name="prepare-classpath" depends="init" >
    <path id="forrest.cp">
      <fileset dir="${forrest.home}/WEB-INF/lib" includes="*.jar" />
      <pathelement location="${tools.jar}"/>
      <pathelement location="${forrest.home}/WEB-INF/classes"/>
    </path>
  </target>


  <!-- ===============================================================
       Display the usage of this script. 
       =============================================================== -->
  <target name="usage" depends="init">
    <echo><![CDATA[
    Usage: This ant file holds the targets for letting the forrest 
    project work for your project.

    It is recommended that you have a FORREST_HOME environment variable
    that points to where this ant script (and the required directories) 
    is located.

    You can call these from your project ant file like this:
    <property environment="ENV" />

    <ant antfile="($forrest.home)/forrest.build.xml" 
         target="(your-target-of-choice)" >
      <property name="project.home" value="."/>
      <property name="forrest.home" value="${ENV.FORREST_HOME}"/>
    </ant>
    
    Relative to project.home there will be a number of default
    paths forrest will use to do the requested work.
    To see these (and their use), use the nested property:
      <property name="forrest.echo" value="true" />

    To override these you could do one of:
    - write them down in a file ${project.home}/forrest.properties
      (using Java Property file syntax)
    - set them as nested properties to the <ant> task.
    - set them from the command-line, eg -Dforrest.echo=true

    Targets to call:
    [site building targets]
    site ----------  Build your static project site.
    webapp --------  Bundle your documents in a dynamic cocoon-based webapp to deploy.
    `
    [project seeding targets]

    
    TODO... COMPLETE THIS:
    ]]></echo>
  </target>


<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                  SITE BUILDING ACTIONS                      ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->


  <!-- ===============================================================
       Fills the Cocoon context dir to work in 
       with the forrest-predefines.
       param: name of the skin to use ${project.skin} (now)
       param: location to make temporary context-dir ${project.ctxt-dir} 
       =============================================================== -->
  <target name="bare-context" depends="init" >
    <!-- TODO get rid of this hackerism -->
    <!-- The birth of the siteplan could help in getting rid of these -->
    <filter token="skin"              value="${project.skin}" />
    <filter token="link1"             value="apache"/>
    <filter token="link1.href"        value="http://www.apache.org/"/>
    <filter token="link2"             value="xml.apache"/>
    <filter token="link2.href"        value="http://xml.apache.org/"/>
    <!-- the breadcrumb script already generates it,
         so it needs to be kept blank -->
    <filter token="link3"             value=""/>
    <filter token="link3.href"        value=""/>
    <filter token="group-logo.src"    value="images/group-logo.gif"/>
    <filter token="group-logo.href"   value="http://xml.apache.org/"/>
    <filter token="group-logo.alt"    value="Apache XML logo"/>
    <filter token="project-logo.src"  value="images/project-logo.gif"/>
    <filter token="project-logo.href" value="http://xml.apache.org/forrest/"/>
    <filter token="project-logo.alt"  value="Forrest logo"/>
    <filter token="year"              value="2002"/>
    <filter token="vendor"            value="Apache Sofware Foundation"/>

    <!-- NOW: filter-copy the empty-forrest-context -->
    <!-- WITH SitePlan: smaller empty-context, 1 unfiltered copy
                        + generate more stuff from siteplan -->

    <copy toDir="${project.ctxt-dir}/" filtering="off">
      <fileset dir="${forrest.home}/context" >
        <exclude name="sitemap.xmap" />
        <exclude name="skins/**" />
      </fileset>
      <fileset dir="${forrest.home}/context" >
        <include name="skins/**/images/**" />
      </fileset>
    </copy>

    <copy toDir="${project.ctxt-dir}/" filtering="on">
    <!-- everything in the skins, except the images , and the sitemap -->
      <fileset dir="${forrest.home}/context" >
        <include name="sitemap.xmap" />
        <include name="skins/**" />
        <exclude name="skins/**/images/**" />
      </fileset>
    </copy>
  </target>


  <!-- ===============================================================
       Fills the Cocoon context dir to work in 
       with the project-content-parts 
         (now: copy stuff from param ${project.content-dir}
          with siteplan: based on that plan; should allow more different parts)
       param: location to find the content ${project.content-dir}(now)
       param: location of siteplan ${project.siteplan} (future)
       param: location to find project descriptors == ${project.home} 
       param: location to make temporary context-dir ${project.ctxt-dir} 
       =============================================================== -->
  <target name="project-context" depends="init, bare-context" >
    <copy toDir="${project.ctxt-dir}/" >
      <fileset dir="${project.content-dir}" />
    </copy>
    <copy todir="${project.ctxt-dir}" >
      <fileset dir="${project.home}">
        <include name="*.*ml"/>
      </fileset>
    </copy>
  </target>
  

  <!-- ===============================================================
       Makes the Cocoon context dir to work in and fills it completely.
       That is by depending on:
         bare-context     // for forrest predefines.  
         project-context  // for project's actual content
           (now: copy stuff from extra param defining the content dir
            with siteplan: based on that)
         control-context  // for derivatives from siteplan 
           (now: no need, waiting on siteplan future)
            with siteplan: e.g. sitemap and catalog)
       param: name of the skin to use ${project.skin} (now)
       param: location to find the content ${project.content-dir}(now)
       param: location of siteplan ${project.siteplan} (future)
       param: location to make temporary context-dir ${project.ctxt-dir} 
       =============================================================== -->
  <target name="prepare-context" depends="init, bare-context, project-context" />


  <!-- ===============================================================
       Cleans the site.  (typically before generating the new version)
       param: location to clean ${project.site-dir}
       =============================================================== -->
  <target name="clean-site">
    <delete dir="${project.site-dir}"/>
  </target>


  <!-- ===============================================================
       Makes the site.
       param: name of the skin to use ${project.skin} (now)
       param: location to find the content ${project.content-dir}(now)
       param: location of siteplan ${project.siteplan} (future)
       param: location to make temporary context-dir ${project.ctxt-dir} 
       param: location to make temporary work-dir ${project.content-dir}
       param: debuglevel for logging ${project.debuglevel}
       param: location of log-file ${project.logfile}
       =============================================================== -->
  <target name="site" depends="init, prepare-context, clean-site, prepare-classpath">
    <!-- clean out the temp space, if we don't cocoon fails on this
         actually clears the cache, not yet clear why it is really needed? -->
    <delete dir="${project.work-dir}"/>
    <mkdir dir="${project.work-dir}"/>
    <java classname="org.apache.cocoon.Main" fork="true"
          dir="." failonerror="true"
          classpathref="forrest.cp"
          >
      <arg value="-c${project.ctxt-dir}"/>   <!-- input to the process -->
      <arg value="-d${project.site-dir}"/>   <!-- output to be put -->
      <arg value="-w${project.work-dir}"/>   <!-- temp dir to use for e.g. cache -->
      <arg value="-l${project.logfile}"/>    <!-- log of processing -->
      <arg value="-u${project.debuglevel}"/> <!-- threshold for log messages -->
      <arg value="${project.start-uri}"/>              <!-- starting page -->
    </java>
  </target>


  <!-- ===============================================================
       Builds a cocoon webapp for your project based on the siteplan.
       param: location of siteplan ${project.siteplan}
       param: location to put generated war ${project.war}
       =============================================================== -->
  <target name="webapp" depends="init, prepare-context">
    <!-- this will need revisions in the case of the siteplan
         extra project-custom classes then will need to be warred in as well. -->
    <war warfile="${project.war}"
         webxml="${forrest.home}/WEB-INF/web.xml"
         compress="true">
      <fileset dir="${project.ctxt-dir}" >
        <exclude name="*.xconf" /> <!-- CLI wants them there, webapp finds them in WEB-INF -->
      </fileset>
      <webinf  dir="${forrest.home}/WEB-INF" >
        <include name="*.xconf" />
      </webinf>
      <lib     dir="${forrest.home}/WEB-INF/lib"     />
      <classes dir="${forrest.home}/WEB-INF/classes/"/>
    </war>
  </target>


  <!-- ===============================================================
       Validates all XML documents in the projects-context dir.
       param: location of siteplan ${forrest.siteplan} (future)

       TODO: based on the siteplan we could produce also the special 
       inline catalog format this task is needing. (in combination with 
       the new <import> of ant that could be really snap)
       =============================================================== -->
  <target name="validate" depends="init, prepare-context, prepare-classpath">
    <xmlvalidate failonerror="yes" lenient="yes" warn="yes"
       className="org.apache.xerces.parsers.SAXParser"
       classpathref="forrest.cp">
       <fileset dir="${project.ctxt-dir}">
         <include name="*.x*" />
         <exclude name="*build.xml"/>
      </fileset>
    </xmlvalidate>
  </target>


<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **          PROJECT-TEMPLATE BUILDING ACTIONS                  ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->



  <!-- ===============================================================
        Copies a template structure over to your project dir.

        flag: with or without room for own skin 
        ... flags for others... thers

        Mind this is typically called before any forrest.properties
        or siteplan.xml exists (we should consider generating those as well
 
        maybe even a template ant build?

        dependend task for doing that alone.
        >>> filling this with stuff from smart acorn.xml idea.
       =============================================================== -->
  <target name="seed">
    <unzip src="${forrest.home}/fresh-site.zip" 
           dest="${project.home}"
           overwrite="false"                       />
  </target>



<!-- ***************************************************************** -->
<!-- ***************************************************************** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- **                 BOT EXECUTING ACTIONS                       ** -->
<!-- **                                                             ** -->
<!-- **                                                             ** -->
<!-- ***************************************************************** -->
<!-- ***************************************************************** -->


<!-- currently just a cut and paste: none of this will work atm. -->
<!-- TODO... COMPLETE THIS: -->


  <!-- TODO: nuke this target after handling what it did elsewhere -->
  <target name="bot.init" depends="init">
    <!-- TODO: moce this to main init, should cone from project.home/forrest.properties -->
    <property name="bot.build.dir"              value="${xlayout.build.bot.dir}"/>
    <property name="bot.forrestbot.xconf"       value="forrestbot.conf.xml" />

    <!-- TODO: needs to be in the distribution -->
    <property name="bot.templates.build.xml" 
             value="${xlayout.source.resources.forrestbot.ant.dir}/templates.build.xml" />
    <property name="bot.work.builder.xslt"      
             value="${xlayout.source.resources.forrestbot.xslt.dir}/config2work.xsl" />
    <property name="bot.default.builder.xslt"   
             value="${xlayout.source.resources.forrestbot.xslt.dir}/config2defaults.xsl" />
  </target>


  <target name="bot.conf2build" depends="bot.init" >
    <mkdir dir="${bot.build.dir}" />
    <echo message="Using config file: ${bot.forrestbot.xconf}" />

    <property name="bot.work.build.xml"         value="${bot.build.dir}/work.build.xml"/>
    <property name="bot.default.parameters.xml" value="${bot.build.dir}/default.parameters.xml"/>

    <!-- remove previous versions to force generation again -->
    <delete file="${bot.work.build.xml}" />
    <delete file="${bot.default.parameters.xml}" />

    <!-- builds the different xml files this process needs.  -->
    <style in="${bot.forrestbot.xconf}"
      out="${bot.work.build.xml}"
      style="${bot.work.builder.xslt}"/>
    <style in="${bot.forrestbot.xconf}"
      out="${bot.default.parameters.xml}"
      style="${bot.default.builder.xslt}"/>
    <copy todir="${bot.build.dir}" file="${bot.templates.build.xml}"/>
  </target>


  <target name="bot" depends="bot.conf2build, prepare-classpath" >
    <!-- delegates to the generated XML file -->
    <ant antfile="${bot.work.build.xml}" target="work" inheritRefs="true"/>
  </target>


</project>
